

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed May 18 21:47:22 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49  0000                     _TMR3	set	4018
    50  0000                     _ADCON0bits	set	4034
    51  0000                     _ADCON1bits	set	4033
    52  0000                     _ADCON2bits	set	4032
    53  0000                     _ADRESH	set	4036
    54  0000                     _ADRESL	set	4035
    55  0000                     _INTCON2bits	set	4081
    56  0000                     _INTCON3bits	set	4080
    57  0000                     _INTCONbits	set	4082
    58  0000                     _IPR1bits	set	3999
    59  0000                     _IPR2bits	set	4002
    60  0000                     _LATBbits	set	3978
    61  0000                     _OSCCONbits	set	4051
    62  0000                     _OSCTUNEbits	set	3995
    63  0000                     _PIE1bits	set	3997
    64  0000                     _PIE2bits	set	4000
    65  0000                     _PIR1bits	set	3998
    66  0000                     _PIR2bits	set	4001
    67  0000                     _PORTAbits	set	3968
    68  0000                     _PORTBbits	set	3969
    69  0000                     _RCONbits	set	4048
    70  0000                     _RCREG	set	4014
    71  0000                     _RCSTAbits	set	4011
    72  0000                     _SPBRG	set	4015
    73  0000                     _SPBRGH	set	4016
    74  0000                     _SSPADD	set	4040
    75  0000                     _SSPBUF	set	4041
    76  0000                     _SSPCON1bits	set	4038
    77  0000                     _SSPCON2	set	4037
    78  0000                     _SSPCON2bits	set	4037
    79  0000                     _SSPSTATbits	set	4039
    80  0000                     _T3CON	set	4017
    81  0000                     _T3CONbits	set	4017
    82  0000                     _TRISAbits	set	3986
    83  0000                     _TRISBbits	set	3987
    84  0000                     _TRISCbits	set	3988
    85  0000                     _TXREG	set	4013
    86  0000                     _TXSTAbits	set	4012
    87  0000                     _BRG16	set	32195
    88  0000                     _TRMT	set	32097
    89                           
    90                           	psect	smallconst
    91  000600                     __psmallconst:
    92                           	opt stack 0
    93  000600  00                 	db	0
    94  000601                     STR_2:
    95  000601  4C                 	db	76	;'L'
    96  000602  53                 	db	83	;'S'
    97  000603  42                 	db	66	;'B'
    98  000604  3A                 	db	58	;':'
    99  000605  00                 	db	0
   100  000606                     STR_1:
   101  000606  4D                 	db	77	;'M'
   102  000607  53                 	db	83	;'S'
   103  000608  42                 	db	66	;'B'
   104  000609  3A                 	db	58	;':'
   105  00060A  00                 	db	0
   106                           
   107                           ; #config settings
   108  00060B  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           	psect	cinit
   111  0015EE                     __pcinit:
   112                           	opt stack 0
   113  0015EE                     start_initialization:
   114                           	opt stack 0
   115  0015EE                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to BANK0 (2 bytes)
   119  0015EE  0100               	movlb	0
   120  0015F0  6BBE               	clrf	(__pbssBANK0+1)& (0+255),b
   121  0015F2  6BBD               	clrf	__pbssBANK0& (0+255),b
   122                           
   123                           ; Clear objects allocated to COMRAM (14 bytes)
   124  0015F4  EE00  F050         	lfsr	0,__pbssCOMRAM
   125  0015F8  0E0E               	movlw	14
   126  0015FA                     clear_0:
   127  0015FA  6AEE               	clrf	postinc0,c
   128  0015FC  06E8               	decf	wreg,f,c
   129  0015FE  E1FD               	bnz	clear_0
   130  001600                     end_of_initialization:
   131                           	opt stack 0
   132  001600                     __end_of__initialization:
   133                           	opt stack 0
   134  001600  0E00               	movlw	low (__Lmediumconst shr (0+16))
   135  001602  6EF8               	movwf	tblptru,c
   136  001604  0100               	movlb	0
   137  001606  EF06  F003         	goto	_main	;jump to C main() function
   138                           tblptru	equ	0xFF8
   139                           postinc0	equ	0xFEE
   140                           wreg	equ	0xFE8
   141                           
   142                           	psect	bssCOMRAM
   143  000050                     __pbssCOMRAM:
   144                           	opt stack 0
   145  000050                     _bfcount:
   146                           	opt stack 0
   147  000050                     	ds	2
   148  000052                     _count:
   149                           	opt stack 0
   150  000052                     	ds	2
   151  000054                     _ackflag:
   152                           	opt stack 0
   153  000054                     	ds	1
   154  000055                     _adcflag:
   155                           	opt stack 0
   156  000055                     	ds	1
   157  000056                     _b_error:
   158                           	opt stack 0
   159  000056                     	ds	1
   160  000057                     _bflag:
   161                           	opt stack 0
   162  000057                     	ds	1
   163  000058                     _con_sen:
   164                           	opt stack 0
   165  000058                     	ds	1
   166  000059                     _data:
   167                           	opt stack 0
   168  000059                     	ds	1
   169  00005A                     _data_rdy:
   170                           	opt stack 0
   171  00005A                     	ds	1
   172  00005B                     _garb:
   173                           	opt stack 0
   174  00005B                     	ds	1
   175  00005C                     fdcRead@val:
   176                           	opt stack 0
   177  00005C                     	ds	2
   178                           tblptru	equ	0xFF8
   179                           postinc0	equ	0xFEE
   180                           wreg	equ	0xFE8
   181                           
   182                           	psect	bssBANK0
   183  0000BD                     __pbssBANK0:
   184                           	opt stack 0
   185  0000BD                     _IRQ:
   186                           	opt stack 0
   187  0000BD                     	ds	1
   188  0000BE                     _en_read:
   189                           	opt stack 0
   190  0000BE                     	ds	1
   191                           tblptru	equ	0xFF8
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           
   195                           	psect	cstackBANK0
   196  000080                     __pcstackBANK0:
   197                           	opt stack 0
   198  000080                     ?_nrfRead:
   199                           	opt stack 0
   200  000080                     ?_nrfReadADDR:
   201                           	opt stack 0
   202  000080                     nrfWrite@data:
   203                           	opt stack 0
   204  000080                     writeVal@buffer:
   205                           	opt stack 0
   206                           
   207                           ; 20 bytes @ 0x0
   208  000080                     	ds	1
   209  000081                     nrfWrite@tmp:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x1
   213  000081                     	ds	1
   214  000082                     nrfRead@reg:
   215                           	opt stack 0
   216  000082                     nrfWrite@reg:
   217                           	opt stack 0
   218  000082                     nrfReadADDR@val:
   219                           	opt stack 0
   220                           
   221                           ; 5 bytes @ 0x2
   222  000082                     	ds	1
   223  000083                     nrfRead@val:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x3
   227  000083                     	ds	2
   228  000085                     nrfRead@i:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0x5
   232  000085                     	ds	2
   233  000087                     nrfReadADDR@reg:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x7
   237  000087                     	ds	1
   238  000088                     nrfReadADDR@i:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x8
   242  000088                     	ds	12
   243  000094                     ??_nrfReceiveMode:
   244  000094                     ??_nrfShowSettings:
   245  000094                     nrfTransmit@data:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x14
   249  000094                     	ds	1
   250  000095                     nrfShowSettings@val:
   251                           	opt stack 0
   252  000095                     nrfReceiveMode@val:
   253                           	opt stack 0
   254                           
   255                           ; 20 bytes @ 0x15
   256  000095                     	ds	1
   257  000096                     nrfTransmit@len:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x16
   261  000096                     	ds	1
   262  000097                     ??_nrfTransmit:
   263  000097                     nrfShowSettings@k:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x17
   267  000097                     	ds	1
   268  000098                     nrfShowSettings@i:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x18
   272  000098                     	ds	2
   273  00009A                     nrfTransmit@tmp:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x1A
   277  00009A                     	ds	1
   278  00009B                     nrfTransmit@i:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x1B
   282  00009B                     	ds	14
   283  0000A9                     nrfReceiveMode@status:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x29
   287  0000A9                     	ds	2
   288  0000AB                     nrfReceiveMode@len:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x2B
   292  0000AB                     	ds	2
   293  0000AD                     nrfReceiveMode@i:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x2D
   297  0000AD                     	ds	1
   298  0000AE                     ??_main:
   299                           
   300                           ; 0 bytes @ 0x2E
   301  0000AE                     	ds	1
   302  0000AF                     main@addr:
   303                           	opt stack 0
   304                           
   305                           ; 4 bytes @ 0x2F
   306  0000AF                     	ds	4
   307  0000B3                     main@packet:
   308                           	opt stack 0
   309                           
   310                           ; 3 bytes @ 0x33
   311  0000B3                     	ds	3
   312  0000B6                     main@packetlen:
   313                           	opt stack 0
   314                           
   315                           ; 1 bytes @ 0x36
   316  0000B6                     	ds	1
   317  0000B7                     main@lsb:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0x37
   321  0000B7                     	ds	1
   322  0000B8                     main@msb1:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0x38
   326  0000B8                     	ds	1
   327  0000B9                     main@msb2:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x39
   331  0000B9                     	ds	1
   332  0000BA                     main@cmd:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x3A
   336  0000BA                     	ds	1
   337  0000BB                     main@capstat:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x3B
   341  0000BB                     	ds	2
   342                           tblptru	equ	0xFF8
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           
   346                           	psect	cstackCOMRAM
   347  000001                     __pcstackCOMRAM:
   348                           	opt stack 0
   349  000001                     i1writeChar@c:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x0
   353  000001                     	ds	1
   354  000002                     ??_lowISR:
   355                           
   356                           ; 0 bytes @ 0x1
   357  000002                     	ds	19
   358  000015                     ??_i2cISR:
   359                           
   360                           ; 0 bytes @ 0x14
   361  000015                     	ds	14
   362  000023                     ??_i2cIdle:
   363  000023                     ?___awdiv:
   364                           	opt stack 0
   365  000023                     ?___ftpack:
   366                           	opt stack 0
   367  000023                     ?___lldiv:
   368                           	opt stack 0
   369  000023                     ?___llmod:
   370                           	opt stack 0
   371  000023                     writeChar@c:
   372                           	opt stack 0
   373  000023                     ___awdiv@dividend:
   374                           	opt stack 0
   375  000023                     ___ftpack@arg:
   376                           	opt stack 0
   377  000023                     ___lldiv@dividend:
   378                           	opt stack 0
   379  000023                     ___llmod@dividend:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0x22
   383  000023                     	ds	1
   384  000024                     i2cStart@input:
   385                           	opt stack 0
   386  000024                     writeStr@str:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x23
   390  000024                     	ds	1
   391  000025                     ___awdiv@divisor:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x24
   395  000025                     	ds	1
   396  000026                     ??_writeStr:
   397  000026                     i2cStart@len:
   398                           	opt stack 0
   399  000026                     ___ftpack@exp:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x25
   403  000026                     	ds	1
   404  000027                     ??_i2cStart:
   405  000027                     ___awdiv@counter:
   406                           	opt stack 0
   407  000027                     ___ftpack@sign:
   408                           	opt stack 0
   409  000027                     ___lldiv@divisor:
   410                           	opt stack 0
   411  000027                     ___llmod@divisor:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x26
   415  000027                     	ds	1
   416  000028                     ??___ftpack:
   417  000028                     writeStr@i:
   418                           	opt stack 0
   419  000028                     ___awdiv@sign:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x27
   423  000028                     	ds	1
   424  000029                     ___awdiv@quotient:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x28
   428  000029                     	ds	1
   429  00002A                     i2cStart@i:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x29
   433  00002A                     	ds	1
   434  00002B                     ?___lwtoft:
   435                           	opt stack 0
   436  00002B                     ___llmod@counter:
   437                           	opt stack 0
   438  00002B                     ___lwtoft@c:
   439                           	opt stack 0
   440  00002B                     ___lldiv@quotient:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x2A
   444  00002B                     	ds	1
   445  00002C                     ?_fdcRead:
   446                           	opt stack 0
   447  00002C                     fdcWrite@msb:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x2B
   451  00002C                     	ds	1
   452  00002D                     fdcWrite@lsb:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x2C
   456  00002D                     	ds	1
   457  00002E                     ??_fdcRead:
   458  00002E                     ?___ftmul:
   459                           	opt stack 0
   460  00002E                     fdcWrite@reg:
   461                           	opt stack 0
   462  00002E                     ___ftmul@f1:
   463                           	opt stack 0
   464                           
   465                           ; 3 bytes @ 0x2D
   466  00002E                     	ds	1
   467  00002F                     fdcRead@reg:
   468                           	opt stack 0
   469  00002F                     ___lldiv@counter:
   470                           	opt stack 0
   471  00002F                     fdcWrite@input:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x2E
   475  00002F                     	ds	1
   476  000030                     fdcRead@header:
   477                           	opt stack 0
   478  000030                     ultoa@buf:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x2F
   482  000030                     	ds	1
   483  000031                     ___ftmul@f2:
   484                           	opt stack 0
   485                           
   486                           ; 3 bytes @ 0x30
   487  000031                     	ds	1
   488  000032                     fdcRead@ack:
   489                           	opt stack 0
   490  000032                     ultoa@val:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x31
   494  000032                     	ds	1
   495  000033                     
   496                           ; 0 bytes @ 0x32
   497  000033                     	ds	1
   498  000034                     ??___ftmul:
   499  000034                     fdcRead@i:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x33
   503  000034                     	ds	1
   504  000035                     fdcMeas@msb1:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x34
   508  000035                     	ds	1
   509  000036                     ultoa@base:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x35
   513  000036                     	ds	1
   514  000037                     ___ftmul@exp:
   515                           	opt stack 0
   516  000037                     fdcMeas@msb2:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x36
   520  000037                     	ds	1
   521  000038                     ___ftmul@f3_as_product:
   522                           	opt stack 0
   523  000038                     ultoa@v:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x37
   527  000038                     	ds	1
   528  000039                     fdcMeas@lsb:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x38
   532  000039                     	ds	2
   533  00003B                     ??_fdcMeas:
   534  00003B                     ___ftmul@cntr:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x3A
   538  00003B                     	ds	1
   539  00003C                     ___ftmul@sign:
   540                           	opt stack 0
   541  00003C                     ultoa@c:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x3B
   545  00003C                     	ds	1
   546  00003D                     fdcMeas@done:
   547                           	opt stack 0
   548  00003D                     ___ftge@ff1:
   549                           	opt stack 0
   550  00003D                     writeVal@val:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x3C
   554  00003D                     	ds	1
   555  00003E                     fdcMeas@offset:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x3D
   559  00003E                     	ds	1
   560  00003F                     fdcMeas@addr:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x3E
   564  00003F                     	ds	1
   565  000040                     fdcMeas@chx_reg:
   566                           	opt stack 0
   567  000040                     ___ftge@ff2:
   568                           	opt stack 0
   569                           
   570                           ; 3 bytes @ 0x3F
   571  000040                     	ds	1
   572  000041                     fdcMeas@buf:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x40
   576  000041                     	ds	2
   577  000043                     ??___ftge:
   578                           
   579                           ; 0 bytes @ 0x42
   580  000043                     	ds	3
   581  000046                     delay@sec:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x45
   585  000046                     	ds	3
   586  000049                     ??_delay:
   587                           
   588                           ; 0 bytes @ 0x48
   589  000049                     	ds	2
   590  00004B                     delay@done:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x4A
   594  00004B                     	ds	1
   595  00004C                     delay@t1:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x4B
   599  00004C                     	ds	2
   600  00004E                     delay@t2:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x4D
   604  00004E                     	ds	2
   605  000050                     tblptru	equ	0xFF8
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           
   609                           ; 0 bytes @ 0x4F
   610 ;;
   611 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   612 ;;
   613 ;; *************** function _main *****************
   614 ;; Defined at:
   615 ;;		line 30 in file "main.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  tdata          16    0        unsigned char [16]
   620 ;;  addr            4   47[BANK0 ] unsigned char [4]
   621 ;;  packet          3   51[BANK0 ] unsigned char [3]
   622 ;;  capstat         2   59[BANK0 ] PTR unsigned char 
   623 ;;		 -> fdcRead@val(2), nrfRead@val(2), 
   624 ;;  cmd             1   58[BANK0 ] unsigned char 
   625 ;;  msb2            1   57[BANK0 ] unsigned char 
   626 ;;  msb1            1   56[BANK0 ] unsigned char 
   627 ;;  lsb             1   55[BANK0 ] unsigned char 
   628 ;;  packetlen       1   54[BANK0 ] unsigned char 
   629 ;; Return value:  Size  Location     Type
   630 ;;		None               void
   631 ;; Registers used:
   632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   638 ;;      Params:         0       0       0       0       0       0       0
   639 ;;      Locals:         0      14       0       0       0       0       0
   640 ;;      Temps:          0       1       0       0       0       0       0
   641 ;;      Totals:         0      15       0       0       0       0       0
   642 ;;Total ram usage:       15 bytes
   643 ;; Hardware stack levels required when called:    9
   644 ;; This function calls:
   645 ;;		_configureInterrupts
   646 ;;		_configureOscillator
   647 ;;		_fdcInit
   648 ;;		_fdcMeas
   649 ;;		_fdcRead
   650 ;;		_i2cInit
   651 ;;		_nrfRead
   652 ;;		_nrfReceiveMode
   653 ;;		_nrfShowSettings
   654 ;;		_nrfTransmit
   655 ;;		_nrfWrite
   656 ;;		_readChar
   657 ;;		_timer3_init
   658 ;;		_uartInit
   659 ;;		_writeChar
   660 ;;		_writeStr
   661 ;;		_writeVal
   662 ;; This function is called by:
   663 ;;		Startup code after reset
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           	psect	text0
   668  00060C                     __ptext0:
   669                           	opt stack 0
   670  00060C                     _main:
   671                           	opt stack 22
   672                           
   673                           ;main.c: 31: configureOscillator();
   674                           
   675                           ;incstack = 0
   676  00060C  EC13  F00B         	call	_configureOscillator	;wreg free
   677                           
   678                           ;main.c: 32: configureInterrupts();
   679  000610  ECD8  F00A         	call	_configureInterrupts	;wreg free
   680                           
   681                           ;main.c: 33: uartInit();
   682  000614  ECE8  F00A         	call	_uartInit	;wreg free
   683                           
   684                           ;main.c: 34: i2cInit();
   685  000618  EC20  F00B         	call	_i2cInit	;wreg free
   686                           
   687                           ;main.c: 35: timer3_init();
   688  00061C  EC45  F00B         	call	_timer3_init	;wreg free
   689                           
   690                           ;main.c: 36: ADCON1bits.PCFG = 0b1111;
   691  000620  80C1               	bsf	4033,0,c	;volatile
   692  000622  82C1               	bsf	4033,1,c	;volatile
   693  000624  84C1               	bsf	4033,2,c	;volatile
   694  000626  86C1               	bsf	4033,3,c	;volatile
   695                           
   696                           ;main.c: 37: TRISBbits.RB0 = 0;
   697  000628  9093               	bcf	3987,0,c	;volatile
   698                           
   699                           ;main.c: 38: PORTBbits.RB0 = 1;
   700  00062A  8081               	bsf	3969,0,c	;volatile
   701                           
   702                           ;main.c: 39: TRISBbits.RB1 = 0;
   703  00062C  9293               	bcf	3987,1,c	;volatile
   704                           
   705                           ;main.c: 41: LATBbits.LB1 = 1;
   706  00062E  828A               	bsf	3978,1,c	;volatile
   707                           
   708                           ;main.c: 42: TRISBbits.RB2 = 1;
   709  000630  8493               	bsf	3987,2,c	;volatile
   710                           
   711                           ;main.c: 43: unsigned char packetlen = 3;
   712  000632  0E03               	movlw	3
   713  000634  0100               	movlb	0	; () banked
   714  000636  6FB6               	movwf	main@packetlen& (0+255),b
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 44: nrfWrite(0,0b01101011);
   718  000638  0E6B               	movlw	107
   719  00063A  0100               	movlb	0	; () banked
   720  00063C  6F80               	movwf	nrfWrite@data& (0+255),b
   721  00063E  0E00               	movlw	0
   722  000640  EC68  F00A         	call	_nrfWrite
   723                           
   724                           ;main.c: 45: nrfWrite(0x11,packetlen);
   725  000644  C0B6  F080         	movff	main@packetlen,nrfWrite@data
   726  000648  0E11               	movlw	17
   727  00064A  EC68  F00A         	call	_nrfWrite
   728                           
   729                           ;main.c: 46: unsigned char *capstat,tdata[16],addr[4],lsb,packet[3];
   730                           ;main.c: 47: unsigned char msb1,msb2;
   731                           ;main.c: 48: char cmd;
   732                           ;main.c: 49: fdcInit();
   733  00064E  EC24  F009         	call	_fdcInit	;wreg free
   734                           
   735                           ;main.c: 50: addr[0] = 0x00;
   736  000652  0E00               	movlw	0
   737  000654  0100               	movlb	0	; () banked
   738  000656  6FAF               	movwf	main@addr& (0+255),b
   739                           
   740                           ; BSR set to: 0
   741                           ;main.c: 51: addr[1] = 0x02;
   742  000658  0E02               	movlw	2
   743  00065A  0100               	movlb	0	; () banked
   744  00065C  6FB0               	movwf	(main@addr+1)& (0+255),b
   745                           
   746                           ; BSR set to: 0
   747                           ;main.c: 52: addr[2] = 0x04;
   748  00065E  0E04               	movlw	4
   749  000660  0100               	movlb	0	; () banked
   750  000662  6FB1               	movwf	(main@addr+2)& (0+255),b
   751                           
   752                           ; BSR set to: 0
   753                           ;main.c: 53: addr[3] = 0x06;
   754  000664  0E06               	movlw	6
   755  000666  0100               	movlb	0	; () banked
   756  000668  6FB2               	movwf	(main@addr+3)& (0+255),b
   757  00066A  D000               	goto	l3406
   758  00066C                     l3406:
   759                           
   760                           ;main.c: 56: cmd = readChar();
   761  00066C  EC2C  F00B         	call	_readChar	;wreg free
   762  000670  0100               	movlb	0	; () banked
   763  000672  6FBA               	movwf	main@cmd& (0+255),b
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 57: if(cmd == 'm'){
   767  000674  0E6D               	movlw	109
   768  000676  0100               	movlb	0	; () banked
   769  000678  19BA               	xorwf	main@cmd& (0+255),w,b
   770  00067A  B4D8               	btfsc	status,2,c
   771  00067C  D034               	goto	l3426
   772  00067E  D041               	goto	l3430
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 58: while(!en_read){
   776  000680  D032               	goto	l3426
   777  000682                     l3412:
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 59: fdcMeas(addr[0],&msb1,&msb2,&lsb);
   781  000682  0EB8               	movlw	low main@msb1
   782  000684  6E35               	movwf	fdcMeas@msb1,c
   783  000686  0E00               	movlw	high main@msb1
   784  000688  6E36               	movwf	fdcMeas@msb1+1,c
   785  00068A  0EB9               	movlw	low main@msb2
   786  00068C  6E37               	movwf	fdcMeas@msb2,c
   787  00068E  0E00               	movlw	high main@msb2
   788  000690  6E38               	movwf	fdcMeas@msb2+1,c
   789  000692  0EB7               	movlw	low main@lsb
   790  000694  6E39               	movwf	fdcMeas@lsb,c
   791  000696  0E00               	movlw	high main@lsb
   792  000698  6E3A               	movwf	fdcMeas@lsb+1,c
   793  00069A  0100               	movlb	0	; () banked
   794  00069C  51AF               	movf	main@addr& (0+255),w,b
   795  00069E  ECBF  F005         	call	_fdcMeas
   796                           
   797                           ;main.c: 60: writeVal(msb1);writeChar(' ');writeVal(msb2);
   798  0006A2  0100               	movlb	0	; () banked
   799  0006A4  51B8               	movf	main@msb1& (0+255),w,b
   800  0006A6  6E3D               	movwf	writeVal@val,c
   801  0006A8  6A3E               	clrf	writeVal@val+1,c
   802  0006AA  6A3F               	clrf	writeVal@val+2,c
   803  0006AC  6A40               	clrf	writeVal@val+3,c
   804  0006AE  EC83  F00A         	call	_writeVal	;wreg free
   805  0006B2  0E20               	movlw	32
   806  0006B4  EC37  F00B         	call	_writeChar
   807  0006B8  0100               	movlb	0	; () banked
   808  0006BA  51B9               	movf	main@msb2& (0+255),w,b
   809  0006BC  6E3D               	movwf	writeVal@val,c
   810  0006BE  6A3E               	clrf	writeVal@val+1,c
   811  0006C0  6A3F               	clrf	writeVal@val+2,c
   812  0006C2  6A40               	clrf	writeVal@val+3,c
   813  0006C4  EC83  F00A         	call	_writeVal	;wreg free
   814                           
   815                           ;main.c: 61: writeChar(' ');writeVal(lsb);writeChar('\n');
   816  0006C8  0E20               	movlw	32
   817  0006CA  EC37  F00B         	call	_writeChar
   818  0006CE  0100               	movlb	0	; () banked
   819  0006D0  51B7               	movf	main@lsb& (0+255),w,b
   820  0006D2  6E3D               	movwf	writeVal@val,c
   821  0006D4  6A3E               	clrf	writeVal@val+1,c
   822  0006D6  6A3F               	clrf	writeVal@val+2,c
   823  0006D8  6A40               	clrf	writeVal@val+3,c
   824  0006DA  EC83  F00A         	call	_writeVal	;wreg free
   825  0006DE  0E0A               	movlw	10
   826  0006E0  EC37  F00B         	call	_writeChar
   827  0006E4  D000               	goto	l3426
   828  0006E6                     l3426:
   829  0006E6  0100               	movlb	0	; () banked
   830  0006E8  51BE               	movf	_en_read& (0+255),w,b	;volatile
   831  0006EA  B4D8               	btfsc	status,2,c
   832  0006EC  D7CA               	goto	l3412
   833                           
   834                           ; BSR set to: 0
   835                           ;main.c: 62: }
   836                           ;main.c: 63: packet[0] = lsb;
   837  0006EE  C0B7  F0B3         	movff	main@lsb,main@packet
   838                           
   839                           ;main.c: 64: packet[1] = msb2;
   840  0006F2  C0B9  F0B4         	movff	main@msb2,main@packet+1
   841                           
   842                           ;main.c: 65: packet[2] = msb1;
   843  0006F6  C0B8  F0B5         	movff	main@msb1,main@packet+2
   844                           
   845                           ; BSR set to: 0
   846                           ;main.c: 66: en_read = 0;
   847  0006FA  0E00               	movlw	0
   848  0006FC  0100               	movlb	0	; () banked
   849  0006FE  6FBE               	movwf	_en_read& (0+255),b	;volatile
   850                           
   851                           ;main.c: 67: }
   852  000700  D7B5               	goto	l3406
   853  000702                     l3430:
   854                           
   855                           ; BSR set to: 0
   856                           ;main.c: 69: else if(cmd == 'e'){
   857  000702  0E65               	movlw	101
   858  000704  0100               	movlb	0	; () banked
   859  000706  19BA               	xorwf	main@cmd& (0+255),w,b
   860  000708  A4D8               	btfss	status,2,c
   861  00070A  D03B               	goto	l3446
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 70: capstat = fdcRead(0x0C);
   865  00070C  0E0C               	movlw	12
   866  00070E  EC4F  F008         	call	_fdcRead
   867  000712  C02C  F0BB         	movff	?_fdcRead,main@capstat
   868  000716  C02D  F0BC         	movff	?_fdcRead+1,main@capstat+1
   869                           
   870                           ;main.c: 71: writeStr("MSB:");writeVal(capstat[0]);writeChar(' ');
   871  00071A  0E06               	movlw	low STR_1
   872  00071C  6E24               	movwf	writeStr@str,c
   873  00071E  0E06               	movlw	high STR_1
   874  000720  6E25               	movwf	writeStr@str+1,c
   875  000722  EC64  F009         	call	_writeStr	;wreg free
   876  000726  C0BB  FFD9         	movff	main@capstat,fsr2l
   877  00072A  C0BC  FFDA         	movff	main@capstat+1,fsr2h
   878  00072E  50DF               	movf	indf2,w,c
   879  000730  0100               	movlb	0	; () banked
   880  000732  6FAE               	movwf	??_main& (0+255),b
   881  000734  0100               	movlb	0	; () banked
   882  000736  51AE               	movf	??_main& (0+255),w,b
   883  000738  6E3D               	movwf	writeVal@val,c
   884  00073A  6A3E               	clrf	writeVal@val+1,c
   885  00073C  6A3F               	clrf	writeVal@val+2,c
   886  00073E  6A40               	clrf	writeVal@val+3,c
   887  000740  EC83  F00A         	call	_writeVal	;wreg free
   888  000744  0E20               	movlw	32
   889  000746  EC37  F00B         	call	_writeChar
   890                           
   891                           ;main.c: 72: writeStr("LSB:");writeVal(capstat[1]);writeChar('\n');
   892  00074A  0E01               	movlw	low STR_2
   893  00074C  6E24               	movwf	writeStr@str,c
   894  00074E  0E06               	movlw	high STR_2
   895  000750  6E25               	movwf	writeStr@str+1,c
   896  000752  EC64  F009         	call	_writeStr	;wreg free
   897  000756  0100               	movlb	0	; () banked
   898  000758  EE20 F001          	lfsr	2,1
   899  00075C  51BB               	movf	main@capstat& (0+255),w,b
   900  00075E  26D9               	addwf	fsr2l,f,c
   901  000760  51BC               	movf	(main@capstat+1)& (0+255),w,b
   902  000762  22DA               	addwfc	fsr2h,f,c
   903  000764  50DF               	movf	indf2,w,c
   904  000766  0100               	movlb	0	; () banked
   905  000768  6FAE               	movwf	??_main& (0+255),b
   906  00076A  0100               	movlb	0	; () banked
   907  00076C  51AE               	movf	??_main& (0+255),w,b
   908  00076E  6E3D               	movwf	writeVal@val,c
   909  000770  6A3E               	clrf	writeVal@val+1,c
   910  000772  6A3F               	clrf	writeVal@val+2,c
   911  000774  6A40               	clrf	writeVal@val+3,c
   912  000776  EC83  F00A         	call	_writeVal	;wreg free
   913  00077A  0E0A               	movlw	10
   914  00077C  EC37  F00B         	call	_writeChar
   915                           
   916                           ;main.c: 73: }
   917  000780  D775               	goto	l3406
   918  000782                     l3446:
   919                           
   920                           ;main.c: 74: else if(cmd == 'r'){
   921  000782  0E72               	movlw	114
   922  000784  0100               	movlb	0	; () banked
   923  000786  19BA               	xorwf	main@cmd& (0+255),w,b
   924  000788  A4D8               	btfss	status,2,c
   925  00078A  D01B               	goto	l3456
   926                           
   927                           ; BSR set to: 0
   928                           ;main.c: 76: capstat = nrfRead(7);
   929  00078C  0E07               	movlw	7
   930  00078E  EC0F  F00A         	call	_nrfRead
   931  000792  C080  F0BB         	movff	?_nrfRead,main@capstat
   932  000796  C081  F0BC         	movff	?_nrfRead+1,main@capstat+1
   933                           
   934                           ;main.c: 77: if(capstat[1]&0x40){
   935  00079A  0100               	movlb	0	; () banked
   936  00079C  EE20 F001          	lfsr	2,1
   937  0007A0  51BB               	movf	main@capstat& (0+255),w,b
   938  0007A2  26D9               	addwf	fsr2l,f,c
   939  0007A4  51BC               	movf	(main@capstat+1)& (0+255),w,b
   940  0007A6  22DA               	addwfc	fsr2h,f,c
   941  0007A8  0100               	movlb	0	; () banked
   942  0007AA  ACDF               	btfss	indf2,6,c
   943  0007AC  D007               	goto	l3454
   944                           
   945                           ; BSR set to: 0
   946                           ;main.c: 78: nrfWrite(7,0x40);
   947  0007AE  0E40               	movlw	64
   948  0007B0  0100               	movlb	0	; () banked
   949  0007B2  6F80               	movwf	nrfWrite@data& (0+255),b
   950  0007B4  0E07               	movlw	7
   951  0007B6  EC68  F00A         	call	_nrfWrite
   952  0007BA  D000               	goto	l3454
   953  0007BC                     l3454:
   954                           
   955                           ;main.c: 79: }
   956                           ;main.c: 80: nrfReceiveMode();
   957  0007BC  EC3A  F006         	call	_nrfReceiveMode	;wreg free
   958                           
   959                           ;main.c: 81: }
   960  0007C0  D755               	goto	l3406
   961  0007C2                     l3456:
   962                           
   963                           ;main.c: 85: else if(cmd == 's'){
   964  0007C2  0E73               	movlw	115
   965  0007C4  0100               	movlb	0	; () banked
   966  0007C6  19BA               	xorwf	main@cmd& (0+255),w,b
   967  0007C8  A4D8               	btfss	status,2,c
   968  0007CA  D003               	goto	l3460
   969                           
   970                           ; BSR set to: 0
   971                           ;main.c: 86: nrfShowSettings();
   972  0007CC  EC29  F004         	call	_nrfShowSettings	;wreg free
   973                           
   974                           ;main.c: 87: }
   975  0007D0  D74D               	goto	l3406
   976  0007D2                     l3460:
   977                           
   978                           ;main.c: 89: else if(cmd == 't'){
   979  0007D2  0E74               	movlw	116
   980  0007D4  0100               	movlb	0	; () banked
   981  0007D6  19BA               	xorwf	main@cmd& (0+255),w,b
   982  0007D8  A4D8               	btfss	status,2,c
   983  0007DA  D748               	goto	l3406
   984                           
   985                           ; BSR set to: 0
   986                           ;main.c: 95: nrfWrite(0,0b01101010);
   987  0007DC  0E6A               	movlw	106
   988  0007DE  0100               	movlb	0	; () banked
   989  0007E0  6F80               	movwf	nrfWrite@data& (0+255),b
   990  0007E2  0E00               	movlw	0
   991  0007E4  EC68  F00A         	call	_nrfWrite
   992                           
   993                           ;main.c: 96: nrfTransmit(packet,packetlen);
   994  0007E8  0EB3               	movlw	low main@packet
   995  0007EA  0100               	movlb	0	; () banked
   996  0007EC  6F94               	movwf	nrfTransmit@data& (0+255),b
   997  0007EE  0E00               	movlw	high main@packet
   998  0007F0  0100               	movlb	0	; () banked
   999  0007F2  6F95               	movwf	(nrfTransmit@data+1)& (0+255),b
  1000  0007F4  C0B6  F096         	movff	main@packetlen,nrfTransmit@len
  1001  0007F8  EC11  F007         	call	_nrfTransmit	;wreg free
  1002                           
  1003                           ;main.c: 97: capstat = nrfRead(7);
  1004  0007FC  0E07               	movlw	7
  1005  0007FE  EC0F  F00A         	call	_nrfRead
  1006  000802  C080  F0BB         	movff	?_nrfRead,main@capstat
  1007  000806  C081  F0BC         	movff	?_nrfRead+1,main@capstat+1
  1008                           
  1009                           ;main.c: 98: if(capstat[1]&0x10){
  1010  00080A  0100               	movlb	0	; () banked
  1011  00080C  EE20 F001          	lfsr	2,1
  1012  000810  51BB               	movf	main@capstat& (0+255),w,b
  1013  000812  26D9               	addwf	fsr2l,f,c
  1014  000814  51BC               	movf	(main@capstat+1)& (0+255),w,b
  1015  000816  22DA               	addwfc	fsr2h,f,c
  1016  000818  0100               	movlb	0	; () banked
  1017  00081A  A8DF               	btfss	indf2,4,c
  1018  00081C  D007               	goto	l3472
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;main.c: 99: nrfWrite(7,0x10);
  1022  00081E  0E10               	movlw	16
  1023  000820  0100               	movlb	0	; () banked
  1024  000822  6F80               	movwf	nrfWrite@data& (0+255),b
  1025  000824  0E07               	movlw	7
  1026  000826  EC68  F00A         	call	_nrfWrite
  1027  00082A  D000               	goto	l3472
  1028  00082C                     l3472:
  1029                           
  1030                           ;main.c: 100: }
  1031                           ;main.c: 101: if(capstat[1]&0x20){
  1032  00082C  0100               	movlb	0	; () banked
  1033  00082E  EE20 F001          	lfsr	2,1
  1034  000832  51BB               	movf	main@capstat& (0+255),w,b
  1035  000834  26D9               	addwf	fsr2l,f,c
  1036  000836  51BC               	movf	(main@capstat+1)& (0+255),w,b
  1037  000838  22DA               	addwfc	fsr2h,f,c
  1038  00083A  0100               	movlb	0	; () banked
  1039  00083C  AADF               	btfss	indf2,5,c
  1040  00083E  D716               	goto	l3406
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 102: nrfWrite(7,0x20);
  1044  000840  0E20               	movlw	32
  1045  000842  0100               	movlb	0	; () banked
  1046  000844  6F80               	movwf	nrfWrite@data& (0+255),b
  1047  000846  0E07               	movlw	7
  1048  000848  EC68  F00A         	call	_nrfWrite
  1049  00084C  D70F               	goto	l3406
  1050  00084E  EFA3  F000         	goto	start
  1051  000852                     __end_of_main:
  1052                           	opt stack 0
  1053                           tblptru	equ	0xFF8
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           indf2	equ	0xFDF
  1057                           fsr2h	equ	0xFDA
  1058                           fsr2l	equ	0xFD9
  1059                           status	equ	0xFD8
  1060                           
  1061 ;; *************** function _uartInit *****************
  1062 ;; Defined at:
  1063 ;;		line 21 in file "uart.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;		None
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;		None
  1068 ;; Return value:  Size  Location     Type
  1069 ;;		None               void
  1070 ;; Registers used:
  1071 ;;		wreg, status,2
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1077 ;;      Params:         0       0       0       0       0       0       0
  1078 ;;      Locals:         0       0       0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0       0       0
  1080 ;;      Totals:         0       0       0       0       0       0       0
  1081 ;;Total ram usage:        0 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; Hardware stack levels required when called:    3
  1084 ;; This function calls:
  1085 ;;		Nothing
  1086 ;; This function is called by:
  1087 ;;		_main
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text1
  1092  0015D0                     __ptext1:
  1093                           	opt stack 0
  1094  0015D0                     _uartInit:
  1095                           	opt stack 27
  1096                           
  1097                           ;uart.c: 23: TRISCbits.RC7 = 1;
  1098                           
  1099                           ;incstack = 0
  1100  0015D0  8E94               	bsf	3988,7,c	;volatile
  1101                           
  1102                           ;uart.c: 24: TRISCbits.RC6 = 1;
  1103  0015D2  8C94               	bsf	3988,6,c	;volatile
  1104                           
  1105                           ;uart.c: 25: RCSTAbits.SPEN = 1;
  1106  0015D4  8EAB               	bsf	4011,7,c	;volatile
  1107                           
  1108                           ;uart.c: 27: TXSTAbits.SYNC = 0;
  1109  0015D6  98AC               	bcf	4012,4,c	;volatile
  1110                           
  1111                           ;uart.c: 28: TXSTAbits.BRGH = 1;
  1112  0015D8  84AC               	bsf	4012,2,c	;volatile
  1113                           
  1114                           ;uart.c: 29: BRG16 = 0;
  1115  0015DA  96B8               	bcf	4024,3,c	;volatile
  1116                           
  1117                           ;uart.c: 30: SPBRGH = 0;
  1118  0015DC  0E00               	movlw	0
  1119  0015DE  6EB0               	movwf	4016,c	;volatile
  1120                           
  1121                           ;uart.c: 31: SPBRG = 12;
  1122  0015E0  0E0C               	movlw	12
  1123  0015E2  6EAF               	movwf	4015,c	;volatile
  1124                           
  1125                           ;uart.c: 33: PIE1bits.RCIE = 1;
  1126  0015E4  8A9D               	bsf	3997,5,c	;volatile
  1127                           
  1128                           ;uart.c: 34: PIE1bits.TXIE = 0;
  1129  0015E6  989D               	bcf	3997,4,c	;volatile
  1130                           
  1131                           ;uart.c: 35: TXSTAbits.TXEN = 1;
  1132  0015E8  8AAC               	bsf	4012,5,c	;volatile
  1133                           
  1134                           ;uart.c: 36: RCSTAbits.CREN = 1;
  1135  0015EA  88AB               	bsf	4011,4,c	;volatile
  1136  0015EC  0012               	return		;funcret
  1137  0015EE                     __end_of_uartInit:
  1138                           	opt stack 0
  1139                           tblptru	equ	0xFF8
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           indf2	equ	0xFDF
  1143                           fsr2h	equ	0xFDA
  1144                           fsr2l	equ	0xFD9
  1145                           status	equ	0xFD8
  1146                           
  1147 ;; *************** function _timer3_init *****************
  1148 ;; Defined at:
  1149 ;;		line 23 in file "timer.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;		None
  1154 ;; Return value:  Size  Location     Type
  1155 ;;		None               void
  1156 ;; Registers used:
  1157 ;;		wreg, status,2
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1163 ;;      Params:         0       0       0       0       0       0       0
  1164 ;;      Locals:         0       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0
  1166 ;;      Totals:         0       0       0       0       0       0       0
  1167 ;;Total ram usage:        0 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    3
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text2
  1178  00168A                     __ptext2:
  1179                           	opt stack 0
  1180  00168A                     _timer3_init:
  1181                           	opt stack 27
  1182                           
  1183                           ;timer.c: 24: T3CON = 0b10000000;
  1184                           
  1185                           ;incstack = 0
  1186  00168A  0E80               	movlw	128
  1187  00168C  6EB1               	movwf	4017,c	;volatile
  1188  00168E  0012               	return		;funcret
  1189  001690                     __end_of_timer3_init:
  1190                           	opt stack 0
  1191                           tblptru	equ	0xFF8
  1192                           postinc0	equ	0xFEE
  1193                           wreg	equ	0xFE8
  1194                           indf2	equ	0xFDF
  1195                           fsr2h	equ	0xFDA
  1196                           fsr2l	equ	0xFD9
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _readChar *****************
  1200 ;; Defined at:
  1201 ;;		line 53 in file "uart.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      unsigned char 
  1208 ;; Registers used:
  1209 ;;		wreg, status,2
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1215 ;;      Params:         0       0       0       0       0       0       0
  1216 ;;      Locals:         0       0       0       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0       0       0
  1218 ;;      Totals:         0       0       0       0       0       0       0
  1219 ;;Total ram usage:        0 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; Hardware stack levels required when called:    3
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;;		_readStr
  1227 ;;		_readOpt
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text3
  1232  001658                     __ptext3:
  1233                           	opt stack 0
  1234  001658                     _readChar:
  1235                           	opt stack 27
  1236                           
  1237                           ;uart.c: 54: while(!en_read);
  1238                           
  1239                           ;incstack = 0
  1240  001658  D000               	goto	l3192
  1241  00165A                     l3192:
  1242  00165A  0100               	movlb	0	; () banked
  1243  00165C  51BE               	movf	_en_read& (0+255),w,b	;volatile
  1244  00165E  B4D8               	btfsc	status,2,c
  1245  001660  D7FC               	goto	l3192
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;uart.c: 55: en_read = 0;
  1249                           
  1250                           ; BSR set to: 0
  1251  001662  0E00               	movlw	0
  1252  001664  0100               	movlb	0	; () banked
  1253  001666  6FBE               	movwf	_en_read& (0+255),b	;volatile
  1254                           
  1255                           ;uart.c: 56: return data;
  1256  001668  5059               	movf	_data,w,c	;volatile
  1257  00166A  D000               	goto	l284
  1258  00166C                     l284:
  1259                           
  1260                           ; BSR set to: 0
  1261  00166C  0012               	return		;funcret
  1262  00166E                     __end_of_readChar:
  1263                           	opt stack 0
  1264                           tblptru	equ	0xFF8
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           indf2	equ	0xFDF
  1268                           fsr2h	equ	0xFDA
  1269                           fsr2l	equ	0xFD9
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function _nrfTransmit *****************
  1273 ;; Defined at:
  1274 ;;		line 101 in file "nrf24.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  data            2   20[BANK0 ] PTR unsigned char 
  1277 ;;		 -> main@packet(3), 
  1278 ;;  len             1   22[BANK0 ] unsigned char 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  i               2   27[BANK0 ] int 
  1281 ;;  tmp             1   26[BANK0 ] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;		None               void
  1284 ;; Registers used:
  1285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1291 ;;      Params:         0       3       0       0       0       0       0
  1292 ;;      Locals:         0       3       0       0       0       0       0
  1293 ;;      Temps:          0       3       0       0       0       0       0
  1294 ;;      Totals:         0       9       0       0       0       0       0
  1295 ;;Total ram usage:        9 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    8
  1298 ;; This function calls:
  1299 ;;		_nrfWrite
  1300 ;;		_writeChar
  1301 ;;		_writeVal
  1302 ;; This function is called by:
  1303 ;;		_main
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text4
  1308  000E22                     __ptext4:
  1309                           	opt stack 0
  1310  000E22                     _nrfTransmit:
  1311                           	opt stack 22
  1312                           
  1313                           ;nrf24.c: 102: nrfWrite(7,0b00011110);
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;incstack = 0
  1317  000E22  0E1E               	movlw	30
  1318  000E24  0100               	movlb	0	; () banked
  1319  000E26  6F80               	movwf	nrfWrite@data& (0+255),b
  1320  000E28  0E07               	movlw	7
  1321  000E2A  EC68  F00A         	call	_nrfWrite
  1322                           
  1323                           ;nrf24.c: 103: unsigned char tmp;
  1324                           ;nrf24.c: 104: PORTBbits.RB0 = 0;
  1325  000E2E  9081               	bcf	3969,0,c	;volatile
  1326                           
  1327                           ;nrf24.c: 105: PORTBbits.RB1 = 0;
  1328  000E30  9281               	bcf	3969,1,c	;volatile
  1329                           
  1330                           ;nrf24.c: 106: PORTBbits.RB1 = 1;
  1331  000E32  8281               	bsf	3969,1,c	;volatile
  1332                           
  1333                           ;nrf24.c: 107: SSPBUF = 0b10100000;
  1334  000E34  0EA0               	movlw	160
  1335  000E36  6EC9               	movwf	4041,c	;volatile
  1336                           
  1337                           ;nrf24.c: 108: while(!bflag);
  1338  000E38  D000               	goto	l3322
  1339  000E3A                     l3322:
  1340  000E3A  5057               	movf	_bflag,w,c	;volatile
  1341  000E3C  B4D8               	btfsc	status,2,c
  1342  000E3E  D7FD               	goto	l3322
  1343                           
  1344                           ;nrf24.c: 109: tmp = SSPBUF;
  1345  000E40  CFC9 F09A          	movff	4041,nrfTransmit@tmp	;volatile
  1346                           
  1347                           ;nrf24.c: 110: bflag = 0;
  1348  000E44  0E00               	movlw	0
  1349  000E46  6E57               	movwf	_bflag,c	;volatile
  1350                           
  1351                           ;nrf24.c: 111: for(int i=0;i<len;i++){
  1352  000E48  0E00               	movlw	0
  1353  000E4A  0100               	movlb	0	; () banked
  1354  000E4C  6F9C               	movwf	(nrfTransmit@i+1)& (0+255),b
  1355  000E4E  0E00               	movlw	0
  1356  000E50  6F9B               	movwf	nrfTransmit@i& (0+255),b
  1357  000E52  D02E               	goto	l3338
  1358  000E54                     l3326:
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;nrf24.c: 112: SSPBUF = data[i];
  1362  000E54  0100               	movlb	0	; () banked
  1363  000E56  519B               	movf	nrfTransmit@i& (0+255),w,b
  1364  000E58  0100               	movlb	0	; () banked
  1365  000E5A  2594               	addwf	nrfTransmit@data& (0+255),w,b
  1366  000E5C  6ED9               	movwf	fsr2l,c
  1367  000E5E  0100               	movlb	0	; () banked
  1368  000E60  519C               	movf	(nrfTransmit@i+1)& (0+255),w,b
  1369  000E62  0100               	movlb	0	; () banked
  1370  000E64  2195               	addwfc	(nrfTransmit@data+1)& (0+255),w,b
  1371  000E66  6EDA               	movwf	fsr2h,c
  1372  000E68  50DF               	movf	indf2,w,c
  1373  000E6A  6EC9               	movwf	4041,c	;volatile
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;nrf24.c: 113: writeVal(data[i]);writeChar('\n');
  1377  000E6C  0100               	movlb	0	; () banked
  1378  000E6E  519B               	movf	nrfTransmit@i& (0+255),w,b
  1379  000E70  0100               	movlb	0	; () banked
  1380  000E72  2594               	addwf	nrfTransmit@data& (0+255),w,b
  1381  000E74  6ED9               	movwf	fsr2l,c
  1382  000E76  0100               	movlb	0	; () banked
  1383  000E78  519C               	movf	(nrfTransmit@i+1)& (0+255),w,b
  1384  000E7A  0100               	movlb	0	; () banked
  1385  000E7C  2195               	addwfc	(nrfTransmit@data+1)& (0+255),w,b
  1386  000E7E  6EDA               	movwf	fsr2h,c
  1387  000E80  50DF               	movf	indf2,w,c
  1388  000E82  0100               	movlb	0	; () banked
  1389  000E84  6F97               	movwf	??_nrfTransmit& (0+255),b
  1390  000E86  0100               	movlb	0	; () banked
  1391  000E88  5197               	movf	??_nrfTransmit& (0+255),w,b
  1392  000E8A  6E3D               	movwf	writeVal@val,c
  1393  000E8C  6A3E               	clrf	writeVal@val+1,c
  1394  000E8E  6A3F               	clrf	writeVal@val+2,c
  1395  000E90  6A40               	clrf	writeVal@val+3,c
  1396  000E92  EC83  F00A         	call	_writeVal	;wreg free
  1397  000E96  0E0A               	movlw	10
  1398  000E98  EC37  F00B         	call	_writeChar
  1399                           
  1400                           ;nrf24.c: 114: while(!bflag);
  1401  000E9C  D000               	goto	l3332
  1402  000E9E                     l3332:
  1403  000E9E  5057               	movf	_bflag,w,c	;volatile
  1404  000EA0  B4D8               	btfsc	status,2,c
  1405  000EA2  D7FD               	goto	l3332
  1406                           
  1407                           ;nrf24.c: 115: bflag = 0;
  1408  000EA4  0E00               	movlw	0
  1409  000EA6  6E57               	movwf	_bflag,c	;volatile
  1410  000EA8  0100               	movlb	0	; () banked
  1411  000EAA  4B9B               	infsnz	nrfTransmit@i& (0+255),f,b
  1412  000EAC  2B9C               	incf	(nrfTransmit@i+1)& (0+255),f,b
  1413  000EAE  D000               	goto	l3338
  1414  000EB0                     l3338:
  1415                           
  1416                           ; BSR set to: 0
  1417  000EB0  0100               	movlb	0	; () banked
  1418  000EB2  5196               	movf	nrfTransmit@len& (0+255),w,b
  1419  000EB4  0100               	movlb	0	; () banked
  1420  000EB6  6F97               	movwf	??_nrfTransmit& (0+255),b
  1421  000EB8  6B98               	clrf	(??_nrfTransmit+1)& (0+255),b
  1422  000EBA  0100               	movlb	0	; () banked
  1423  000EBC  5197               	movf	??_nrfTransmit& (0+255),w,b
  1424  000EBE  0100               	movlb	0	; () banked
  1425  000EC0  5D9B               	subwf	nrfTransmit@i& (0+255),w,b
  1426  000EC2  0100               	movlb	0	; () banked
  1427  000EC4  519C               	movf	(nrfTransmit@i+1)& (0+255),w,b
  1428  000EC6  0A80               	xorlw	128
  1429  000EC8  0100               	movlb	0	; () banked
  1430  000ECA  6F99               	movwf	(??_nrfTransmit+2)& (0+255),b
  1431  000ECC  0100               	movlb	0	; () banked
  1432  000ECE  5198               	movf	(??_nrfTransmit+1)& (0+255),w,b
  1433  000ED0  0A80               	xorlw	128
  1434  000ED2  0100               	movlb	0	; () banked
  1435  000ED4  5999               	subwfb	(??_nrfTransmit+2)& (0+255),w,b
  1436  000ED6  A0D8               	btfss	status,0,c
  1437  000ED8  D7BD               	goto	l3326
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;nrf24.c: 116: }
  1441                           ;nrf24.c: 117: PORTBbits.RB0 = 1;
  1442  000EDA  8081               	bsf	3969,0,c	;volatile
  1443                           
  1444                           ; BSR set to: 0
  1445  000EDC  0012               	return		;funcret
  1446  000EDE                     __end_of_nrfTransmit:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           indf2	equ	0xFDF
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8
  1455                           
  1456 ;; *************** function _nrfShowSettings *****************
  1457 ;; Defined at:
  1458 ;;		line 173 in file "nrf24.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  k               1   23[BANK0 ] unsigned char 
  1463 ;;  i               2   24[BANK0 ] int 
  1464 ;;  val             2   21[BANK0 ] PTR unsigned char 
  1465 ;;		 -> nrfReadADDR@val(5), nrfRead@val(2), 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;		None               void
  1468 ;; Registers used:
  1469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1475 ;;      Params:         0       0       0       0       0       0       0
  1476 ;;      Locals:         0       5       0       0       0       0       0
  1477 ;;      Temps:          0       1       0       0       0       0       0
  1478 ;;      Totals:         0       6       0       0       0       0       0
  1479 ;;Total ram usage:        6 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    8
  1482 ;; This function calls:
  1483 ;;		_nrfRead
  1484 ;;		_nrfReadADDR
  1485 ;;		_writeChar
  1486 ;;		_writeVal
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text5
  1493  000852                     __ptext5:
  1494                           	opt stack 0
  1495  000852                     _nrfShowSettings:
  1496                           	opt stack 22
  1497                           
  1498                           ;nrf24.c: 174: unsigned char *val;
  1499                           ;nrf24.c: 175: for(int i =0;i<18;i++){
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;incstack = 0
  1503  000852  0E00               	movlw	0
  1504  000854  0100               	movlb	0	; () banked
  1505  000856  6F99               	movwf	(nrfShowSettings@i+1)& (0+255),b
  1506  000858  0E00               	movlw	0
  1507  00085A  6F98               	movwf	nrfShowSettings@i& (0+255),b
  1508                           
  1509                           ; BSR set to: 0
  1510  00085C  0100               	movlb	0	; () banked
  1511  00085E  BF99               	btfsc	(nrfShowSettings@i+1)& (0+255),7,b
  1512  000860  D00A               	goto	l3270
  1513  000862  0100               	movlb	0	; () banked
  1514  000864  5199               	movf	(nrfShowSettings@i+1)& (0+255),w,b
  1515  000866  E106               	bnz	u2700
  1516  000868  0E12               	movlw	18
  1517  00086A  0100               	movlb	0	; () banked
  1518  00086C  5D98               	subwf	nrfShowSettings@i& (0+255),w,b
  1519  00086E  B0D8               	btfsc	status,0,c
  1520  000870  D08C               	goto	l391
  1521  000872  D001               	goto	l3270
  1522  000874                     u2700:
  1523                           
  1524                           ; BSR set to: 0
  1525  000874  D08A               	goto	l391
  1526  000876                     l3270:
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;nrf24.c: 176: if((i == 0x0A)||(i==0x0B)||(i==0x10)){
  1530  000876  0E0A               	movlw	10
  1531  000878  0100               	movlb	0	; () banked
  1532  00087A  1998               	xorwf	nrfShowSettings@i& (0+255),w,b
  1533  00087C  0100               	movlb	0	; () banked
  1534  00087E  1199               	iorwf	(nrfShowSettings@i+1)& (0+255),w,b
  1535  000880  B4D8               	btfsc	status,2,c
  1536  000882  D00E               	goto	l3276
  1537                           
  1538                           ; BSR set to: 0
  1539  000884  0E0B               	movlw	11
  1540  000886  0100               	movlb	0	; () banked
  1541  000888  1998               	xorwf	nrfShowSettings@i& (0+255),w,b
  1542  00088A  0100               	movlb	0	; () banked
  1543  00088C  1199               	iorwf	(nrfShowSettings@i+1)& (0+255),w,b
  1544  00088E  B4D8               	btfsc	status,2,c
  1545  000890  D007               	goto	l3276
  1546                           
  1547                           ; BSR set to: 0
  1548  000892  0E10               	movlw	16
  1549  000894  0100               	movlb	0	; () banked
  1550  000896  1998               	xorwf	nrfShowSettings@i& (0+255),w,b
  1551  000898  0100               	movlb	0	; () banked
  1552  00089A  1199               	iorwf	(nrfShowSettings@i+1)& (0+255),w,b
  1553  00089C  A4D8               	btfss	status,2,c
  1554  00089E  D03E               	goto	l3298
  1555  0008A0                     l3276:
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;nrf24.c: 177: val = nrfReadADDR(i);
  1559  0008A0  0100               	movlb	0	; () banked
  1560  0008A2  5198               	movf	nrfShowSettings@i& (0+255),w,b
  1561  0008A4  ECDB  F009         	call	_nrfReadADDR
  1562  0008A8  C080  F095         	movff	?_nrfReadADDR,nrfShowSettings@val
  1563  0008AC  C081  F096         	movff	?_nrfReadADDR+1,nrfShowSettings@val+1
  1564                           
  1565                           ;nrf24.c: 178: writeVal(i);writeChar(':');
  1566  0008B0  C098  F03D         	movff	nrfShowSettings@i,writeVal@val
  1567  0008B4  C099  F03E         	movff	nrfShowSettings@i+1,writeVal@val+1
  1568  0008B8  0E00               	movlw	0
  1569  0008BA  BE3E               	btfsc	writeVal@val+1,7,c
  1570  0008BC  0EFF               	movlw	-1
  1571  0008BE  6E3F               	movwf	writeVal@val+2,c
  1572  0008C0  6E40               	movwf	writeVal@val+3,c
  1573  0008C2  EC83  F00A         	call	_writeVal	;wreg free
  1574  0008C6  0E3A               	movlw	58
  1575  0008C8  EC37  F00B         	call	_writeChar
  1576                           
  1577                           ;nrf24.c: 179: for(char k=1;k<6;k++){
  1578  0008CC  0E01               	movlw	1
  1579  0008CE  0100               	movlb	0	; () banked
  1580  0008D0  6F97               	movwf	nrfShowSettings@k& (0+255),b
  1581  0008D2                     l3284:
  1582                           
  1583                           ; BSR set to: 0
  1584  0008D2  0E05               	movlw	5
  1585  0008D4  0100               	movlb	0	; () banked
  1586  0008D6  6597               	cpfsgt	nrfShowSettings@k& (0+255),b
  1587  0008D8  D001               	goto	l3288
  1588                           
  1589                           ; BSR set to: 0
  1590  0008DA  D01C               	goto	l3296
  1591  0008DC                     l3288:
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;nrf24.c: 180: writeVal(val[k]);writeChar(' ');
  1595  0008DC  0100               	movlb	0	; () banked
  1596  0008DE  5197               	movf	nrfShowSettings@k& (0+255),w,b
  1597  0008E0  0D01               	mullw	1
  1598  0008E2  50F3               	movf	prodl,w,c
  1599  0008E4  0100               	movlb	0	; () banked
  1600  0008E6  2595               	addwf	nrfShowSettings@val& (0+255),w,b
  1601  0008E8  6ED9               	movwf	fsr2l,c
  1602  0008EA  50F4               	movf	prodh,w,c
  1603  0008EC  0100               	movlb	0	; () banked
  1604  0008EE  2196               	addwfc	(nrfShowSettings@val+1)& (0+255),w,b
  1605  0008F0  6EDA               	movwf	fsr2h,c
  1606  0008F2  50DF               	movf	indf2,w,c
  1607  0008F4  0100               	movlb	0	; () banked
  1608  0008F6  6F94               	movwf	??_nrfShowSettings& (0+255),b
  1609  0008F8  0100               	movlb	0	; () banked
  1610  0008FA  5194               	movf	??_nrfShowSettings& (0+255),w,b
  1611  0008FC  6E3D               	movwf	writeVal@val,c
  1612  0008FE  6A3E               	clrf	writeVal@val+1,c
  1613  000900  6A3F               	clrf	writeVal@val+2,c
  1614  000902  6A40               	clrf	writeVal@val+3,c
  1615  000904  EC83  F00A         	call	_writeVal	;wreg free
  1616  000908  0E20               	movlw	32
  1617  00090A  EC37  F00B         	call	_writeChar
  1618  00090E  0100               	movlb	0	; () banked
  1619  000910  2B97               	incf	nrfShowSettings@k& (0+255),f,b
  1620  000912  D7DF               	goto	l3284
  1621  000914                     l3296:
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;nrf24.c: 181: }
  1625                           ;nrf24.c: 182: writeChar('\n');
  1626  000914  0E0A               	movlw	10
  1627  000916  EC37  F00B         	call	_writeChar
  1628                           
  1629                           ;nrf24.c: 183: }
  1630  00091A  D02C               	goto	l3308
  1631  00091C                     l3298:
  1632                           
  1633                           ;nrf24.c: 184: else{
  1634                           ;nrf24.c: 185: val = nrfRead(i);
  1635  00091C  0100               	movlb	0	; () banked
  1636  00091E  5198               	movf	nrfShowSettings@i& (0+255),w,b
  1637  000920  EC0F  F00A         	call	_nrfRead
  1638  000924  C080  F095         	movff	?_nrfRead,nrfShowSettings@val
  1639  000928  C081  F096         	movff	?_nrfRead+1,nrfShowSettings@val+1
  1640                           
  1641                           ;nrf24.c: 186: writeVal(i);writeChar(':');writeVal(val[1]);
  1642  00092C  C098  F03D         	movff	nrfShowSettings@i,writeVal@val
  1643  000930  C099  F03E         	movff	nrfShowSettings@i+1,writeVal@val+1
  1644  000934  0E00               	movlw	0
  1645  000936  BE3E               	btfsc	writeVal@val+1,7,c
  1646  000938  0EFF               	movlw	-1
  1647  00093A  6E3F               	movwf	writeVal@val+2,c
  1648  00093C  6E40               	movwf	writeVal@val+3,c
  1649  00093E  EC83  F00A         	call	_writeVal	;wreg free
  1650  000942  0E3A               	movlw	58
  1651  000944  EC37  F00B         	call	_writeChar
  1652  000948  0100               	movlb	0	; () banked
  1653  00094A  EE20 F001          	lfsr	2,1
  1654  00094E  5195               	movf	nrfShowSettings@val& (0+255),w,b
  1655  000950  26D9               	addwf	fsr2l,f,c
  1656  000952  5196               	movf	(nrfShowSettings@val+1)& (0+255),w,b
  1657  000954  22DA               	addwfc	fsr2h,f,c
  1658  000956  50DF               	movf	indf2,w,c
  1659  000958  0100               	movlb	0	; () banked
  1660  00095A  6F94               	movwf	??_nrfShowSettings& (0+255),b
  1661  00095C  0100               	movlb	0	; () banked
  1662  00095E  5194               	movf	??_nrfShowSettings& (0+255),w,b
  1663  000960  6E3D               	movwf	writeVal@val,c
  1664  000962  6A3E               	clrf	writeVal@val+1,c
  1665  000964  6A3F               	clrf	writeVal@val+2,c
  1666  000966  6A40               	clrf	writeVal@val+3,c
  1667  000968  EC83  F00A         	call	_writeVal	;wreg free
  1668                           
  1669                           ;nrf24.c: 187: writeChar('\n');
  1670  00096C  0E0A               	movlw	10
  1671  00096E  EC37  F00B         	call	_writeChar
  1672  000972  D000               	goto	l3308
  1673  000974                     l3308:
  1674  000974  0100               	movlb	0	; () banked
  1675  000976  4B98               	infsnz	nrfShowSettings@i& (0+255),f,b
  1676  000978  2B99               	incf	(nrfShowSettings@i+1)& (0+255),f,b
  1677                           
  1678                           ; BSR set to: 0
  1679  00097A  0100               	movlb	0	; () banked
  1680  00097C  BF99               	btfsc	(nrfShowSettings@i+1)& (0+255),7,b
  1681  00097E  D77B               	goto	l3270
  1682  000980  0100               	movlb	0	; () banked
  1683  000982  5199               	movf	(nrfShowSettings@i+1)& (0+255),w,b
  1684  000984  E102               	bnz	l391
  1685  000986  D770               	goto	L1
  1686  000988  D000               	goto	l391
  1687  00098A                     l391:
  1688                           
  1689                           ; BSR set to: 0
  1690  00098A  0012               	return		;funcret
  1691  00098C                     __end_of_nrfShowSettings:
  1692                           	opt stack 0
  1693                           tblptru	equ	0xFF8
  1694                           prodh	equ	0xFF4
  1695                           prodl	equ	0xFF3
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           indf2	equ	0xFDF
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _nrfReadADDR *****************
  1704 ;; Defined at:
  1705 ;;		line 192 in file "nrf24.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  reg             1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  reg             1    7[BANK0 ] unsigned char 
  1710 ;;  i               1    8[BANK0 ] unsigned char 
  1711 ;;  val             5    2[BANK0 ] unsigned char [5]
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  2    0[BANK0 ] PTR unsigned char 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1721 ;;      Params:         0       2       0       0       0       0       0
  1722 ;;      Locals:         0       7       0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0
  1724 ;;      Totals:         0       9       0       0       0       0       0
  1725 ;;Total ram usage:        9 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    7
  1728 ;; This function calls:
  1729 ;;		_delay
  1730 ;;		_spiInit
  1731 ;; This function is called by:
  1732 ;;		_nrfShowSettings
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text6
  1737  0013B6                     __ptext6:
  1738                           	opt stack 0
  1739  0013B6                     _nrfReadADDR:
  1740                           	opt stack 22
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;incstack = 0
  1744                           ;nrfReadADDR@reg stored from wreg
  1745  0013B6  0100               	movlb	0	; () banked
  1746  0013B8  6F87               	movwf	nrfReadADDR@reg& (0+255),b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;nrf24.c: 193: unsigned char val[5];
  1750                           ;nrf24.c: 195: spiInit();
  1751  0013BA  ECB1  F00A         	call	_spiInit	;wreg free
  1752                           
  1753                           ;nrf24.c: 196: PORTBbits.RB0 = 0;
  1754  0013BE  9081               	bcf	3969,0,c	;volatile
  1755                           
  1756                           ;nrf24.c: 197: for(char i=0;i<6;i++){
  1757  0013C0  0E00               	movlw	0
  1758  0013C2  0100               	movlb	0	; () banked
  1759  0013C4  6F88               	movwf	nrfReadADDR@i& (0+255),b
  1760  0013C6  D01E               	goto	l3102
  1761                           
  1762                           ; BSR set to: 0
  1763                           
  1764                           ; BSR set to: 0
  1765  0013C8  D021               	goto	l395
  1766  0013CA                     l394:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;nrf24.c: 198: SSPBUF = reg;
  1770  0013CA  C087  FFC9         	movff	nrfReadADDR@reg,4041	;volatile
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;nrf24.c: 199: delay(0.0001);
  1774  0013CE  0EB7               	movlw	183
  1775  0013D0  6E46               	movwf	delay@sec,c
  1776  0013D2  0ED1               	movlw	209
  1777  0013D4  6E47               	movwf	delay@sec+1,c
  1778  0013D6  0E38               	movlw	56
  1779  0013D8  6E48               	movwf	delay@sec+2,c
  1780  0013DA  EC05  F008         	call	_delay	;wreg free
  1781                           
  1782                           ;nrf24.c: 200: while(!bflag);
  1783  0013DE  D000               	goto	l3094
  1784  0013E0                     l3094:
  1785  0013E0  5057               	movf	_bflag,w,c	;volatile
  1786  0013E2  B4D8               	btfsc	status,2,c
  1787  0013E4  D7FD               	goto	l3094
  1788                           
  1789                           ;nrf24.c: 201: bflag = 0;
  1790  0013E6  0E00               	movlw	0
  1791  0013E8  6E57               	movwf	_bflag,c	;volatile
  1792                           
  1793                           ;nrf24.c: 202: val[i] = SSPBUF;
  1794  0013EA  0100               	movlb	0	; () banked
  1795  0013EC  5188               	movf	nrfReadADDR@i& (0+255),w,b
  1796  0013EE  0D01               	mullw	1
  1797  0013F0  0E82               	movlw	low nrfReadADDR@val
  1798  0013F2  24F3               	addwf	prodl,w,c
  1799  0013F4  6ED9               	movwf	fsr2l,c
  1800  0013F6  0E00               	movlw	high nrfReadADDR@val
  1801  0013F8  20F4               	addwfc	prodh,w,c
  1802  0013FA  6EDA               	movwf	fsr2h,c
  1803  0013FC  CFC9 FFDF          	movff	4041,indf2	;volatile
  1804                           
  1805                           ; BSR set to: 0
  1806  001400  0100               	movlb	0	; () banked
  1807  001402  2B88               	incf	nrfReadADDR@i& (0+255),f,b
  1808  001404                     l3102:
  1809                           
  1810                           ; BSR set to: 0
  1811  001404  0E05               	movlw	5
  1812  001406  0100               	movlb	0	; () banked
  1813  001408  6588               	cpfsgt	nrfReadADDR@i& (0+255),b
  1814  00140A  D7DF               	goto	l394
  1815  00140C                     l395:
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;nrf24.c: 203: }
  1819                           ;nrf24.c: 204: PORTBbits.RB0 = 1;
  1820  00140C  8081               	bsf	3969,0,c	;volatile
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;nrf24.c: 205: return val;
  1824  00140E  0E82               	movlw	low nrfReadADDR@val
  1825  001410  0100               	movlb	0	; () banked
  1826  001412  6F80               	movwf	?_nrfReadADDR& (0+255),b
  1827  001414  0E00               	movlw	high nrfReadADDR@val
  1828  001416  0100               	movlb	0	; () banked
  1829  001418  6F81               	movwf	(?_nrfReadADDR+1)& (0+255),b
  1830  00141A  D000               	goto	l399
  1831  00141C                     l399:
  1832                           
  1833                           ; BSR set to: 0
  1834  00141C  0012               	return		;funcret
  1835  00141E                     __end_of_nrfReadADDR:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           prodh	equ	0xFF4
  1839                           prodl	equ	0xFF3
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           indf2	equ	0xFDF
  1843                           fsr2h	equ	0xFDA
  1844                           fsr2l	equ	0xFD9
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _nrfReceiveMode *****************
  1848 ;; Defined at:
  1849 ;;		line 145 in file "nrf24.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;		None
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  i               1   45[BANK0 ] unsigned char 
  1854 ;;  val            20   21[BANK0 ] unsigned char [20]
  1855 ;;  len             2   43[BANK0 ] PTR unsigned char 
  1856 ;;		 -> nrfRead@val(2), 
  1857 ;;  status          2   41[BANK0 ] PTR unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  2  170[None  ] int 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1867 ;;      Params:         0       0       0       0       0       0       0
  1868 ;;      Locals:         0      25       0       0       0       0       0
  1869 ;;      Temps:          0       1       0       0       0       0       0
  1870 ;;      Totals:         0      26       0       0       0       0       0
  1871 ;;Total ram usage:       26 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    8
  1874 ;; This function calls:
  1875 ;;		_delay
  1876 ;;		_nrfRead
  1877 ;;		_nrfWrite
  1878 ;;		_spiInit
  1879 ;;		_writeChar
  1880 ;;		_writeVal
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text7
  1887  000C74                     __ptext7:
  1888                           	opt stack 0
  1889  000C74                     _nrfReceiveMode:
  1890                           	opt stack 22
  1891                           
  1892                           ;nrf24.c: 146: spiInit();
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;incstack = 0
  1896  000C74  ECB1  F00A         	call	_spiInit	;wreg free
  1897                           
  1898                           ;nrf24.c: 147: unsigned char* status,val[20],*len=nrfRead(0x11);
  1899  000C78  0E11               	movlw	17
  1900  000C7A  EC0F  F00A         	call	_nrfRead
  1901  000C7E  C080  F0AB         	movff	?_nrfRead,nrfReceiveMode@len
  1902  000C82  C081  F0AC         	movff	?_nrfRead+1,nrfReceiveMode@len+1
  1903                           
  1904                           ;nrf24.c: 149: nrfWrite(0,0b00111011);
  1905  000C86  0E3B               	movlw	59
  1906  000C88  0100               	movlb	0	; () banked
  1907  000C8A  6F80               	movwf	nrfWrite@data& (0+255),b
  1908  000C8C  0E00               	movlw	0
  1909  000C8E  EC68  F00A         	call	_nrfWrite
  1910                           
  1911                           ;nrf24.c: 150: while(!IRQ);
  1912  000C92  D000               	goto	l3232
  1913  000C94                     l3232:
  1914  000C94  0100               	movlb	0	; () banked
  1915  000C96  51BD               	movf	_IRQ& (0+255),w,b	;volatile
  1916  000C98  B4D8               	btfsc	status,2,c
  1917  000C9A  D7FC               	goto	l3232
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;nrf24.c: 151: IRQ = 0;
  1921                           
  1922                           ; BSR set to: 0
  1923  000C9C  0E00               	movlw	0
  1924  000C9E  0100               	movlb	0	; () banked
  1925  000CA0  6FBD               	movwf	_IRQ& (0+255),b	;volatile
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;nrf24.c: 153: PORTBbits.RB0 = 0;
  1929  000CA2  9081               	bcf	3969,0,c	;volatile
  1930                           
  1931                           ;nrf24.c: 154: SSPBUF = 0b01100001;
  1932  000CA4  0E61               	movlw	97
  1933  000CA6  6EC9               	movwf	4041,c	;volatile
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;nrf24.c: 155: delay(0.0001);
  1937  000CA8  0EB7               	movlw	183
  1938  000CAA  6E46               	movwf	delay@sec,c
  1939  000CAC  0ED1               	movlw	209
  1940  000CAE  6E47               	movwf	delay@sec+1,c
  1941  000CB0  0E38               	movlw	56
  1942  000CB2  6E48               	movwf	delay@sec+2,c
  1943  000CB4  EC05  F008         	call	_delay	;wreg free
  1944                           
  1945                           ;nrf24.c: 156: while(!bflag);
  1946  000CB8  D000               	goto	l3240
  1947  000CBA                     l3240:
  1948  000CBA  5057               	movf	_bflag,w,c	;volatile
  1949  000CBC  B4D8               	btfsc	status,2,c
  1950  000CBE  D7FD               	goto	l3240
  1951                           
  1952                           ;nrf24.c: 157: val[0] = status;
  1953  000CC0  C0A9  F095         	movff	nrfReceiveMode@status,nrfReceiveMode@val
  1954                           
  1955                           ;nrf24.c: 158: bflag = 0;
  1956  000CC4  0E00               	movlw	0
  1957  000CC6  6E57               	movwf	_bflag,c	;volatile
  1958                           
  1959                           ;nrf24.c: 160: for(char i=0;i<len[1];i++){
  1960  000CC8  0E00               	movlw	0
  1961  000CCA  0100               	movlb	0	; () banked
  1962  000CCC  6FAD               	movwf	nrfReceiveMode@i& (0+255),b
  1963  000CCE  D035               	goto	l3260
  1964  000CD0                     l3244:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;nrf24.c: 161: SSPBUF = 0b01100001;
  1968  000CD0  0E61               	movlw	97
  1969  000CD2  6EC9               	movwf	4041,c	;volatile
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;nrf24.c: 162: delay(0.0001);
  1973  000CD4  0EB7               	movlw	183
  1974  000CD6  6E46               	movwf	delay@sec,c
  1975  000CD8  0ED1               	movlw	209
  1976  000CDA  6E47               	movwf	delay@sec+1,c
  1977  000CDC  0E38               	movlw	56
  1978  000CDE  6E48               	movwf	delay@sec+2,c
  1979  000CE0  EC05  F008         	call	_delay	;wreg free
  1980                           
  1981                           ;nrf24.c: 163: while(!bflag);
  1982  000CE4  D000               	goto	l3248
  1983  000CE6                     l3248:
  1984  000CE6  5057               	movf	_bflag,w,c	;volatile
  1985  000CE8  B4D8               	btfsc	status,2,c
  1986  000CEA  D7FD               	goto	l3248
  1987                           
  1988                           ;nrf24.c: 164: val[i] = SSPBUF;
  1989  000CEC  0100               	movlb	0	; () banked
  1990  000CEE  51AD               	movf	nrfReceiveMode@i& (0+255),w,b
  1991  000CF0  0D01               	mullw	1
  1992  000CF2  0E95               	movlw	low nrfReceiveMode@val
  1993  000CF4  24F3               	addwf	prodl,w,c
  1994  000CF6  6ED9               	movwf	fsr2l,c
  1995  000CF8  0E00               	movlw	high nrfReceiveMode@val
  1996  000CFA  20F4               	addwfc	prodh,w,c
  1997  000CFC  6EDA               	movwf	fsr2h,c
  1998  000CFE  CFC9 FFDF          	movff	4041,indf2	;volatile
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;nrf24.c: 165: writeVal(val[i]);writeChar('\n');
  2002  000D02  0100               	movlb	0	; () banked
  2003  000D04  51AD               	movf	nrfReceiveMode@i& (0+255),w,b
  2004  000D06  0D01               	mullw	1
  2005  000D08  0E95               	movlw	low nrfReceiveMode@val
  2006  000D0A  24F3               	addwf	prodl,w,c
  2007  000D0C  6ED9               	movwf	fsr2l,c
  2008  000D0E  0E00               	movlw	high nrfReceiveMode@val
  2009  000D10  20F4               	addwfc	prodh,w,c
  2010  000D12  6EDA               	movwf	fsr2h,c
  2011  000D14  50DF               	movf	indf2,w,c
  2012  000D16  0100               	movlb	0	; () banked
  2013  000D18  6F94               	movwf	??_nrfReceiveMode& (0+255),b
  2014  000D1A  0100               	movlb	0	; () banked
  2015  000D1C  5194               	movf	??_nrfReceiveMode& (0+255),w,b
  2016  000D1E  6E3D               	movwf	writeVal@val,c
  2017  000D20  6A3E               	clrf	writeVal@val+1,c
  2018  000D22  6A3F               	clrf	writeVal@val+2,c
  2019  000D24  6A40               	clrf	writeVal@val+3,c
  2020  000D26  EC83  F00A         	call	_writeVal	;wreg free
  2021  000D2A  0E0A               	movlw	10
  2022  000D2C  EC37  F00B         	call	_writeChar
  2023                           
  2024                           ;nrf24.c: 166: bflag = 0;
  2025  000D30  0E00               	movlw	0
  2026  000D32  6E57               	movwf	_bflag,c	;volatile
  2027  000D34  0100               	movlb	0	; () banked
  2028  000D36  2BAD               	incf	nrfReceiveMode@i& (0+255),f,b
  2029  000D38  D000               	goto	l3260
  2030  000D3A                     l3260:
  2031                           
  2032                           ; BSR set to: 0
  2033  000D3A  0100               	movlb	0	; () banked
  2034  000D3C  EE20 F001          	lfsr	2,1
  2035  000D40  51AB               	movf	nrfReceiveMode@len& (0+255),w,b
  2036  000D42  26D9               	addwf	fsr2l,f,c
  2037  000D44  51AC               	movf	(nrfReceiveMode@len+1)& (0+255),w,b
  2038  000D46  22DA               	addwfc	fsr2h,f,c
  2039  000D48  50DE               	movf	postinc2,w,c
  2040  000D4A  0100               	movlb	0	; () banked
  2041  000D4C  5DAD               	subwf	nrfReceiveMode@i& (0+255),w,b
  2042  000D4E  A0D8               	btfss	status,0,c
  2043  000D50  D7BF               	goto	l3244
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;nrf24.c: 167: }
  2047                           ;nrf24.c: 168: PORTBbits.RB0 = 1;
  2048  000D52  8081               	bsf	3969,0,c	;volatile
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;nrf24.c: 169: en_read = 0;
  2052  000D54  0E00               	movlw	0
  2053  000D56  0100               	movlb	0	; () banked
  2054  000D58  6FBE               	movwf	_en_read& (0+255),b	;volatile
  2055                           
  2056                           ; BSR set to: 0
  2057  000D5A  0012               	return		;funcret
  2058  000D5C                     __end_of_nrfReceiveMode:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           prodh	equ	0xFF4
  2062                           prodl	equ	0xFF3
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _writeVal *****************
  2072 ;; Defined at:
  2073 ;;		line 72 in file "uart.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  val             4   60[COMRAM] unsigned long 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  buffer         20    0[BANK0 ] unsigned char [20]
  2078 ;; Return value:  Size  Location     Type
  2079 ;;		None               void
  2080 ;; Registers used:
  2081 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2087 ;;      Params:         4       0       0       0       0       0       0
  2088 ;;      Locals:         0      20       0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0
  2090 ;;      Totals:         4      20       0       0       0       0       0
  2091 ;;Total ram usage:       24 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    5
  2094 ;; This function calls:
  2095 ;;		_ultoa
  2096 ;;		_writeStr
  2097 ;; This function is called by:
  2098 ;;		_main
  2099 ;;		_nrfTransmit
  2100 ;;		_nrfReceiveMode
  2101 ;;		_nrfShowSettings
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text8
  2106  001506                     __ptext8:
  2107                           	opt stack 0
  2108  001506                     _writeVal:
  2109                           	opt stack 25
  2110                           
  2111                           ;uart.c: 73: char buffer[20];
  2112                           ;uart.c: 74: ultoa(buffer,val,10);
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;incstack = 0
  2116  001506  0E80               	movlw	low writeVal@buffer
  2117  001508  6E30               	movwf	ultoa@buf,c
  2118  00150A  0E00               	movlw	high writeVal@buffer
  2119  00150C  6E31               	movwf	ultoa@buf+1,c
  2120  00150E  C03D  F032         	movff	writeVal@val,ultoa@val
  2121  001512  C03E  F033         	movff	writeVal@val+1,ultoa@val+1
  2122  001516  C03F  F034         	movff	writeVal@val+2,ultoa@val+2
  2123  00151A  C040  F035         	movff	writeVal@val+3,ultoa@val+3
  2124  00151E  0E00               	movlw	0
  2125  001520  6E37               	movwf	ultoa@base+1,c
  2126  001522  0E0A               	movlw	10
  2127  001524  6E36               	movwf	ultoa@base,c
  2128  001526  ECC6  F004         	call	_ultoa	;wreg free
  2129                           
  2130                           ;uart.c: 75: writeStr(buffer);
  2131  00152A  0E80               	movlw	low writeVal@buffer
  2132  00152C  6E24               	movwf	writeStr@str,c
  2133  00152E  0E00               	movlw	high writeVal@buffer
  2134  001530  6E25               	movwf	writeStr@str+1,c
  2135  001532  EC64  F009         	call	_writeStr	;wreg free
  2136  001536  0012               	return		;funcret
  2137  001538                     __end_of_writeVal:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           indf2	equ	0xFDF
  2145                           postinc2	equ	0xFDE
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _writeStr *****************
  2151 ;; Defined at:
  2152 ;;		line 47 in file "uart.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  str             2   35[COMRAM] PTR unsigned char 
  2155 ;;		 -> writeVal@buffer(20), STR_2(5), STR_1(5), 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  i               1   39[COMRAM] unsigned char 
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2167 ;;      Params:         2       0       0       0       0       0       0
  2168 ;;      Locals:         1       0       0       0       0       0       0
  2169 ;;      Temps:          2       0       0       0       0       0       0
  2170 ;;      Totals:         5       0       0       0       0       0       0
  2171 ;;Total ram usage:        5 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    4
  2174 ;; This function calls:
  2175 ;;		_writeChar
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;;		_writeVal
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text9
  2183  0012C8                     __ptext9:
  2184                           	opt stack 0
  2185  0012C8                     _writeStr:
  2186                           	opt stack 25
  2187                           
  2188                           ;uart.c: 48: for(char i = 0;str[i]!='\0';i++){
  2189                           
  2190                           ;incstack = 0
  2191  0012C8  0E00               	movlw	0
  2192  0012CA  6E28               	movwf	writeStr@i,c
  2193  0012CC  D01E               	goto	l2960
  2194  0012CE                     l2956:
  2195                           
  2196                           ;uart.c: 49: writeChar(str[i]);
  2197  0012CE  5028               	movf	writeStr@i,w,c
  2198  0012D0  0D01               	mullw	1
  2199  0012D2  C024  F026         	movff	writeStr@str,??_writeStr
  2200  0012D6  C025  F027         	movff	writeStr@str+1,??_writeStr+1
  2201  0012DA  50F3               	movf	prodl,w,c
  2202  0012DC  2626               	addwf	??_writeStr,f,c
  2203  0012DE  50F4               	movf	prodh,w,c
  2204  0012E0  2227               	addwfc	??_writeStr+1,f,c
  2205  0012E2  C026  FFF6         	movff	??_writeStr,tblptrl
  2206  0012E6  C027  FFF7         	movff	??_writeStr+1,tblptrh
  2207  0012EA  6AF8               	clrf	tblptru,c
  2208  0012EC  0E05               	movlw	(high __ramtop+-1)
  2209  0012EE  64F7               	cpfsgt	tblptrh,c
  2210  0012F0  D003               	bra	u2397
  2211  0012F2  0008               	tblrd		*
  2212  0012F4  50F5               	movf	tablat,w,c
  2213  0012F6  D005               	bra	u2390
  2214  0012F8                     u2397:
  2215  0012F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  2216  0012FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  2217  001300  50E7               	movf	indf1,w,c
  2218  001302                     u2390:
  2219  001302  EC37  F00B         	call	_writeChar
  2220  001306  2A28               	incf	writeStr@i,f,c
  2221  001308  D000               	goto	l2960
  2222  00130A                     l2960:
  2223  00130A  5028               	movf	writeStr@i,w,c
  2224  00130C  0D01               	mullw	1
  2225  00130E  C024  F026         	movff	writeStr@str,??_writeStr
  2226  001312  C025  F027         	movff	writeStr@str+1,??_writeStr+1
  2227  001316  50F3               	movf	prodl,w,c
  2228  001318  2626               	addwf	??_writeStr,f,c
  2229  00131A  50F4               	movf	prodh,w,c
  2230  00131C  2227               	addwfc	??_writeStr+1,f,c
  2231  00131E  C026  FFF6         	movff	??_writeStr,tblptrl
  2232  001322  C027  FFF7         	movff	??_writeStr+1,tblptrh
  2233  001326  6AF8               	clrf	tblptru,c
  2234  001328  0E05               	movlw	(high __ramtop+-1)
  2235  00132A  64F7               	cpfsgt	tblptrh,c
  2236  00132C  D003               	bra	u2407
  2237  00132E  0008               	tblrd		*
  2238  001330  50F5               	movf	tablat,w,c
  2239  001332  D005               	bra	u2400
  2240  001334                     u2407:
  2241  001334  CFF6 FFE1          	movff	tblptrl,fsr1l
  2242  001338  CFF7 FFE2          	movff	tblptrh,fsr1h
  2243  00133C  50E7               	movf	indf1,w,c
  2244  00133E                     u2400:
  2245  00133E  0900               	iorlw	0
  2246  001340  A4D8               	btfss	status,2,c
  2247  001342  D7C5               	goto	l2956
  2248  001344  0012               	return		;funcret
  2249  001346                     __end_of_writeStr:
  2250                           	opt stack 0
  2251                           tblptru	equ	0xFF8
  2252                           tblptrh	equ	0xFF7
  2253                           tblptrl	equ	0xFF6
  2254                           tablat	equ	0xFF5
  2255                           prodh	equ	0xFF4
  2256                           prodl	equ	0xFF3
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           indf1	equ	0xFE7
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           indf2	equ	0xFDF
  2263                           postinc2	equ	0xFDE
  2264                           fsr2h	equ	0xFDA
  2265                           fsr2l	equ	0xFD9
  2266                           status	equ	0xFD8
  2267                           
  2268 ;; *************** function _writeChar *****************
  2269 ;; Defined at:
  2270 ;;		line 41 in file "uart.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  c               1    wreg     unsigned char 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  c               1   34[COMRAM] unsigned char 
  2275 ;; Return value:  Size  Location     Type
  2276 ;;		None               void
  2277 ;; Registers used:
  2278 ;;		wreg
  2279 ;; Tracked objects:
  2280 ;;		On entry : 0/0
  2281 ;;		On exit  : 0/0
  2282 ;;		Unchanged: 0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2284 ;;      Params:         0       0       0       0       0       0       0
  2285 ;;      Locals:         1       0       0       0       0       0       0
  2286 ;;      Temps:          0       0       0       0       0       0       0
  2287 ;;      Totals:         1       0       0       0       0       0       0
  2288 ;;Total ram usage:        1 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    3
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;;		_writeStr
  2296 ;;		_nrfTransmit
  2297 ;;		_nrfReceiveMode
  2298 ;;		_nrfShowSettings
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text10
  2303  00166E                     __ptext10:
  2304                           	opt stack 0
  2305  00166E                     _writeChar:
  2306                           	opt stack 25
  2307                           
  2308                           ;incstack = 0
  2309                           ;writeChar@c stored from wreg
  2310  00166E  6E23               	movwf	writeChar@c,c
  2311                           
  2312                           ;uart.c: 42: while(!TRMT);
  2313  001670  D000               	goto	l269
  2314  001672                     l269:
  2315  001672  A2AC               	btfss	4012,1,c	;volatile
  2316  001674  D7FE               	goto	l269
  2317                           
  2318                           ;uart.c: 43: TXREG = c;
  2319  001676  C023  FFAD         	movff	writeChar@c,4013	;volatile
  2320  00167A  0012               	return		;funcret
  2321  00167C                     __end_of_writeChar:
  2322                           	opt stack 0
  2323                           tblptru	equ	0xFF8
  2324                           tblptrh	equ	0xFF7
  2325                           tblptrl	equ	0xFF6
  2326                           tablat	equ	0xFF5
  2327                           prodh	equ	0xFF4
  2328                           prodl	equ	0xFF3
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           indf1	equ	0xFE7
  2332                           fsr1h	equ	0xFE2
  2333                           fsr1l	equ	0xFE1
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340 ;; *************** function _ultoa *****************
  2341 ;; Defined at:
  2342 ;;		line 32 in file "/opt/microchip/xc8/v1.34/sources/common/ltoa.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;  buf             2   47[COMRAM] PTR unsigned char 
  2345 ;;		 -> writeVal@buffer(20), 
  2346 ;;  val             4   49[COMRAM] unsigned long 
  2347 ;;  base            2   53[COMRAM] int 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  v               4   55[COMRAM] unsigned long 
  2350 ;;  c               1   59[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  2   47[COMRAM] PTR unsigned char 
  2353 ;; Registers used:
  2354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2360 ;;      Params:         8       0       0       0       0       0       0
  2361 ;;      Locals:         5       0       0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0
  2363 ;;      Totals:        13       0       0       0       0       0       0
  2364 ;;Total ram usage:       13 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    4
  2367 ;; This function calls:
  2368 ;;		___lldiv
  2369 ;;		___llmod
  2370 ;; This function is called by:
  2371 ;;		_writeVal
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text11
  2376  00098C                     __ptext11:
  2377                           	opt stack 0
  2378  00098C                     _ultoa:
  2379                           	opt stack 25
  2380                           
  2381                           ;incstack = 0
  2382  00098C  C032  F038         	movff	ultoa@val,ultoa@v
  2383  000990  C033  F039         	movff	ultoa@val+1,ultoa@v+1
  2384  000994  C034  F03A         	movff	ultoa@val+2,ultoa@v+2
  2385  000998  C035  F03B         	movff	ultoa@val+3,ultoa@v+3
  2386  00099C  D000               	goto	l2964
  2387  00099E                     l2964:
  2388  00099E  C038  F023         	movff	ultoa@v,___lldiv@dividend
  2389  0009A2  C039  F024         	movff	ultoa@v+1,___lldiv@dividend+1
  2390  0009A6  C03A  F025         	movff	ultoa@v+2,___lldiv@dividend+2
  2391  0009AA  C03B  F026         	movff	ultoa@v+3,___lldiv@dividend+3
  2392  0009AE  C036  F027         	movff	ultoa@base,___lldiv@divisor
  2393  0009B2  C037  F028         	movff	ultoa@base+1,___lldiv@divisor+1
  2394  0009B6  0E00               	movlw	0
  2395  0009B8  BE28               	btfsc	___lldiv@divisor+1,7,c
  2396  0009BA  0EFF               	movlw	-1
  2397  0009BC  6E29               	movwf	___lldiv@divisor+2,c
  2398  0009BE  6E2A               	movwf	___lldiv@divisor+3,c
  2399  0009C0  EC99  F008         	call	___lldiv	;wreg free
  2400  0009C4  C023  F038         	movff	?___lldiv,ultoa@v
  2401  0009C8  C024  F039         	movff	?___lldiv+1,ultoa@v+1
  2402  0009CC  C025  F03A         	movff	?___lldiv+2,ultoa@v+2
  2403  0009D0  C026  F03B         	movff	?___lldiv+3,ultoa@v+3
  2404  0009D4  4A30               	infsnz	ultoa@buf,f,c
  2405  0009D6  2A31               	incf	ultoa@buf+1,f,c
  2406  0009D8  5038               	movf	ultoa@v,w,c
  2407  0009DA  1039               	iorwf	ultoa@v+1,w,c
  2408  0009DC  103A               	iorwf	ultoa@v+2,w,c
  2409  0009DE  103B               	iorwf	ultoa@v+3,w,c
  2410  0009E0  A4D8               	btfss	status,2,c
  2411  0009E2  D7DD               	goto	l2964
  2412  0009E4  C030  FFD9         	movff	ultoa@buf,fsr2l
  2413  0009E8  C031  FFDA         	movff	ultoa@buf+1,fsr2h
  2414  0009EC  0E00               	movlw	0
  2415  0009EE  6EDF               	movwf	indf2,c
  2416  0009F0  0630               	decf	ultoa@buf,f,c
  2417  0009F2  A0D8               	btfss	status,0,c
  2418  0009F4  0631               	decf	ultoa@buf+1,f,c
  2419  0009F6  D000               	goto	l2974
  2420  0009F8                     l2974:
  2421  0009F8  C032  F023         	movff	ultoa@val,___llmod@dividend
  2422  0009FC  C033  F024         	movff	ultoa@val+1,___llmod@dividend+1
  2423  000A00  C034  F025         	movff	ultoa@val+2,___llmod@dividend+2
  2424  000A04  C035  F026         	movff	ultoa@val+3,___llmod@dividend+3
  2425  000A08  C036  F027         	movff	ultoa@base,___llmod@divisor
  2426  000A0C  C037  F028         	movff	ultoa@base+1,___llmod@divisor+1
  2427  000A10  0E00               	movlw	0
  2428  000A12  BE28               	btfsc	___llmod@divisor+1,7,c
  2429  000A14  0EFF               	movlw	-1
  2430  000A16  6E29               	movwf	___llmod@divisor+2,c
  2431  000A18  6E2A               	movwf	___llmod@divisor+3,c
  2432  000A1A  ECA3  F009         	call	___llmod	;wreg free
  2433  000A1E  5023               	movf	?___llmod,w,c
  2434  000A20  6E3C               	movwf	ultoa@c,c
  2435  000A22  C032  F023         	movff	ultoa@val,___lldiv@dividend
  2436  000A26  C033  F024         	movff	ultoa@val+1,___lldiv@dividend+1
  2437  000A2A  C034  F025         	movff	ultoa@val+2,___lldiv@dividend+2
  2438  000A2E  C035  F026         	movff	ultoa@val+3,___lldiv@dividend+3
  2439  000A32  C036  F027         	movff	ultoa@base,___lldiv@divisor
  2440  000A36  C037  F028         	movff	ultoa@base+1,___lldiv@divisor+1
  2441  000A3A  0E00               	movlw	0
  2442  000A3C  BE28               	btfsc	___lldiv@divisor+1,7,c
  2443  000A3E  0EFF               	movlw	-1
  2444  000A40  6E29               	movwf	___lldiv@divisor+2,c
  2445  000A42  6E2A               	movwf	___lldiv@divisor+3,c
  2446  000A44  EC99  F008         	call	___lldiv	;wreg free
  2447  000A48  C023  F032         	movff	?___lldiv,ultoa@val
  2448  000A4C  C024  F033         	movff	?___lldiv+1,ultoa@val+1
  2449  000A50  C025  F034         	movff	?___lldiv+2,ultoa@val+2
  2450  000A54  C026  F035         	movff	?___lldiv+3,ultoa@val+3
  2451  000A58  0E09               	movlw	9
  2452  000A5A  643C               	cpfsgt	ultoa@c,c
  2453  000A5C  D002               	goto	l958
  2454  000A5E  0E07               	movlw	7
  2455  000A60  263C               	addwf	ultoa@c,f,c
  2456  000A62                     l958:
  2457  000A62  0E30               	movlw	48
  2458  000A64  263C               	addwf	ultoa@c,f,c
  2459  000A66  C030  FFD9         	movff	ultoa@buf,fsr2l
  2460  000A6A  C031  FFDA         	movff	ultoa@buf+1,fsr2h
  2461  000A6E  C03C  FFDF         	movff	ultoa@c,indf2
  2462  000A72  0630               	decf	ultoa@buf,f,c
  2463  000A74  A0D8               	btfss	status,0,c
  2464  000A76  0631               	decf	ultoa@buf+1,f,c
  2465  000A78  5032               	movf	ultoa@val,w,c
  2466  000A7A  1033               	iorwf	ultoa@val+1,w,c
  2467  000A7C  1034               	iorwf	ultoa@val+2,w,c
  2468  000A7E  1035               	iorwf	ultoa@val+3,w,c
  2469  000A80  A4D8               	btfss	status,2,c
  2470  000A82  D7BA               	goto	l2974
  2471                           
  2472                           ;	Return value of _ultoa is never used
  2473  000A84  0012               	return		;funcret
  2474  000A86                     __end_of_ultoa:
  2475                           	opt stack 0
  2476                           tblptru	equ	0xFF8
  2477                           tblptrh	equ	0xFF7
  2478                           tblptrl	equ	0xFF6
  2479                           tablat	equ	0xFF5
  2480                           prodh	equ	0xFF4
  2481                           prodl	equ	0xFF3
  2482                           postinc0	equ	0xFEE
  2483                           wreg	equ	0xFE8
  2484                           indf1	equ	0xFE7
  2485                           fsr1h	equ	0xFE2
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           postinc2	equ	0xFDE
  2489                           fsr2h	equ	0xFDA
  2490                           fsr2l	equ	0xFD9
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function ___llmod *****************
  2494 ;; Defined at:
  2495 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/llmod.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;  dividend        4   34[COMRAM] unsigned long 
  2498 ;;  divisor         4   38[COMRAM] unsigned long 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  counter         1   42[COMRAM] unsigned char 
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  4   34[COMRAM] unsigned long 
  2503 ;; Registers used:
  2504 ;;		wreg, status,2, status,0
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2510 ;;      Params:         8       0       0       0       0       0       0
  2511 ;;      Locals:         1       0       0       0       0       0       0
  2512 ;;      Temps:          0       0       0       0       0       0       0
  2513 ;;      Totals:         9       0       0       0       0       0       0
  2514 ;;Total ram usage:        9 bytes
  2515 ;; Hardware stack levels used:    1
  2516 ;; Hardware stack levels required when called:    3
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_ultoa
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text12
  2525  001346                     __ptext12:
  2526                           	opt stack 0
  2527  001346                     ___llmod:
  2528                           	opt stack 25
  2529                           
  2530                           ;incstack = 0
  2531  001346  5027               	movf	___llmod@divisor,w,c
  2532  001348  1028               	iorwf	___llmod@divisor+1,w,c
  2533  00134A  1029               	iorwf	___llmod@divisor+2,w,c
  2534  00134C  102A               	iorwf	___llmod@divisor+3,w,c
  2535  00134E  B4D8               	btfsc	status,2,c
  2536  001350  D029               	goto	l906
  2537  001352  0E01               	movlw	1
  2538  001354  6E2B               	movwf	___llmod@counter,c
  2539  001356  D007               	goto	l2928
  2540  001358                     l2926:
  2541  001358  90D8               	bcf	status,0,c
  2542  00135A  3627               	rlcf	___llmod@divisor,f,c
  2543  00135C  3628               	rlcf	___llmod@divisor+1,f,c
  2544  00135E  3629               	rlcf	___llmod@divisor+2,f,c
  2545  001360  362A               	rlcf	___llmod@divisor+3,f,c
  2546  001362  2A2B               	incf	___llmod@counter,f,c
  2547  001364  D000               	goto	l2928
  2548  001366                     l2928:
  2549  001366  BE2A               	btfsc	___llmod@divisor+3,7,c
  2550  001368  D002               	goto	l2930
  2551  00136A  D7F6               	goto	l2926
  2552  00136C  D000               	goto	l2930
  2553  00136E                     l2930:
  2554  00136E  5027               	movf	___llmod@divisor,w,c
  2555  001370  5C23               	subwf	___llmod@dividend,w,c
  2556  001372  5028               	movf	___llmod@divisor+1,w,c
  2557  001374  5824               	subwfb	___llmod@dividend+1,w,c
  2558  001376  5029               	movf	___llmod@divisor+2,w,c
  2559  001378  5825               	subwfb	___llmod@dividend+2,w,c
  2560  00137A  502A               	movf	___llmod@divisor+3,w,c
  2561  00137C  5826               	subwfb	___llmod@dividend+3,w,c
  2562  00137E  A0D8               	btfss	status,0,c
  2563  001380  D009               	goto	l2934
  2564  001382  5027               	movf	___llmod@divisor,w,c
  2565  001384  5E23               	subwf	___llmod@dividend,f,c
  2566  001386  5028               	movf	___llmod@divisor+1,w,c
  2567  001388  5A24               	subwfb	___llmod@dividend+1,f,c
  2568  00138A  5029               	movf	___llmod@divisor+2,w,c
  2569  00138C  5A25               	subwfb	___llmod@dividend+2,f,c
  2570  00138E  502A               	movf	___llmod@divisor+3,w,c
  2571  001390  5A26               	subwfb	___llmod@dividend+3,f,c
  2572  001392  D000               	goto	l2934
  2573  001394                     l2934:
  2574  001394  90D8               	bcf	status,0,c
  2575  001396  322A               	rrcf	___llmod@divisor+3,f,c
  2576  001398  3229               	rrcf	___llmod@divisor+2,f,c
  2577  00139A  3228               	rrcf	___llmod@divisor+1,f,c
  2578  00139C  3227               	rrcf	___llmod@divisor,f,c
  2579  00139E  2E2B               	decfsz	___llmod@counter,f,c
  2580  0013A0  D7E6               	goto	l2930
  2581  0013A2  D000               	goto	l906
  2582  0013A4                     l906:
  2583  0013A4  C023  F023         	movff	___llmod@dividend,?___llmod
  2584  0013A8  C024  F024         	movff	___llmod@dividend+1,?___llmod+1
  2585  0013AC  C025  F025         	movff	___llmod@dividend+2,?___llmod+2
  2586  0013B0  C026  F026         	movff	___llmod@dividend+3,?___llmod+3
  2587  0013B4  0012               	return		;funcret
  2588  0013B6                     __end_of___llmod:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           indf1	equ	0xFE7
  2599                           fsr1h	equ	0xFE2
  2600                           fsr1l	equ	0xFE1
  2601                           indf2	equ	0xFDF
  2602                           postinc2	equ	0xFDE
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function ___lldiv *****************
  2608 ;; Defined at:
  2609 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/lldiv.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  dividend        4   34[COMRAM] unsigned long 
  2612 ;;  divisor         4   38[COMRAM] unsigned long 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  quotient        4   42[COMRAM] unsigned long 
  2615 ;;  counter         1   46[COMRAM] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  4   34[COMRAM] unsigned long 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2625 ;;      Params:         8       0       0       0       0       0       0
  2626 ;;      Locals:         5       0       0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0       0       0
  2628 ;;      Totals:        13       0       0       0       0       0       0
  2629 ;;Total ram usage:       13 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    3
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_ultoa
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text13
  2640  001132                     __ptext13:
  2641                           	opt stack 0
  2642  001132                     ___lldiv:
  2643                           	opt stack 25
  2644                           
  2645                           ;incstack = 0
  2646  001132  0E00               	movlw	0
  2647  001134  6E2B               	movwf	___lldiv@quotient,c
  2648  001136  0E00               	movlw	0
  2649  001138  6E2C               	movwf	___lldiv@quotient+1,c
  2650  00113A  0E00               	movlw	0
  2651  00113C  6E2D               	movwf	___lldiv@quotient+2,c
  2652  00113E  0E00               	movlw	0
  2653  001140  6E2E               	movwf	___lldiv@quotient+3,c
  2654  001142  5027               	movf	___lldiv@divisor,w,c
  2655  001144  1028               	iorwf	___lldiv@divisor+1,w,c
  2656  001146  1029               	iorwf	___lldiv@divisor+2,w,c
  2657  001148  102A               	iorwf	___lldiv@divisor+3,w,c
  2658  00114A  B4D8               	btfsc	status,2,c
  2659  00114C  D02F               	goto	l896
  2660  00114E  0E01               	movlw	1
  2661  001150  6E2F               	movwf	___lldiv@counter,c
  2662  001152  D007               	goto	l2908
  2663  001154                     l2906:
  2664  001154  90D8               	bcf	status,0,c
  2665  001156  3627               	rlcf	___lldiv@divisor,f,c
  2666  001158  3628               	rlcf	___lldiv@divisor+1,f,c
  2667  00115A  3629               	rlcf	___lldiv@divisor+2,f,c
  2668  00115C  362A               	rlcf	___lldiv@divisor+3,f,c
  2669  00115E  2A2F               	incf	___lldiv@counter,f,c
  2670  001160  D000               	goto	l2908
  2671  001162                     l2908:
  2672  001162  BE2A               	btfsc	___lldiv@divisor+3,7,c
  2673  001164  D002               	goto	l2910
  2674  001166  D7F6               	goto	l2906
  2675  001168  D000               	goto	l2910
  2676  00116A                     l2910:
  2677  00116A  90D8               	bcf	status,0,c
  2678  00116C  362B               	rlcf	___lldiv@quotient,f,c
  2679  00116E  362C               	rlcf	___lldiv@quotient+1,f,c
  2680  001170  362D               	rlcf	___lldiv@quotient+2,f,c
  2681  001172  362E               	rlcf	___lldiv@quotient+3,f,c
  2682  001174  5027               	movf	___lldiv@divisor,w,c
  2683  001176  5C23               	subwf	___lldiv@dividend,w,c
  2684  001178  5028               	movf	___lldiv@divisor+1,w,c
  2685  00117A  5824               	subwfb	___lldiv@dividend+1,w,c
  2686  00117C  5029               	movf	___lldiv@divisor+2,w,c
  2687  00117E  5825               	subwfb	___lldiv@dividend+2,w,c
  2688  001180  502A               	movf	___lldiv@divisor+3,w,c
  2689  001182  5826               	subwfb	___lldiv@dividend+3,w,c
  2690  001184  A0D8               	btfss	status,0,c
  2691  001186  D00A               	goto	l2918
  2692  001188  5027               	movf	___lldiv@divisor,w,c
  2693  00118A  5E23               	subwf	___lldiv@dividend,f,c
  2694  00118C  5028               	movf	___lldiv@divisor+1,w,c
  2695  00118E  5A24               	subwfb	___lldiv@dividend+1,f,c
  2696  001190  5029               	movf	___lldiv@divisor+2,w,c
  2697  001192  5A25               	subwfb	___lldiv@dividend+2,f,c
  2698  001194  502A               	movf	___lldiv@divisor+3,w,c
  2699  001196  5A26               	subwfb	___lldiv@dividend+3,f,c
  2700  001198  802B               	bsf	___lldiv@quotient,0,c
  2701  00119A  D000               	goto	l2918
  2702  00119C                     l2918:
  2703  00119C  90D8               	bcf	status,0,c
  2704  00119E  322A               	rrcf	___lldiv@divisor+3,f,c
  2705  0011A0  3229               	rrcf	___lldiv@divisor+2,f,c
  2706  0011A2  3228               	rrcf	___lldiv@divisor+1,f,c
  2707  0011A4  3227               	rrcf	___lldiv@divisor,f,c
  2708  0011A6  2E2F               	decfsz	___lldiv@counter,f,c
  2709  0011A8  D7E0               	goto	l2910
  2710  0011AA  D000               	goto	l896
  2711  0011AC                     l896:
  2712  0011AC  C02B  F023         	movff	___lldiv@quotient,?___lldiv
  2713  0011B0  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
  2714  0011B4  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
  2715  0011B8  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
  2716  0011BC  0012               	return		;funcret
  2717  0011BE                     __end_of___lldiv:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           prodh	equ	0xFF4
  2724                           prodl	equ	0xFF3
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           indf1	equ	0xFE7
  2728                           fsr1h	equ	0xFE2
  2729                           fsr1l	equ	0xFE1
  2730                           indf2	equ	0xFDF
  2731                           postinc2	equ	0xFDE
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _nrfWrite *****************
  2737 ;; Defined at:
  2738 ;;		line 86 in file "nrf24.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  reg             1    wreg     unsigned char 
  2741 ;;  data            1    0[BANK0 ] unsigned char 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  reg             1    2[BANK0 ] unsigned char 
  2744 ;;  tmp             1    1[BANK0 ] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;		None               void
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       1       0       0       0       0       0
  2755 ;;      Locals:         0       2       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         0       3       0       0       0       0       0
  2758 ;;Total ram usage:        3 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    7
  2761 ;; This function calls:
  2762 ;;		_spiInit
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;;		_nrfTransmit
  2766 ;;		_nrfReceiveMode
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text14
  2771  0014D0                     __ptext14:
  2772                           	opt stack 0
  2773  0014D0                     _nrfWrite:
  2774                           	opt stack 23
  2775                           
  2776                           ;incstack = 0
  2777                           ;nrfWrite@reg stored from wreg
  2778  0014D0  0100               	movlb	0	; () banked
  2779  0014D2  6F82               	movwf	nrfWrite@reg& (0+255),b
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;nrf24.c: 87: spiInit();
  2783  0014D4  ECB1  F00A         	call	_spiInit	;wreg free
  2784                           
  2785                           ;nrf24.c: 88: unsigned char tmp;
  2786                           ;nrf24.c: 90: PORTBbits.RB0 = 0;
  2787  0014D8  9081               	bcf	3969,0,c	;volatile
  2788                           
  2789                           ;nrf24.c: 91: SSPBUF = (0b00100000)|reg;
  2790  0014DA  0100               	movlb	0	; () banked
  2791  0014DC  5182               	movf	nrfWrite@reg& (0+255),w,b
  2792  0014DE  0920               	iorlw	32
  2793  0014E0  6EC9               	movwf	4041,c	;volatile
  2794                           
  2795                           ; BSR set to: 0
  2796                           
  2797                           ;nrf24.c: 92: while(!bflag);
  2798  0014E2  D000               	goto	l2998
  2799  0014E4                     l2998:
  2800                           
  2801                           ; BSR set to: 0
  2802  0014E4  5057               	movf	_bflag,w,c	;volatile
  2803  0014E6  B4D8               	btfsc	status,2,c
  2804  0014E8  D7FD               	goto	l2998
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;nrf24.c: 93: tmp = SSPBUF;
  2808  0014EA  CFC9 F081          	movff	4041,nrfWrite@tmp	;volatile
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;nrf24.c: 94: bflag = 0;
  2812  0014EE  0E00               	movlw	0
  2813  0014F0  6E57               	movwf	_bflag,c	;volatile
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;nrf24.c: 95: SSPBUF = data;
  2817  0014F2  C080  FFC9         	movff	nrfWrite@data,4041	;volatile
  2818                           
  2819                           ; BSR set to: 0
  2820                           
  2821                           ;nrf24.c: 96: while(!bflag);
  2822  0014F6  D000               	goto	l3004
  2823  0014F8                     l3004:
  2824                           
  2825                           ; BSR set to: 0
  2826  0014F8  5057               	movf	_bflag,w,c	;volatile
  2827  0014FA  B4D8               	btfsc	status,2,c
  2828  0014FC  D7FD               	goto	l3004
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;nrf24.c: 97: bflag = 0;
  2832                           
  2833                           ; BSR set to: 0
  2834  0014FE  0E00               	movlw	0
  2835  001500  6E57               	movwf	_bflag,c	;volatile
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;nrf24.c: 98: PORTBbits.RB0 = 1;
  2839  001502  8081               	bsf	3969,0,c	;volatile
  2840                           
  2841                           ; BSR set to: 0
  2842  001504  0012               	return		;funcret
  2843  001506                     __end_of_nrfWrite:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           indf1	equ	0xFE7
  2854                           fsr1h	equ	0xFE2
  2855                           fsr1l	equ	0xFE1
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           fsr2h	equ	0xFDA
  2859                           fsr2l	equ	0xFD9
  2860                           status	equ	0xFD8
  2861                           
  2862 ;; *************** function _nrfRead *****************
  2863 ;; Defined at:
  2864 ;;		line 71 in file "nrf24.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  reg             1    wreg     unsigned char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  reg             1    2[BANK0 ] unsigned char 
  2869 ;;  i               1    5[BANK0 ] unsigned char 
  2870 ;;  val             2    3[BANK0 ] unsigned char [2]
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  2    0[BANK0 ] PTR unsigned char 
  2873 ;; Registers used:
  2874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2880 ;;      Params:         0       2       0       0       0       0       0
  2881 ;;      Locals:         0       4       0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0
  2883 ;;      Totals:         0       6       0       0       0       0       0
  2884 ;;Total ram usage:        6 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    7
  2887 ;; This function calls:
  2888 ;;		_delay
  2889 ;;		_spiInit
  2890 ;; This function is called by:
  2891 ;;		_main
  2892 ;;		_nrfReceiveMode
  2893 ;;		_nrfShowSettings
  2894 ;;		_nrfReceive
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text15
  2899  00141E                     __ptext15:
  2900                           	opt stack 0
  2901  00141E                     _nrfRead:
  2902                           	opt stack 22
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;incstack = 0
  2906                           ;nrfRead@reg stored from wreg
  2907  00141E  0100               	movlb	0	; () banked
  2908  001420  6F82               	movwf	nrfRead@reg& (0+255),b
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;nrf24.c: 72: unsigned char val[2];
  2912                           ;nrf24.c: 73: spiInit();
  2913  001422  ECB1  F00A         	call	_spiInit	;wreg free
  2914                           
  2915                           ;nrf24.c: 74: PORTBbits.RB0 = 0;
  2916  001426  9081               	bcf	3969,0,c	;volatile
  2917                           
  2918                           ;nrf24.c: 75: for(char i=0;i<2;i++){
  2919  001428  0E00               	movlw	0
  2920  00142A  0100               	movlb	0	; () banked
  2921  00142C  6F85               	movwf	nrfRead@i& (0+255),b
  2922  00142E  D01E               	goto	l3076
  2923                           
  2924                           ; BSR set to: 0
  2925                           
  2926                           ; BSR set to: 0
  2927  001430  D021               	goto	l328
  2928  001432                     l327:
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;nrf24.c: 76: SSPBUF = reg;
  2932  001432  C082  FFC9         	movff	nrfRead@reg,4041	;volatile
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;nrf24.c: 77: delay(0.00001);
  2936  001436  0EC6               	movlw	198
  2937  001438  6E46               	movwf	delay@sec,c
  2938  00143A  0E27               	movlw	39
  2939  00143C  6E47               	movwf	delay@sec+1,c
  2940  00143E  0E37               	movlw	55
  2941  001440  6E48               	movwf	delay@sec+2,c
  2942  001442  EC05  F008         	call	_delay	;wreg free
  2943                           
  2944                           ;nrf24.c: 78: while(!bflag);
  2945  001446  D000               	goto	l3068
  2946  001448                     l3068:
  2947  001448  5057               	movf	_bflag,w,c	;volatile
  2948  00144A  B4D8               	btfsc	status,2,c
  2949  00144C  D7FD               	goto	l3068
  2950                           
  2951                           ;nrf24.c: 79: bflag = 0;
  2952  00144E  0E00               	movlw	0
  2953  001450  6E57               	movwf	_bflag,c	;volatile
  2954                           
  2955                           ;nrf24.c: 80: val[i] = SSPBUF;
  2956  001452  0100               	movlb	0	; () banked
  2957  001454  5185               	movf	nrfRead@i& (0+255),w,b
  2958  001456  0D01               	mullw	1
  2959  001458  0E83               	movlw	low nrfRead@val
  2960  00145A  24F3               	addwf	prodl,w,c
  2961  00145C  6ED9               	movwf	fsr2l,c
  2962  00145E  0E00               	movlw	high nrfRead@val
  2963  001460  20F4               	addwfc	prodh,w,c
  2964  001462  6EDA               	movwf	fsr2h,c
  2965  001464  CFC9 FFDF          	movff	4041,indf2	;volatile
  2966                           
  2967                           ; BSR set to: 0
  2968  001468  0100               	movlb	0	; () banked
  2969  00146A  2B85               	incf	nrfRead@i& (0+255),f,b
  2970  00146C                     l3076:
  2971                           
  2972                           ; BSR set to: 0
  2973  00146C  0E01               	movlw	1
  2974  00146E  0100               	movlb	0	; () banked
  2975  001470  6585               	cpfsgt	nrfRead@i& (0+255),b
  2976  001472  D7DF               	goto	l327
  2977  001474                     l328:
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;nrf24.c: 81: }
  2981                           ;nrf24.c: 82: PORTBbits.RB0 = 1;
  2982  001474  8081               	bsf	3969,0,c	;volatile
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;nrf24.c: 83: return val;
  2986  001476  0E83               	movlw	low nrfRead@val
  2987  001478  0100               	movlb	0	; () banked
  2988  00147A  6F80               	movwf	?_nrfRead& (0+255),b
  2989  00147C  0E00               	movlw	high nrfRead@val
  2990  00147E  0100               	movlb	0	; () banked
  2991  001480  6F81               	movwf	(?_nrfRead+1)& (0+255),b
  2992  001482  D000               	goto	l332
  2993  001484                     l332:
  2994                           
  2995                           ; BSR set to: 0
  2996  001484  0012               	return		;funcret
  2997  001486                     __end_of_nrfRead:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           indf1	equ	0xFE7
  3008                           fsr1h	equ	0xFE2
  3009                           fsr1l	equ	0xFE1
  3010                           indf2	equ	0xFDF
  3011                           postinc2	equ	0xFDE
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _spiInit *****************
  3017 ;; Defined at:
  3018 ;;		line 59 in file "nrf24.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;		None               void
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3032 ;;      Params:         0       0       0       0       0       0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    6
  3039 ;; This function calls:
  3040 ;;		_delay
  3041 ;; This function is called by:
  3042 ;;		_nrfRead
  3043 ;;		_nrfWrite
  3044 ;;		_nrfReceiveMode
  3045 ;;		_nrfReadADDR
  3046 ;;		_nrfReceive
  3047 ;;		_nrfWriteADDR
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text16
  3052  001562                     __ptext16:
  3053                           	opt stack 0
  3054  001562                     _spiInit:
  3055                           	opt stack 23
  3056                           
  3057                           ;nrf24.c: 60: TRISCbits.RC5 = 0;
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;incstack = 0
  3061  001562  9A94               	bcf	3988,5,c	;volatile
  3062                           
  3063                           ;nrf24.c: 61: TRISCbits.RC3 = 0;
  3064  001564  9694               	bcf	3988,3,c	;volatile
  3065                           
  3066                           ;nrf24.c: 62: SSPCON1bits.SSPEN = 0;
  3067  001566  9AC6               	bcf	4038,5,c	;volatile
  3068                           
  3069                           ;nrf24.c: 63: SSPSTATbits.CKE = 1;
  3070  001568  8CC7               	bsf	4039,6,c	;volatile
  3071                           
  3072                           ;nrf24.c: 64: SSPCON1bits.CKP = 0;
  3073  00156A  98C6               	bcf	4038,4,c	;volatile
  3074                           
  3075                           ;nrf24.c: 65: SSPCON1bits.SSPM = 0b0000;
  3076  00156C  90C6               	bcf	4038,0,c	;volatile
  3077  00156E  92C6               	bcf	4038,1,c	;volatile
  3078  001570  94C6               	bcf	4038,2,c	;volatile
  3079  001572  96C6               	bcf	4038,3,c	;volatile
  3080                           
  3081                           ;nrf24.c: 66: SSPSTATbits.SMP = 0;
  3082  001574  9EC7               	bcf	4039,7,c	;volatile
  3083                           
  3084                           ;nrf24.c: 67: SSPCON1bits.SSPEN = 1;
  3085  001576  8AC6               	bsf	4038,5,c	;volatile
  3086                           
  3087                           ;nrf24.c: 68: delay(0.0001);
  3088  001578  0EB7               	movlw	183
  3089  00157A  6E46               	movwf	delay@sec,c
  3090  00157C  0ED1               	movlw	209
  3091  00157E  6E47               	movwf	delay@sec+1,c
  3092  001580  0E38               	movlw	56
  3093  001582  6E48               	movwf	delay@sec+2,c
  3094  001584  EC05  F008         	call	_delay	;wreg free
  3095  001588  0012               	return		;funcret
  3096  00158A                     __end_of_spiInit:
  3097                           	opt stack 0
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           postinc0	equ	0xFEE
  3105                           wreg	equ	0xFE8
  3106                           indf1	equ	0xFE7
  3107                           fsr1h	equ	0xFE2
  3108                           fsr1l	equ	0xFE1
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _delay *****************
  3116 ;; Defined at:
  3117 ;;		line 27 in file "timer.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  sec             3   69[COMRAM] float 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  t2              2   77[COMRAM] volatile unsigned int 
  3122 ;;  t1              2   75[COMRAM] volatile unsigned int 
  3123 ;;  done            1   74[COMRAM] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;		None               void
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3133 ;;      Params:         3       0       0       0       0       0       0
  3134 ;;      Locals:         5       0       0       0       0       0       0
  3135 ;;      Temps:          2       0       0       0       0       0       0
  3136 ;;      Totals:        10       0       0       0       0       0       0
  3137 ;;Total ram usage:       10 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    5
  3140 ;; This function calls:
  3141 ;;		___ftge
  3142 ;;		___ftmul
  3143 ;;		___lwtoft
  3144 ;; This function is called by:
  3145 ;;		_spiInit
  3146 ;;		_nrfRead
  3147 ;;		_nrfReceiveMode
  3148 ;;		_nrfReadADDR
  3149 ;;		_nrfReceive
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text17
  3154  00100A                     __ptext17:
  3155                           	opt stack 0
  3156  00100A                     _delay:
  3157                           	opt stack 23
  3158                           
  3159                           ;timer.c: 28: T3CONbits.TMR3ON = 1;
  3160                           
  3161                           ;incstack = 0
  3162  00100A  80B1               	bsf	4017,0,c	;volatile
  3163                           
  3164                           ;timer.c: 29: unsigned char done = 0;
  3165  00100C  0E00               	movlw	0
  3166  00100E  6E4B               	movwf	delay@done,c
  3167                           
  3168                           ;timer.c: 30: volatile unsigned int t1=count,t2=count;
  3169  001010  C052  F04C         	movff	_count,delay@t1	;volatile
  3170  001014  C053  F04D         	movff	_count+1,delay@t1+1	;volatile
  3171  001018  C052  F04E         	movff	_count,delay@t2	;volatile
  3172  00101C  C053  F04F         	movff	_count+1,delay@t2+1	;volatile
  3173                           
  3174                           ;timer.c: 31: TMR3 = 0xFFF5;
  3175  001020  0EFF               	movlw	255
  3176  001022  6EB3               	movwf	4019,c	;volatile
  3177  001024  0EF5               	movlw	245
  3178  001026  6EB2               	movwf	4018,c	;volatile
  3179                           
  3180                           ;timer.c: 32: while(!done){
  3181  001028  D036               	goto	l235
  3182  00102A                     l236:
  3183                           
  3184                           ;timer.c: 33: t2 = count;
  3185  00102A  C052  F04E         	movff	_count,delay@t2	;volatile
  3186  00102E  C053  F04F         	movff	_count+1,delay@t2+1	;volatile
  3187                           
  3188                           ;timer.c: 34: if((t2-t1)*0.0001>=sec){
  3189  001032  0EB7               	movlw	183
  3190  001034  6E31               	movwf	___ftmul@f2,c
  3191  001036  0ED1               	movlw	209
  3192  001038  6E32               	movwf	___ftmul@f2+1,c
  3193  00103A  0E38               	movlw	56
  3194  00103C  6E33               	movwf	___ftmul@f2+2,c
  3195  00103E  C04C  F049         	movff	delay@t1,??_delay	;volatile
  3196  001042  C04D  F04A         	movff	delay@t1+1,??_delay+1	;volatile
  3197  001046  1E49               	comf	??_delay,f,c
  3198  001048  1E4A               	comf	??_delay+1,f,c
  3199  00104A  4A49               	infsnz	??_delay,f,c
  3200  00104C  2A4A               	incf	??_delay+1,f,c
  3201  00104E  504E               	movf	delay@t2,w,c	;volatile
  3202  001050  2449               	addwf	??_delay,w,c
  3203  001052  6E2B               	movwf	___lwtoft@c,c
  3204  001054  504F               	movf	delay@t2+1,w,c	;volatile
  3205  001056  204A               	addwfc	??_delay+1,w,c
  3206  001058  6E2C               	movwf	___lwtoft@c+1,c
  3207  00105A  ECC5  F00A         	call	___lwtoft	;wreg free
  3208  00105E  C02B  F02E         	movff	?___lwtoft,___ftmul@f1
  3209  001062  C02C  F02F         	movff	?___lwtoft+1,___ftmul@f1+1
  3210  001066  C02D  F030         	movff	?___lwtoft+2,___ftmul@f1+2
  3211  00106A  EC43  F005         	call	___ftmul	;wreg free
  3212  00106E  C02E  F03D         	movff	?___ftmul,___ftge@ff1
  3213  001072  C02F  F03E         	movff	?___ftmul+1,___ftge@ff1+1
  3214  001076  C030  F03F         	movff	?___ftmul+2,___ftge@ff1+2
  3215  00107A  C046  F040         	movff	delay@sec,___ftge@ff2
  3216  00107E  C047  F041         	movff	delay@sec+1,___ftge@ff2+1
  3217  001082  C048  F042         	movff	delay@sec+2,___ftge@ff2+2
  3218  001086  EC6F  F007         	call	___ftge	;wreg free
  3219  00108A  A0D8               	btfss	status,0,c
  3220  00108C  D004               	goto	l235
  3221                           
  3222                           ;timer.c: 35: done = 1;
  3223  00108E  0E01               	movlw	1
  3224  001090  6E4B               	movwf	delay@done,c
  3225                           
  3226                           ;timer.c: 36: T3CONbits.TMR3ON = 0;
  3227  001092  90B1               	bcf	4017,0,c	;volatile
  3228  001094  D000               	goto	l235
  3229  001096                     l235:
  3230  001096  504B               	movf	delay@done,w,c
  3231  001098  B4D8               	btfsc	status,2,c
  3232  00109A  D7C7               	goto	l236
  3233  00109C  0012               	return		;funcret
  3234  00109E                     __end_of_delay:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           tblptrh	equ	0xFF7
  3238                           tblptrl	equ	0xFF6
  3239                           tablat	equ	0xFF5
  3240                           prodh	equ	0xFF4
  3241                           prodl	equ	0xFF3
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           indf1	equ	0xFE7
  3245                           fsr1h	equ	0xFE2
  3246                           fsr1l	equ	0xFE1
  3247                           indf2	equ	0xFDF
  3248                           postinc2	equ	0xFDE
  3249                           fsr2h	equ	0xFDA
  3250                           fsr2l	equ	0xFD9
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function ___lwtoft *****************
  3254 ;; Defined at:
  3255 ;;		line 28 in file "/opt/microchip/xc8/v1.34/sources/common/lwtoft.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  c               2   42[COMRAM] unsigned int 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  3   42[COMRAM] float 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3269 ;;      Params:         3       0       0       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0
  3272 ;;      Totals:         3       0       0       0       0       0       0
  3273 ;;Total ram usage:        3 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    4
  3276 ;; This function calls:
  3277 ;;		___ftpack
  3278 ;; This function is called by:
  3279 ;;		_delay
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text18
  3284  00158A                     __ptext18:
  3285                           	opt stack 0
  3286  00158A                     ___lwtoft:
  3287                           	opt stack 23
  3288                           
  3289                           ;incstack = 0
  3290  00158A  C02B  F023         	movff	___lwtoft@c,___ftpack@arg
  3291  00158E  C02C  F024         	movff	___lwtoft@c+1,___ftpack@arg+1
  3292  001592  6A25               	clrf	___ftpack@arg+2,c
  3293  001594  0E8E               	movlw	142
  3294  001596  6E26               	movwf	___ftpack@exp,c
  3295  001598  0E00               	movlw	0
  3296  00159A  6E27               	movwf	___ftpack@sign,c
  3297  00159C  ECAE  F006         	call	___ftpack	;wreg free
  3298  0015A0  C023  F02B         	movff	?___ftpack,?___lwtoft
  3299  0015A4  C024  F02C         	movff	?___ftpack+1,?___lwtoft+1
  3300  0015A8  C025  F02D         	movff	?___ftpack+2,?___lwtoft+2
  3301  0015AC  D000               	goto	l1000
  3302  0015AE                     l1000:
  3303  0015AE  0012               	return		;funcret
  3304  0015B0                     __end_of___lwtoft:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           prodh	equ	0xFF4
  3311                           prodl	equ	0xFF3
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           indf1	equ	0xFE7
  3315                           fsr1h	equ	0xFE2
  3316                           fsr1l	equ	0xFE1
  3317                           indf2	equ	0xFDF
  3318                           postinc2	equ	0xFDE
  3319                           fsr2h	equ	0xFDA
  3320                           fsr2l	equ	0xFD9
  3321                           status	equ	0xFD8
  3322                           
  3323 ;; *************** function ___ftmul *****************
  3324 ;; Defined at:
  3325 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/ftmul.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  f1              3   45[COMRAM] float 
  3328 ;;  f2              3   48[COMRAM] float 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  f3_as_produc    3   55[COMRAM] unsigned um
  3331 ;;  sign            1   59[COMRAM] unsigned char 
  3332 ;;  cntr            1   58[COMRAM] unsigned char 
  3333 ;;  exp             1   54[COMRAM] unsigned char 
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  3   45[COMRAM] float 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3343 ;;      Params:         6       0       0       0       0       0       0
  3344 ;;      Locals:         6       0       0       0       0       0       0
  3345 ;;      Temps:          3       0       0       0       0       0       0
  3346 ;;      Totals:        15       0       0       0       0       0       0
  3347 ;;Total ram usage:       15 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    4
  3350 ;; This function calls:
  3351 ;;		___ftpack
  3352 ;; This function is called by:
  3353 ;;		_delay
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text19
  3358  000A86                     __ptext19:
  3359                           	opt stack 0
  3360  000A86                     ___ftmul:
  3361                           	opt stack 23
  3362                           
  3363                           ;incstack = 0
  3364  000A86  C030  F034         	movff	___ftmul@f1+2,??___ftmul
  3365  000A8A  6A35               	clrf	(??___ftmul+1)& (0+255),c
  3366  000A8C  6A36               	clrf	(??___ftmul+2)& (0+255),c
  3367  000A8E  342F               	rlcf	___ftmul@f1+1,w,c
  3368  000A90  3634               	rlcf	??___ftmul& (0+255),f,c
  3369  000A92  E301               	bnc	u2181
  3370  000A94  8035               	bsf	(??___ftmul+1)& (0+255),0,c
  3371  000A96                     u2181:
  3372  000A96  5034               	movf	??___ftmul,w,c
  3373  000A98  6E37               	movwf	___ftmul@exp,c
  3374  000A9A  5037               	movf	___ftmul@exp,w,c
  3375  000A9C  A4D8               	btfss	status,2,c
  3376  000A9E  D002               	goto	l2806
  3377  000AA0  D00E               	goto	l2808
  3378  000AA2  D06C               	goto	l836
  3379  000AA4                     l2806:
  3380  000AA4  C033  F034         	movff	___ftmul@f2+2,??___ftmul
  3381  000AA8  6A35               	clrf	(??___ftmul+1)& (0+255),c
  3382  000AAA  6A36               	clrf	(??___ftmul+2)& (0+255),c
  3383  000AAC  3432               	rlcf	___ftmul@f2+1,w,c
  3384  000AAE  3634               	rlcf	??___ftmul& (0+255),f,c
  3385  000AB0  E301               	bnc	u2201
  3386  000AB2  8035               	bsf	(??___ftmul+1)& (0+255),0,c
  3387  000AB4                     u2201:
  3388  000AB4  5034               	movf	??___ftmul,w,c
  3389  000AB6  6E3C               	movwf	___ftmul@sign,c
  3390  000AB8  503C               	movf	___ftmul@sign,w,c
  3391  000ABA  A4D8               	btfss	status,2,c
  3392  000ABC  D007               	goto	l2812
  3393  000ABE                     l2808:
  3394  000ABE  0E00               	movlw	0
  3395  000AC0  6E2E               	movwf	?___ftmul,c
  3396  000AC2  0E00               	movlw	0
  3397  000AC4  6E2F               	movwf	?___ftmul+1,c
  3398  000AC6  0E00               	movlw	0
  3399  000AC8  6E30               	movwf	?___ftmul+2,c
  3400  000ACA  D058               	goto	l836
  3401  000ACC                     l2812:
  3402  000ACC  503C               	movf	___ftmul@sign,w,c
  3403  000ACE  0F7B               	addlw	123
  3404  000AD0  2637               	addwf	___ftmul@exp,f,c
  3405  000AD2  C030  F03C         	movff	___ftmul@f1+2,___ftmul@sign
  3406  000AD6  5033               	movf	___ftmul@f2+2,w,c
  3407  000AD8  1A3C               	xorwf	___ftmul@sign,f,c
  3408  000ADA  0E80               	movlw	128
  3409  000ADC  163C               	andwf	___ftmul@sign,f,c
  3410  000ADE  8E2F               	bsf	___ftmul@f1+1,7,c
  3411  000AE0  8E32               	bsf	___ftmul@f2+1,7,c
  3412  000AE2  0EFF               	movlw	255
  3413  000AE4  1631               	andwf	___ftmul@f2,f,c
  3414  000AE6  0EFF               	movlw	255
  3415  000AE8  1632               	andwf	___ftmul@f2+1,f,c
  3416  000AEA  0E00               	movlw	0
  3417  000AEC  1633               	andwf	___ftmul@f2+2,f,c
  3418  000AEE  0E00               	movlw	0
  3419  000AF0  6E38               	movwf	___ftmul@f3_as_product,c
  3420  000AF2  0E00               	movlw	0
  3421  000AF4  6E39               	movwf	___ftmul@f3_as_product+1,c
  3422  000AF6  0E00               	movlw	0
  3423  000AF8  6E3A               	movwf	___ftmul@f3_as_product+2,c
  3424  000AFA  0E07               	movlw	7
  3425  000AFC  6E3B               	movwf	___ftmul@cntr,c
  3426  000AFE  D000               	goto	l2826
  3427  000B00                     l2826:
  3428  000B00  A02E               	btfss	___ftmul@f1,0,c
  3429  000B02  D007               	goto	l2830
  3430  000B04  5031               	movf	___ftmul@f2,w,c
  3431  000B06  2638               	addwf	___ftmul@f3_as_product,f,c
  3432  000B08  5032               	movf	___ftmul@f2+1,w,c
  3433  000B0A  2239               	addwfc	___ftmul@f3_as_product+1,f,c
  3434  000B0C  5033               	movf	___ftmul@f2+2,w,c
  3435  000B0E  223A               	addwfc	___ftmul@f3_as_product+2,f,c
  3436  000B10  D000               	goto	l2830
  3437  000B12                     l2830:
  3438  000B12  90D8               	bcf	status,0,c
  3439  000B14  3230               	rrcf	___ftmul@f1+2,f,c
  3440  000B16  322F               	rrcf	___ftmul@f1+1,f,c
  3441  000B18  322E               	rrcf	___ftmul@f1,f,c
  3442  000B1A  90D8               	bcf	status,0,c
  3443  000B1C  3631               	rlcf	___ftmul@f2,f,c
  3444  000B1E  3632               	rlcf	___ftmul@f2+1,f,c
  3445  000B20  3633               	rlcf	___ftmul@f2+2,f,c
  3446  000B22  2E3B               	decfsz	___ftmul@cntr,f,c
  3447  000B24  D7ED               	goto	l2826
  3448  000B26  D000               	goto	l2834
  3449  000B28                     l2834:
  3450  000B28  0E09               	movlw	9
  3451  000B2A  6E3B               	movwf	___ftmul@cntr,c
  3452  000B2C  D000               	goto	l2836
  3453  000B2E                     l2836:
  3454  000B2E  A02E               	btfss	___ftmul@f1,0,c
  3455  000B30  D007               	goto	l2840
  3456  000B32  5031               	movf	___ftmul@f2,w,c
  3457  000B34  2638               	addwf	___ftmul@f3_as_product,f,c
  3458  000B36  5032               	movf	___ftmul@f2+1,w,c
  3459  000B38  2239               	addwfc	___ftmul@f3_as_product+1,f,c
  3460  000B3A  5033               	movf	___ftmul@f2+2,w,c
  3461  000B3C  223A               	addwfc	___ftmul@f3_as_product+2,f,c
  3462  000B3E  D000               	goto	l2840
  3463  000B40                     l2840:
  3464  000B40  90D8               	bcf	status,0,c
  3465  000B42  3230               	rrcf	___ftmul@f1+2,f,c
  3466  000B44  322F               	rrcf	___ftmul@f1+1,f,c
  3467  000B46  322E               	rrcf	___ftmul@f1,f,c
  3468  000B48  90D8               	bcf	status,0,c
  3469  000B4A  323A               	rrcf	___ftmul@f3_as_product+2,f,c
  3470  000B4C  3239               	rrcf	___ftmul@f3_as_product+1,f,c
  3471  000B4E  3238               	rrcf	___ftmul@f3_as_product,f,c
  3472  000B50  2E3B               	decfsz	___ftmul@cntr,f,c
  3473  000B52  D7ED               	goto	l2836
  3474  000B54  D000               	goto	l2844
  3475  000B56                     l2844:
  3476  000B56  C038  F023         	movff	___ftmul@f3_as_product,___ftpack@arg
  3477  000B5A  C039  F024         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3478  000B5E  C03A  F025         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3479  000B62  C037  F026         	movff	___ftmul@exp,___ftpack@exp
  3480  000B66  C03C  F027         	movff	___ftmul@sign,___ftpack@sign
  3481  000B6A  ECAE  F006         	call	___ftpack	;wreg free
  3482  000B6E  C023  F02E         	movff	?___ftpack,?___ftmul
  3483  000B72  C024  F02F         	movff	?___ftpack+1,?___ftmul+1
  3484  000B76  C025  F030         	movff	?___ftpack+2,?___ftmul+2
  3485  000B7A  D000               	goto	l836
  3486  000B7C                     l836:
  3487  000B7C  0012               	return		;funcret
  3488  000B7E                     __end_of___ftmul:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           postinc0	equ	0xFEE
  3497                           wreg	equ	0xFE8
  3498                           indf1	equ	0xFE7
  3499                           fsr1h	equ	0xFE2
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           postinc2	equ	0xFDE
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function ___ftpack *****************
  3508 ;; Defined at:
  3509 ;;		line 62 in file "/opt/microchip/xc8/v1.34/sources/common/float.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  arg             3   34[COMRAM] unsigned um
  3512 ;;  exp             1   37[COMRAM] unsigned char 
  3513 ;;  sign            1   38[COMRAM] unsigned char 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  3   34[COMRAM] float 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3525 ;;      Params:         5       0       0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0
  3527 ;;      Temps:          3       0       0       0       0       0       0
  3528 ;;      Totals:         8       0       0       0       0       0       0
  3529 ;;Total ram usage:        8 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    3
  3532 ;; This function calls:
  3533 ;;		Nothing
  3534 ;; This function is called by:
  3535 ;;		___ftmul
  3536 ;;		___lwtoft
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text20
  3541  000D5C                     __ptext20:
  3542                           	opt stack 0
  3543  000D5C                     ___ftpack:
  3544                           	opt stack 23
  3545                           
  3546                           ;incstack = 0
  3547  000D5C  5026               	movf	___ftpack@exp,w,c
  3548  000D5E  B4D8               	btfsc	status,2,c
  3549  000D60  D005               	goto	l2768
  3550  000D62  5023               	movf	___ftpack@arg,w,c
  3551  000D64  1024               	iorwf	___ftpack@arg+1,w,c
  3552  000D66  1025               	iorwf	___ftpack@arg+2,w,c
  3553  000D68  A4D8               	btfss	status,2,c
  3554  000D6A  D00E               	goto	l2774
  3555  000D6C                     l2768:
  3556  000D6C  0E00               	movlw	0
  3557  000D6E  6E23               	movwf	?___ftpack,c
  3558  000D70  0E00               	movlw	0
  3559  000D72  6E24               	movwf	?___ftpack+1,c
  3560  000D74  0E00               	movlw	0
  3561  000D76  6E25               	movwf	?___ftpack+2,c
  3562  000D78  D053               	goto	l749
  3563  000D7A  D006               	goto	l2774
  3564  000D7C                     l2772:
  3565  000D7C  2A26               	incf	___ftpack@exp,f,c
  3566  000D7E  90D8               	bcf	status,0,c
  3567  000D80  3225               	rrcf	___ftpack@arg+2,f,c
  3568  000D82  3224               	rrcf	___ftpack@arg+1,f,c
  3569  000D84  3223               	rrcf	___ftpack@arg,f,c
  3570  000D86  D000               	goto	l2774
  3571  000D88                     l2774:
  3572  000D88  0E00               	movlw	0
  3573  000D8A  1423               	andwf	___ftpack@arg,w,c
  3574  000D8C  6E28               	movwf	??___ftpack& (0+255),c
  3575  000D8E  0E00               	movlw	0
  3576  000D90  1424               	andwf	___ftpack@arg+1,w,c
  3577  000D92  6E29               	movwf	(??___ftpack+1)& (0+255),c
  3578  000D94  0EFE               	movlw	254
  3579  000D96  1425               	andwf	___ftpack@arg+2,w,c
  3580  000D98  6E2A               	movwf	(??___ftpack+2)& (0+255),c
  3581  000D9A  5028               	movf	??___ftpack,w,c
  3582  000D9C  1029               	iorwf	??___ftpack+1,w,c
  3583  000D9E  102A               	iorwf	??___ftpack+2,w,c
  3584  000DA0  B4D8               	btfsc	status,2,c
  3585  000DA2  D00E               	goto	l2780
  3586  000DA4  D7EB               	goto	l2772
  3587  000DA6  D00C               	goto	l2780
  3588  000DA8                     l2776:
  3589  000DA8  2A26               	incf	___ftpack@exp,f,c
  3590  000DAA  0E01               	movlw	1
  3591  000DAC  2623               	addwf	___ftpack@arg,f,c
  3592  000DAE  0E00               	movlw	0
  3593  000DB0  2224               	addwfc	___ftpack@arg+1,f,c
  3594  000DB2  0E00               	movlw	0
  3595  000DB4  2225               	addwfc	___ftpack@arg+2,f,c
  3596  000DB6  90D8               	bcf	status,0,c
  3597  000DB8  3225               	rrcf	___ftpack@arg+2,f,c
  3598  000DBA  3224               	rrcf	___ftpack@arg+1,f,c
  3599  000DBC  3223               	rrcf	___ftpack@arg,f,c
  3600  000DBE  D000               	goto	l2780
  3601  000DC0                     l2780:
  3602  000DC0  0E00               	movlw	0
  3603  000DC2  1423               	andwf	___ftpack@arg,w,c
  3604  000DC4  6E28               	movwf	??___ftpack& (0+255),c
  3605  000DC6  0E00               	movlw	0
  3606  000DC8  1424               	andwf	___ftpack@arg+1,w,c
  3607  000DCA  6E29               	movwf	(??___ftpack+1)& (0+255),c
  3608  000DCC  0EFF               	movlw	255
  3609  000DCE  1425               	andwf	___ftpack@arg+2,w,c
  3610  000DD0  6E2A               	movwf	(??___ftpack+2)& (0+255),c
  3611  000DD2  5028               	movf	??___ftpack,w,c
  3612  000DD4  1029               	iorwf	??___ftpack+1,w,c
  3613  000DD6  102A               	iorwf	??___ftpack+2,w,c
  3614  000DD8  B4D8               	btfsc	status,2,c
  3615  000DDA  D008               	goto	l2784
  3616  000DDC  D7E5               	goto	l2776
  3617  000DDE  D006               	goto	l2784
  3618  000DE0                     l2782:
  3619  000DE0  0626               	decf	___ftpack@exp,f,c
  3620  000DE2  90D8               	bcf	status,0,c
  3621  000DE4  3623               	rlcf	___ftpack@arg,f,c
  3622  000DE6  3624               	rlcf	___ftpack@arg+1,f,c
  3623  000DE8  3625               	rlcf	___ftpack@arg+2,f,c
  3624  000DEA  D000               	goto	l2784
  3625  000DEC                     l2784:
  3626  000DEC  BE24               	btfsc	___ftpack@arg+1,7,c
  3627  000DEE  D004               	goto	l760
  3628  000DF0  0E02               	movlw	2
  3629  000DF2  6026               	cpfslt	___ftpack@exp,c
  3630  000DF4  D7F5               	goto	l2782
  3631  000DF6  D000               	goto	l760
  3632  000DF8                     l760:
  3633  000DF8  B026               	btfsc	___ftpack@exp,0,c
  3634  000DFA  D002               	goto	l2790
  3635  000DFC  9E24               	bcf	___ftpack@arg+1,7,c
  3636  000DFE  D000               	goto	l2790
  3637  000E00                     l2790:
  3638  000E00  90D8               	bcf	status,0,c
  3639  000E02  3226               	rrcf	___ftpack@exp,f,c
  3640  000E04  5026               	movf	___ftpack@exp,w,c
  3641  000E06  1225               	iorwf	___ftpack@arg+2,f,c
  3642  000E08  5027               	movf	___ftpack@sign,w,c
  3643  000E0A  B4D8               	btfsc	status,2,c
  3644  000E0C  D002               	goto	l2796
  3645  000E0E  8E25               	bsf	___ftpack@arg+2,7,c
  3646  000E10  D000               	goto	l2796
  3647  000E12                     l2796:
  3648  000E12  C023  F023         	movff	___ftpack@arg,?___ftpack
  3649  000E16  C024  F024         	movff	___ftpack@arg+1,?___ftpack+1
  3650  000E1A  C025  F025         	movff	___ftpack@arg+2,?___ftpack+2
  3651  000E1E  D000               	goto	l749
  3652  000E20                     l749:
  3653  000E20  0012               	return		;funcret
  3654  000E22                     __end_of___ftpack:
  3655                           	opt stack 0
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           indf1	equ	0xFE7
  3665                           fsr1h	equ	0xFE2
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function ___ftge *****************
  3674 ;; Defined at:
  3675 ;;		line 4 in file "/opt/microchip/xc8/v1.34/sources/common/ftge.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  ff1             3   60[COMRAM] float 
  3678 ;;  ff2             3   63[COMRAM] float 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;		None
  3681 ;; Return value:  Size  Location     Type
  3682 ;;		None               void
  3683 ;; Registers used:
  3684 ;;		wreg, status,2, status,0
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3690 ;;      Params:         6       0       0       0       0       0       0
  3691 ;;      Locals:         0       0       0       0       0       0       0
  3692 ;;      Temps:          3       0       0       0       0       0       0
  3693 ;;      Totals:         9       0       0       0       0       0       0
  3694 ;;Total ram usage:        9 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:    3
  3697 ;; This function calls:
  3698 ;;		Nothing
  3699 ;; This function is called by:
  3700 ;;		_delay
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text21
  3705  000EDE                     __ptext21:
  3706                           	opt stack 0
  3707  000EDE                     ___ftge:
  3708                           	opt stack 24
  3709                           
  3710                           ;incstack = 0
  3711  000EDE  AE3F               	btfss	___ftge@ff1+2,7,c
  3712  000EE0  D017               	goto	l2852
  3713  000EE2  C03D  F043         	movff	___ftge@ff1,??___ftge
  3714  000EE6  C03E  F044         	movff	___ftge@ff1+1,??___ftge+1
  3715  000EEA  C03F  F045         	movff	___ftge@ff1+2,??___ftge+2
  3716  000EEE  1E43               	comf	??___ftge,f,c
  3717  000EF0  1E44               	comf	??___ftge+1,f,c
  3718  000EF2  1E45               	comf	??___ftge+2,f,c
  3719  000EF4  2A43               	incf	??___ftge,f,c
  3720  000EF6  0E00               	movlw	0
  3721  000EF8  2244               	addwfc	??___ftge+1,f,c
  3722  000EFA  2245               	addwfc	??___ftge+2,f,c
  3723  000EFC  0E00               	movlw	0
  3724  000EFE  2443               	addwf	??___ftge,w,c
  3725  000F00  6E3D               	movwf	___ftge@ff1,c
  3726  000F02  0E00               	movlw	0
  3727  000F04  2044               	addwfc	??___ftge+1,w,c
  3728  000F06  6E3E               	movwf	___ftge@ff1+1,c
  3729  000F08  0E80               	movlw	128
  3730  000F0A  2045               	addwfc	??___ftge+2,w,c
  3731  000F0C  6E3F               	movwf	___ftge@ff1+2,c
  3732  000F0E  D000               	goto	l2852
  3733  000F10                     l2852:
  3734  000F10  AE42               	btfss	___ftge@ff2+2,7,c
  3735  000F12  D017               	goto	l2856
  3736  000F14  C040  F043         	movff	___ftge@ff2,??___ftge
  3737  000F18  C041  F044         	movff	___ftge@ff2+1,??___ftge+1
  3738  000F1C  C042  F045         	movff	___ftge@ff2+2,??___ftge+2
  3739  000F20  1E43               	comf	??___ftge,f,c
  3740  000F22  1E44               	comf	??___ftge+1,f,c
  3741  000F24  1E45               	comf	??___ftge+2,f,c
  3742  000F26  2A43               	incf	??___ftge,f,c
  3743  000F28  0E00               	movlw	0
  3744  000F2A  2244               	addwfc	??___ftge+1,f,c
  3745  000F2C  2245               	addwfc	??___ftge+2,f,c
  3746  000F2E  0E00               	movlw	0
  3747  000F30  2443               	addwf	??___ftge,w,c
  3748  000F32  6E40               	movwf	___ftge@ff2,c
  3749  000F34  0E00               	movlw	0
  3750  000F36  2044               	addwfc	??___ftge+1,w,c
  3751  000F38  6E41               	movwf	___ftge@ff2+1,c
  3752  000F3A  0E80               	movlw	128
  3753  000F3C  2045               	addwfc	??___ftge+2,w,c
  3754  000F3E  6E42               	movwf	___ftge@ff2+2,c
  3755  000F40  D000               	goto	l2856
  3756  000F42                     l2856:
  3757  000F42  0E00               	movlw	0
  3758  000F44  1A3D               	xorwf	___ftge@ff1,f,c
  3759  000F46  0E00               	movlw	0
  3760  000F48  1A3E               	xorwf	___ftge@ff1+1,f,c
  3761  000F4A  0E80               	movlw	128
  3762  000F4C  1A3F               	xorwf	___ftge@ff1+2,f,c
  3763  000F4E  0E00               	movlw	0
  3764  000F50  1A40               	xorwf	___ftge@ff2,f,c
  3765  000F52  0E00               	movlw	0
  3766  000F54  1A41               	xorwf	___ftge@ff2+1,f,c
  3767  000F56  0E80               	movlw	128
  3768  000F58  1A42               	xorwf	___ftge@ff2+2,f,c
  3769  000F5A  5040               	movf	___ftge@ff2,w,c
  3770  000F5C  5C3D               	subwf	___ftge@ff1,w,c
  3771  000F5E  5041               	movf	___ftge@ff2+1,w,c
  3772  000F60  583E               	subwfb	___ftge@ff1+1,w,c
  3773  000F62  5042               	movf	___ftge@ff2+2,w,c
  3774  000F64  583F               	subwfb	___ftge@ff1+2,w,c
  3775  000F66  B0D8               	btfsc	status,0,c
  3776  000F68  D002               	goto	l2862
  3777  000F6A  90D8               	bcf	status,0,c
  3778  000F6C  D002               	goto	l830
  3779  000F6E                     l2862:
  3780  000F6E  80D8               	bsf	status,0,c
  3781  000F70  D000               	goto	l830
  3782  000F72                     l830:
  3783  000F72  0012               	return		;funcret
  3784  000F74                     __end_of___ftge:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           indf1	equ	0xFE7
  3795                           fsr1h	equ	0xFE2
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function _fdcMeas *****************
  3804 ;; Defined at:
  3805 ;;		line 101 in file "fdc1004.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  chx_reg         1    wreg     unsigned char 
  3808 ;;  msb1            2   52[COMRAM] PTR unsigned char 
  3809 ;;		 -> main@msb1(1), 
  3810 ;;  msb2            2   54[COMRAM] PTR unsigned char 
  3811 ;;		 -> main@msb2(1), 
  3812 ;;  lsb             2   56[COMRAM] PTR unsigned char 
  3813 ;;		 -> main@lsb(1), 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  chx_reg         1   63[COMRAM] unsigned char 
  3816 ;;  buf             2   64[COMRAM] PTR unsigned char 
  3817 ;;		 -> fdcRead@val(2), 
  3818 ;;  addr            1   62[COMRAM] unsigned char 
  3819 ;;  offset          1   61[COMRAM] unsigned char 
  3820 ;;  done            1   60[COMRAM] unsigned char 
  3821 ;; Return value:  Size  Location     Type
  3822 ;;		None               void
  3823 ;; Registers used:
  3824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3830 ;;      Params:         6       0       0       0       0       0       0
  3831 ;;      Locals:         6       0       0       0       0       0       0
  3832 ;;      Temps:          2       0       0       0       0       0       0
  3833 ;;      Totals:        14       0       0       0       0       0       0
  3834 ;;Total ram usage:       14 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    6
  3837 ;; This function calls:
  3838 ;;		___awdiv
  3839 ;;		_fdcRead
  3840 ;;		_fdcWrite
  3841 ;; This function is called by:
  3842 ;;		_main
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text22
  3847  000B7E                     __ptext22:
  3848                           	opt stack 0
  3849  000B7E                     _fdcMeas:
  3850                           	opt stack 24
  3851                           
  3852                           ;incstack = 0
  3853                           ;fdcMeas@chx_reg stored from wreg
  3854  000B7E  6E40               	movwf	fdcMeas@chx_reg,c
  3855                           
  3856                           ;fdc1004.c: 102: unsigned char done = 0,*buf;
  3857  000B80  0E00               	movlw	0
  3858  000B82  6E3D               	movwf	fdcMeas@done,c
  3859                           
  3860                           ;fdc1004.c: 103: unsigned char addr,offset;
  3861                           ;fdc1004.c: 104: offset = chx_reg/2;
  3862  000B84  C040  F023         	movff	fdcMeas@chx_reg,___awdiv@dividend
  3863  000B88  6A24               	clrf	___awdiv@dividend+1,c
  3864  000B8A  0E00               	movlw	0
  3865  000B8C  6E26               	movwf	___awdiv@divisor+1,c
  3866  000B8E  0E02               	movlw	2
  3867  000B90  6E25               	movwf	___awdiv@divisor,c
  3868  000B92  ECBA  F007         	call	___awdiv	;wreg free
  3869  000B96  5023               	movf	?___awdiv,w,c
  3870  000B98  6E3E               	movwf	fdcMeas@offset,c
  3871                           
  3872                           ;fdc1004.c: 105: addr = 1<<(7-offset);
  3873  000B9A  503E               	movf	fdcMeas@offset,w,c
  3874  000B9C  0800               	sublw	0
  3875  000B9E  6E3B               	movwf	??_fdcMeas& (0+255),c
  3876  000BA0  0E07               	movlw	7
  3877  000BA2  263B               	addwf	??_fdcMeas,f,c
  3878  000BA4  0E01               	movlw	1
  3879  000BA6  6E3C               	movwf	(??_fdcMeas+1)& (0+255),c
  3880  000BA8  2A3B               	incf	??_fdcMeas,f,c
  3881  000BAA  D002               	goto	u2624
  3882  000BAC                     u2625:
  3883  000BAC  90D8               	bcf	status,0,c
  3884  000BAE  363C               	rlcf	??_fdcMeas+1,f,c
  3885  000BB0                     u2624:
  3886  000BB0  2E3B               	decfsz	??_fdcMeas,f,c
  3887  000BB2  D7FC               	goto	u2625
  3888  000BB4  503C               	movf	??_fdcMeas+1,w,c
  3889  000BB6  6E3F               	movwf	fdcMeas@addr,c
  3890                           
  3891                           ;fdc1004.c: 106: fdcWrite(0x0C,0b00001100,addr);
  3892  000BB8  0E0C               	movlw	12
  3893  000BBA  6E2C               	movwf	fdcWrite@msb,c
  3894  000BBC  C03F  F02D         	movff	fdcMeas@addr,fdcWrite@lsb
  3895  000BC0  0E0C               	movlw	12
  3896  000BC2  EC9C  F00A         	call	_fdcWrite
  3897                           
  3898                           ;fdc1004.c: 108: while(!done){
  3899  000BC6  D052               	goto	l3224
  3900  000BC8                     l3206:
  3901                           
  3902                           ;fdc1004.c: 109: addr = 1<<(3-offset);
  3903  000BC8  503E               	movf	fdcMeas@offset,w,c
  3904  000BCA  0800               	sublw	0
  3905  000BCC  6E3B               	movwf	??_fdcMeas& (0+255),c
  3906  000BCE  0E03               	movlw	3
  3907  000BD0  263B               	addwf	??_fdcMeas,f,c
  3908  000BD2  0E01               	movlw	1
  3909  000BD4  6E3C               	movwf	(??_fdcMeas+1)& (0+255),c
  3910  000BD6  2A3B               	incf	??_fdcMeas,f,c
  3911  000BD8  D002               	goto	u2634
  3912  000BDA                     u2635:
  3913  000BDA  90D8               	bcf	status,0,c
  3914  000BDC  363C               	rlcf	??_fdcMeas+1,f,c
  3915  000BDE                     u2634:
  3916  000BDE  2E3B               	decfsz	??_fdcMeas,f,c
  3917  000BE0  D7FC               	goto	u2635
  3918  000BE2  503C               	movf	??_fdcMeas+1,w,c
  3919  000BE4  6E3F               	movwf	fdcMeas@addr,c
  3920                           
  3921                           ;fdc1004.c: 110: buf = fdcRead(0x0C);
  3922  000BE6  0E0C               	movlw	12
  3923  000BE8  EC4F  F008         	call	_fdcRead
  3924  000BEC  C02C  F041         	movff	?_fdcRead,fdcMeas@buf
  3925  000BF0  C02D  F042         	movff	?_fdcRead+1,fdcMeas@buf+1
  3926                           
  3927                           ;fdc1004.c: 111: if(buf[1]&(addr)){
  3928  000BF4  EE20 F001          	lfsr	2,1
  3929  000BF8  5041               	movf	fdcMeas@buf,w,c
  3930  000BFA  26D9               	addwf	fsr2l,f,c
  3931  000BFC  5042               	movf	fdcMeas@buf+1,w,c
  3932  000BFE  22DA               	addwfc	fsr2h,f,c
  3933  000C00  50DF               	movf	indf2,w,c
  3934  000C02  143F               	andwf	fdcMeas@addr,w,c
  3935  000C04  0900               	iorlw	0
  3936  000C06  B4D8               	btfsc	status,2,c
  3937  000C08  D031               	goto	l3224
  3938                           
  3939                           ;fdc1004.c: 112: buf = fdcRead(chx_reg);
  3940  000C0A  5040               	movf	fdcMeas@chx_reg,w,c
  3941  000C0C  EC4F  F008         	call	_fdcRead
  3942  000C10  C02C  F041         	movff	?_fdcRead,fdcMeas@buf
  3943  000C14  C02D  F042         	movff	?_fdcRead+1,fdcMeas@buf+1
  3944                           
  3945                           ;fdc1004.c: 113: *msb1 = buf[0];
  3946  000C18  C041  FFD9         	movff	fdcMeas@buf,fsr2l
  3947  000C1C  C042  FFDA         	movff	fdcMeas@buf+1,fsr2h
  3948  000C20  C035  FFE1         	movff	fdcMeas@msb1,fsr1l
  3949  000C24  C036  FFE2         	movff	fdcMeas@msb1+1,fsr1h
  3950  000C28  CFDF FFE7          	movff	indf2,indf1
  3951                           
  3952                           ;fdc1004.c: 114: *msb2 = buf[1];
  3953  000C2C  EE20 F001          	lfsr	2,1
  3954  000C30  5041               	movf	fdcMeas@buf,w,c
  3955  000C32  26D9               	addwf	fsr2l,f,c
  3956  000C34  5042               	movf	fdcMeas@buf+1,w,c
  3957  000C36  22DA               	addwfc	fsr2h,f,c
  3958  000C38  C037  FFE1         	movff	fdcMeas@msb2,fsr1l
  3959  000C3C  C038  FFE2         	movff	fdcMeas@msb2+1,fsr1h
  3960  000C40  CFDF FFE7          	movff	indf2,indf1
  3961                           
  3962                           ;fdc1004.c: 115: buf = fdcRead(chx_reg+1);
  3963  000C44  2840               	incf	fdcMeas@chx_reg,w,c
  3964  000C46  EC4F  F008         	call	_fdcRead
  3965  000C4A  C02C  F041         	movff	?_fdcRead,fdcMeas@buf
  3966  000C4E  C02D  F042         	movff	?_fdcRead+1,fdcMeas@buf+1
  3967                           
  3968                           ;fdc1004.c: 116: *lsb = buf[0];
  3969  000C52  C041  FFD9         	movff	fdcMeas@buf,fsr2l
  3970  000C56  C042  FFDA         	movff	fdcMeas@buf+1,fsr2h
  3971  000C5A  C039  FFE1         	movff	fdcMeas@lsb,fsr1l
  3972  000C5E  C03A  FFE2         	movff	fdcMeas@lsb+1,fsr1h
  3973  000C62  CFDF FFE7          	movff	indf2,indf1
  3974                           
  3975                           ;fdc1004.c: 117: done = 1;
  3976  000C66  0E01               	movlw	1
  3977  000C68  6E3D               	movwf	fdcMeas@done,c
  3978  000C6A  D000               	goto	l3224
  3979  000C6C                     l3224:
  3980  000C6C  503D               	movf	fdcMeas@done,w,c
  3981  000C6E  B4D8               	btfsc	status,2,c
  3982  000C70  D7AB               	goto	l3206
  3983  000C72  0012               	return		;funcret
  3984  000C74                     __end_of_fdcMeas:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           indf1	equ	0xFE7
  3995                           fsr1h	equ	0xFE2
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _fdcRead *****************
  4004 ;; Defined at:
  4005 ;;		line 56 in file "fdc1004.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  reg             1    wreg     unsigned char 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  reg             1   46[COMRAM] unsigned char 
  4010 ;;  i               1   51[COMRAM] unsigned char 
  4011 ;;  ack             2   49[COMRAM] unsigned char [2]
  4012 ;;  header          2   47[COMRAM] unsigned char [2]
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  2   43[COMRAM] PTR unsigned char 
  4015 ;; Registers used:
  4016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4022 ;;      Params:         2       0       0       0       0       0       0
  4023 ;;      Locals:         6       0       0       0       0       0       0
  4024 ;;      Temps:          1       0       0       0       0       0       0
  4025 ;;      Totals:         9       0       0       0       0       0       0
  4026 ;;Total ram usage:        9 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    5
  4029 ;; This function calls:
  4030 ;;		_i2cIdle
  4031 ;;		_i2cStart
  4032 ;; This function is called by:
  4033 ;;		_main
  4034 ;;		_fdcMeas
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           	psect	text23
  4039  00109E                     __ptext23:
  4040                           	opt stack 0
  4041  00109E                     _fdcRead:
  4042                           	opt stack 25
  4043                           
  4044                           ;incstack = 0
  4045                           ;fdcRead@reg stored from wreg
  4046  00109E  6E2F               	movwf	fdcRead@reg,c
  4047                           
  4048                           ;fdc1004.c: 57: static unsigned char val[2];
  4049                           ;fdc1004.c: 58: unsigned char header[2],ack[2];
  4050                           ;fdc1004.c: 59: header[0] = 0b10100000;
  4051  0010A0  0EA0               	movlw	160
  4052  0010A2  6E30               	movwf	fdcRead@header,c
  4053                           
  4054                           ;fdc1004.c: 60: header[1] = reg;
  4055  0010A4  C02F  F031         	movff	fdcRead@reg,fdcRead@header+1
  4056                           
  4057                           ;fdc1004.c: 61: ack[0] = 0;
  4058  0010A8  0E00               	movlw	0
  4059  0010AA  6E32               	movwf	fdcRead@ack,c
  4060                           
  4061                           ;fdc1004.c: 62: ack[1] = 1;
  4062  0010AC  0E01               	movlw	1
  4063  0010AE  6E33               	movwf	fdcRead@ack+1,c
  4064                           
  4065                           ;fdc1004.c: 63: i2cStart(header,2);
  4066  0010B0  0E30               	movlw	low fdcRead@header
  4067  0010B2  6E24               	movwf	i2cStart@input,c
  4068  0010B4  0E00               	movlw	high fdcRead@header
  4069  0010B6  6E25               	movwf	i2cStart@input+1,c
  4070  0010B8  0E02               	movlw	2
  4071  0010BA  6E26               	movwf	i2cStart@len,c
  4072  0010BC  EC43  F00A         	call	_i2cStart	;wreg free
  4073                           
  4074                           ;fdc1004.c: 64: SSPCON2bits.RSEN = 1;
  4075  0010C0  82C5               	bsf	4037,1,c	;volatile
  4076                           
  4077                           ;fdc1004.c: 65: i2cIdle();
  4078  0010C2  EC05  F00B         	call	_i2cIdle	;wreg free
  4079                           
  4080                           ;fdc1004.c: 66: SSPBUF = 0b10100001;
  4081  0010C6  0EA1               	movlw	161
  4082  0010C8  6EC9               	movwf	4041,c	;volatile
  4083                           
  4084                           ;fdc1004.c: 67: i2cIdle();
  4085  0010CA  EC05  F00B         	call	_i2cIdle	;wreg free
  4086                           
  4087                           ;fdc1004.c: 68: for(char i=0;i<2;i++){
  4088  0010CE  0E00               	movlw	0
  4089  0010D0  6E34               	movwf	fdcRead@i,c
  4090  0010D2  D023               	goto	l3048
  4091  0010D4  D025               	goto	l424
  4092  0010D6                     l423:
  4093                           
  4094                           ;fdc1004.c: 69: SSPCON2bits.RCEN = 1;
  4095  0010D6  86C5               	bsf	4037,3,c	;volatile
  4096                           
  4097                           ;fdc1004.c: 70: i2cIdle();
  4098  0010D8  EC05  F00B         	call	_i2cIdle	;wreg free
  4099                           
  4100                           ;fdc1004.c: 71: val[i] = SSPBUF;
  4101  0010DC  5034               	movf	fdcRead@i,w,c
  4102  0010DE  0D01               	mullw	1
  4103  0010E0  0E5C               	movlw	low fdcRead@val
  4104  0010E2  24F3               	addwf	prodl,w,c
  4105  0010E4  6ED9               	movwf	fsr2l,c
  4106  0010E6  0E00               	movlw	high fdcRead@val
  4107  0010E8  20F4               	addwfc	prodh,w,c
  4108  0010EA  6EDA               	movwf	fsr2h,c
  4109  0010EC  CFC9 FFDF          	movff	4041,indf2	;volatile
  4110                           
  4111                           ;fdc1004.c: 72: SSPCON2bits.ACKDT = ack[i];
  4112  0010F0  5034               	movf	fdcRead@i,w,c
  4113  0010F2  0D01               	mullw	1
  4114  0010F4  0E32               	movlw	low fdcRead@ack
  4115  0010F6  24F3               	addwf	prodl,w,c
  4116  0010F8  6ED9               	movwf	fsr2l,c
  4117  0010FA  0E00               	movlw	high fdcRead@ack
  4118  0010FC  20F4               	addwfc	prodh,w,c
  4119  0010FE  6EDA               	movwf	fsr2h,c
  4120  001100  50DF               	movf	indf2,w,c
  4121  001102  6E2E               	movwf	??_fdcRead& (0+255),c
  4122  001104  3A2E               	swapf	??_fdcRead,f,c
  4123  001106  462E               	rlncf	??_fdcRead,f,c
  4124  001108  50C5               	movf	4037,w,c	;volatile
  4125  00110A  182E               	xorwf	??_fdcRead,w,c
  4126  00110C  0BDF               	andlw	-33
  4127  00110E  182E               	xorwf	??_fdcRead,w,c
  4128  001110  6EC5               	movwf	4037,c	;volatile
  4129                           
  4130                           ;fdc1004.c: 73: SSPCON2bits.ACKEN = 1;
  4131  001112  88C5               	bsf	4037,4,c	;volatile
  4132                           
  4133                           ;fdc1004.c: 74: i2cIdle();
  4134  001114  EC05  F00B         	call	_i2cIdle	;wreg free
  4135  001118  2A34               	incf	fdcRead@i,f,c
  4136  00111A                     l3048:
  4137  00111A  0E01               	movlw	1
  4138  00111C  6434               	cpfsgt	fdcRead@i,c
  4139  00111E  D7DB               	goto	l423
  4140  001120                     l424:
  4141                           
  4142                           ;fdc1004.c: 75: }
  4143                           ;fdc1004.c: 76: SSPCON2bits.PEN = 1;
  4144  001120  84C5               	bsf	4037,2,c	;volatile
  4145                           
  4146                           ;fdc1004.c: 77: i2cIdle();
  4147  001122  EC05  F00B         	call	_i2cIdle	;wreg free
  4148                           
  4149                           ;fdc1004.c: 78: return val;
  4150  001126  0E5C               	movlw	low fdcRead@val
  4151  001128  6E2C               	movwf	?_fdcRead,c
  4152  00112A  0E00               	movlw	high fdcRead@val
  4153  00112C  6E2D               	movwf	?_fdcRead+1,c
  4154  00112E  D000               	goto	l425
  4155  001130                     l425:
  4156  001130  0012               	return		;funcret
  4157  001132                     __end_of_fdcRead:
  4158                           	opt stack 0
  4159                           tblptru	equ	0xFF8
  4160                           tblptrh	equ	0xFF7
  4161                           tblptrl	equ	0xFF6
  4162                           tablat	equ	0xFF5
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           indf1	equ	0xFE7
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           fsr2h	equ	0xFDA
  4173                           fsr2l	equ	0xFD9
  4174                           status	equ	0xFD8
  4175                           
  4176 ;; *************** function ___awdiv *****************
  4177 ;; Defined at:
  4178 ;;		line 8 in file "/opt/microchip/xc8/v1.34/sources/common/awdiv.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;  dividend        2   34[COMRAM] int 
  4181 ;;  divisor         2   36[COMRAM] int 
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;  quotient        2   40[COMRAM] int 
  4184 ;;  sign            1   39[COMRAM] unsigned char 
  4185 ;;  counter         1   38[COMRAM] unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  2   34[COMRAM] int 
  4188 ;; Registers used:
  4189 ;;		wreg, status,2, status,0
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4195 ;;      Params:         4       0       0       0       0       0       0
  4196 ;;      Locals:         4       0       0       0       0       0       0
  4197 ;;      Temps:          0       0       0       0       0       0       0
  4198 ;;      Totals:         8       0       0       0       0       0       0
  4199 ;;Total ram usage:        8 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    3
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_fdcMeas
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text24
  4210  000F74                     __ptext24:
  4211                           	opt stack 0
  4212  000F74                     ___awdiv:
  4213                           	opt stack 26
  4214                           
  4215                           ;incstack = 0
  4216  000F74  0E00               	movlw	0
  4217  000F76  6E28               	movwf	___awdiv@sign,c
  4218  000F78  AE26               	btfss	___awdiv@divisor+1,7,c
  4219  000F7A  D007               	goto	l3130
  4220  000F7C  6C25               	negf	___awdiv@divisor,c
  4221  000F7E  1E26               	comf	___awdiv@divisor+1,f,c
  4222  000F80  B0D8               	btfsc	status,0,c
  4223  000F82  2A26               	incf	___awdiv@divisor+1,f,c
  4224  000F84  0E01               	movlw	1
  4225  000F86  6E28               	movwf	___awdiv@sign,c
  4226  000F88  D000               	goto	l3130
  4227  000F8A                     l3130:
  4228  000F8A  AE24               	btfss	___awdiv@dividend+1,7,c
  4229  000F8C  D007               	goto	l3136
  4230  000F8E  6C23               	negf	___awdiv@dividend,c
  4231  000F90  1E24               	comf	___awdiv@dividend+1,f,c
  4232  000F92  B0D8               	btfsc	status,0,c
  4233  000F94  2A24               	incf	___awdiv@dividend+1,f,c
  4234  000F96  0E01               	movlw	1
  4235  000F98  1A28               	xorwf	___awdiv@sign,f,c
  4236  000F9A  D000               	goto	l3136
  4237  000F9C                     l3136:
  4238  000F9C  0E00               	movlw	0
  4239  000F9E  6E2A               	movwf	___awdiv@quotient+1,c
  4240  000FA0  0E00               	movlw	0
  4241  000FA2  6E29               	movwf	___awdiv@quotient,c
  4242  000FA4  5025               	movf	___awdiv@divisor,w,c
  4243  000FA6  1026               	iorwf	___awdiv@divisor+1,w,c
  4244  000FA8  B4D8               	btfsc	status,2,c
  4245  000FAA  D021               	goto	l3158
  4246  000FAC  0E01               	movlw	1
  4247  000FAE  6E27               	movwf	___awdiv@counter,c
  4248  000FB0  D005               	goto	l3144
  4249  000FB2                     l3142:
  4250  000FB2  90D8               	bcf	status,0,c
  4251  000FB4  3625               	rlcf	___awdiv@divisor,f,c
  4252  000FB6  3626               	rlcf	___awdiv@divisor+1,f,c
  4253  000FB8  2A27               	incf	___awdiv@counter,f,c
  4254  000FBA  D000               	goto	l3144
  4255  000FBC                     l3144:
  4256  000FBC  BE26               	btfsc	___awdiv@divisor+1,7,c
  4257  000FBE  D002               	goto	l3146
  4258  000FC0  D7F8               	goto	l3142
  4259  000FC2  D000               	goto	l3146
  4260  000FC4                     l3146:
  4261  000FC4  90D8               	bcf	status,0,c
  4262  000FC6  3629               	rlcf	___awdiv@quotient,f,c
  4263  000FC8  362A               	rlcf	___awdiv@quotient+1,f,c
  4264  000FCA  5025               	movf	___awdiv@divisor,w,c
  4265  000FCC  5C23               	subwf	___awdiv@dividend,w,c
  4266  000FCE  5026               	movf	___awdiv@divisor+1,w,c
  4267  000FD0  5824               	subwfb	___awdiv@dividend+1,w,c
  4268  000FD2  A0D8               	btfss	status,0,c
  4269  000FD4  D006               	goto	l3154
  4270  000FD6  5025               	movf	___awdiv@divisor,w,c
  4271  000FD8  5E23               	subwf	___awdiv@dividend,f,c
  4272  000FDA  5026               	movf	___awdiv@divisor+1,w,c
  4273  000FDC  5A24               	subwfb	___awdiv@dividend+1,f,c
  4274  000FDE  8029               	bsf	___awdiv@quotient,0,c
  4275  000FE0  D000               	goto	l3154
  4276  000FE2                     l3154:
  4277  000FE2  90D8               	bcf	status,0,c
  4278  000FE4  3226               	rrcf	___awdiv@divisor+1,f,c
  4279  000FE6  3225               	rrcf	___awdiv@divisor,f,c
  4280  000FE8  2E27               	decfsz	___awdiv@counter,f,c
  4281  000FEA  D7EC               	goto	l3146
  4282  000FEC  D000               	goto	l3158
  4283  000FEE                     l3158:
  4284  000FEE  5028               	movf	___awdiv@sign,w,c
  4285  000FF0  B4D8               	btfsc	status,2,c
  4286  000FF2  D005               	goto	l3162
  4287  000FF4  6C29               	negf	___awdiv@quotient,c
  4288  000FF6  1E2A               	comf	___awdiv@quotient+1,f,c
  4289  000FF8  B0D8               	btfsc	status,0,c
  4290  000FFA  2A2A               	incf	___awdiv@quotient+1,f,c
  4291  000FFC  D000               	goto	l3162
  4292  000FFE                     l3162:
  4293  000FFE  C029  F023         	movff	___awdiv@quotient,?___awdiv
  4294  001002  C02A  F024         	movff	___awdiv@quotient+1,?___awdiv+1
  4295  001006  D000               	goto	l634
  4296  001008                     l634:
  4297  001008  0012               	return		;funcret
  4298  00100A                     __end_of___awdiv:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           indf1	equ	0xFE7
  4309                           fsr1h	equ	0xFE2
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _fdcInit *****************
  4318 ;; Defined at:
  4319 ;;		line 89 in file "fdc1004.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;		None
  4324 ;; Return value:  Size  Location     Type
  4325 ;;		None               void
  4326 ;; Registers used:
  4327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4333 ;;      Params:         0       0       0       0       0       0       0
  4334 ;;      Locals:         0       0       0       0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0
  4336 ;;      Totals:         0       0       0       0       0       0       0
  4337 ;;Total ram usage:        0 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    6
  4340 ;; This function calls:
  4341 ;;		_fdcWrite
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text25
  4348  001248                     __ptext25:
  4349                           	opt stack 0
  4350  001248                     _fdcInit:
  4351                           	opt stack 24
  4352                           
  4353                           ;fdc1004.c: 91: fdcWrite(0x08,0b00010000,0);
  4354                           
  4355                           ;incstack = 0
  4356  001248  0E10               	movlw	16
  4357  00124A  6E2C               	movwf	fdcWrite@msb,c
  4358  00124C  0E00               	movlw	0
  4359  00124E  6E2D               	movwf	fdcWrite@lsb,c
  4360  001250  0E08               	movlw	8
  4361  001252  EC9C  F00A         	call	_fdcWrite
  4362                           
  4363                           ;fdc1004.c: 92: fdcWrite(0x09,0b00110000,0);
  4364  001256  0E30               	movlw	48
  4365  001258  6E2C               	movwf	fdcWrite@msb,c
  4366  00125A  0E00               	movlw	0
  4367  00125C  6E2D               	movwf	fdcWrite@lsb,c
  4368  00125E  0E09               	movlw	9
  4369  001260  EC9C  F00A         	call	_fdcWrite
  4370                           
  4371                           ;fdc1004.c: 93: fdcWrite(0x0A,0b01010000,0);
  4372  001264  0E50               	movlw	80
  4373  001266  6E2C               	movwf	fdcWrite@msb,c
  4374  001268  0E00               	movlw	0
  4375  00126A  6E2D               	movwf	fdcWrite@lsb,c
  4376  00126C  0E0A               	movlw	10
  4377  00126E  EC9C  F00A         	call	_fdcWrite
  4378                           
  4379                           ;fdc1004.c: 94: fdcWrite(0x0B,0b01110000,0);
  4380  001272  0E70               	movlw	112
  4381  001274  6E2C               	movwf	fdcWrite@msb,c
  4382  001276  0E00               	movlw	0
  4383  001278  6E2D               	movwf	fdcWrite@lsb,c
  4384  00127A  0E0B               	movlw	11
  4385  00127C  EC9C  F00A         	call	_fdcWrite
  4386                           
  4387                           ;fdc1004.c: 95: fdcWrite(0x0C,0b00001100,0b10000000);
  4388  001280  0E0C               	movlw	12
  4389  001282  6E2C               	movwf	fdcWrite@msb,c
  4390  001284  0E80               	movlw	128
  4391  001286  6E2D               	movwf	fdcWrite@lsb,c
  4392  001288  0E0C               	movlw	12
  4393  00128A  EC9C  F00A         	call	_fdcWrite
  4394                           
  4395                           ;fdc1004.c: 96: fdcWrite(0x0D,0b11011001,0);
  4396  00128E  0ED9               	movlw	217
  4397  001290  6E2C               	movwf	fdcWrite@msb,c
  4398  001292  0E00               	movlw	0
  4399  001294  6E2D               	movwf	fdcWrite@lsb,c
  4400  001296  0E0D               	movlw	13
  4401  001298  EC9C  F00A         	call	_fdcWrite
  4402                           
  4403                           ;fdc1004.c: 97: fdcWrite(0x0E,0b11011001,0);
  4404  00129C  0ED9               	movlw	217
  4405  00129E  6E2C               	movwf	fdcWrite@msb,c
  4406  0012A0  0E00               	movlw	0
  4407  0012A2  6E2D               	movwf	fdcWrite@lsb,c
  4408  0012A4  0E0E               	movlw	14
  4409  0012A6  EC9C  F00A         	call	_fdcWrite
  4410                           
  4411                           ;fdc1004.c: 98: fdcWrite(0x0F,0b11011001,0);
  4412  0012AA  0ED9               	movlw	217
  4413  0012AC  6E2C               	movwf	fdcWrite@msb,c
  4414  0012AE  0E00               	movlw	0
  4415  0012B0  6E2D               	movwf	fdcWrite@lsb,c
  4416  0012B2  0E0F               	movlw	15
  4417  0012B4  EC9C  F00A         	call	_fdcWrite
  4418                           
  4419                           ;fdc1004.c: 99: fdcWrite(0x10,0b11011001,0);
  4420  0012B8  0ED9               	movlw	217
  4421  0012BA  6E2C               	movwf	fdcWrite@msb,c
  4422  0012BC  0E00               	movlw	0
  4423  0012BE  6E2D               	movwf	fdcWrite@lsb,c
  4424  0012C0  0E10               	movlw	16
  4425  0012C2  EC9C  F00A         	call	_fdcWrite
  4426  0012C6  0012               	return		;funcret
  4427  0012C8                     __end_of_fdcInit:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           prodh	equ	0xFF4
  4434                           prodl	equ	0xFF3
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           indf1	equ	0xFE7
  4438                           fsr1h	equ	0xFE2
  4439                           fsr1l	equ	0xFE1
  4440                           indf2	equ	0xFDF
  4441                           postinc2	equ	0xFDE
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function _fdcWrite *****************
  4447 ;; Defined at:
  4448 ;;		line 81 in file "fdc1004.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  reg             1    wreg     unsigned char 
  4451 ;;  msb             1   43[COMRAM] unsigned char 
  4452 ;;  lsb             1   44[COMRAM] unsigned char 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  reg             1   45[COMRAM] unsigned char 
  4455 ;;  input           4   46[COMRAM] unsigned char [4]
  4456 ;; Return value:  Size  Location     Type
  4457 ;;		None               void
  4458 ;; Registers used:
  4459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4465 ;;      Params:         2       0       0       0       0       0       0
  4466 ;;      Locals:         5       0       0       0       0       0       0
  4467 ;;      Temps:          0       0       0       0       0       0       0
  4468 ;;      Totals:         7       0       0       0       0       0       0
  4469 ;;Total ram usage:        7 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    5
  4472 ;; This function calls:
  4473 ;;		_i2cIdle
  4474 ;;		_i2cStart
  4475 ;; This function is called by:
  4476 ;;		_fdcInit
  4477 ;;		_fdcMeas
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text26
  4482  001538                     __ptext26:
  4483                           	opt stack 0
  4484  001538                     _fdcWrite:
  4485                           	opt stack 24
  4486                           
  4487                           ;incstack = 0
  4488                           ;fdcWrite@reg stored from wreg
  4489  001538  6E2E               	movwf	fdcWrite@reg,c
  4490                           
  4491                           ;fdc1004.c: 82: unsigned char input[4];
  4492                           ;fdc1004.c: 83: input[0] = 0b10100000; input[1] = reg; input[2] = msb; input[3] = lsb;
  4493  00153A  0EA0               	movlw	160
  4494  00153C  6E2F               	movwf	fdcWrite@input,c
  4495  00153E  C02E  F030         	movff	fdcWrite@reg,fdcWrite@input+1
  4496  001542  C02C  F031         	movff	fdcWrite@msb,fdcWrite@input+2
  4497  001546  C02D  F032         	movff	fdcWrite@lsb,fdcWrite@input+3
  4498                           
  4499                           ;fdc1004.c: 84: i2cStart(input,4);
  4500  00154A  0E2F               	movlw	low fdcWrite@input
  4501  00154C  6E24               	movwf	i2cStart@input,c
  4502  00154E  0E00               	movlw	high fdcWrite@input
  4503  001550  6E25               	movwf	i2cStart@input+1,c
  4504  001552  0E04               	movlw	4
  4505  001554  6E26               	movwf	i2cStart@len,c
  4506  001556  EC43  F00A         	call	_i2cStart	;wreg free
  4507                           
  4508                           ;fdc1004.c: 85: SSPCON2bits.PEN = 1;
  4509  00155A  84C5               	bsf	4037,2,c	;volatile
  4510                           
  4511                           ;fdc1004.c: 86: i2cIdle();
  4512  00155C  EC05  F00B         	call	_i2cIdle	;wreg free
  4513  001560  0012               	return		;funcret
  4514  001562                     __end_of_fdcWrite:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           indf1	equ	0xFE7
  4525                           fsr1h	equ	0xFE2
  4526                           fsr1l	equ	0xFE1
  4527                           indf2	equ	0xFDF
  4528                           postinc2	equ	0xFDE
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _i2cStart *****************
  4534 ;; Defined at:
  4535 ;;		line 36 in file "i2clib.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  input           2   35[COMRAM] PTR unsigned char 
  4538 ;;		 -> fdcWrite@input(4), fdcRead@header(2), 
  4539 ;;  len             1   37[COMRAM] unsigned char 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  i               2   41[COMRAM] int 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;		None               void
  4544 ;; Registers used:
  4545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4551 ;;      Params:         3       0       0       0       0       0       0
  4552 ;;      Locals:         2       0       0       0       0       0       0
  4553 ;;      Temps:          3       0       0       0       0       0       0
  4554 ;;      Totals:         8       0       0       0       0       0       0
  4555 ;;Total ram usage:        8 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    4
  4558 ;; This function calls:
  4559 ;;		_i2cIdle
  4560 ;;		_i2cInit
  4561 ;; This function is called by:
  4562 ;;		_fdcRead
  4563 ;;		_fdcWrite
  4564 ;;		_writePot
  4565 ;;		_readPot
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           	psect	text27
  4570  001486                     __ptext27:
  4571                           	opt stack 0
  4572  001486                     _i2cStart:
  4573                           	opt stack 25
  4574                           
  4575                           ;i2clib.c: 37: i2cInit();
  4576                           
  4577                           ;incstack = 0
  4578  001486  EC20  F00B         	call	_i2cInit	;wreg free
  4579                           
  4580                           ;i2clib.c: 38: SSPCON2bits.SEN = 1;
  4581  00148A  80C5               	bsf	4037,0,c	;volatile
  4582                           
  4583                           ;i2clib.c: 39: i2cIdle();
  4584  00148C  EC05  F00B         	call	_i2cIdle	;wreg free
  4585                           
  4586                           ;i2clib.c: 40: for(int i = 0;i<len;i++){
  4587  001490  0E00               	movlw	0
  4588  001492  6E2B               	movwf	i2cStart@i+1,c
  4589  001494  0E00               	movlw	0
  4590  001496  6E2A               	movwf	i2cStart@i,c
  4591  001498  D00D               	goto	l2952
  4592  00149A                     l2946:
  4593                           
  4594                           ;i2clib.c: 41: SSPBUF = input[i];
  4595  00149A  502A               	movf	i2cStart@i,w,c
  4596  00149C  2424               	addwf	i2cStart@input,w,c
  4597  00149E  6ED9               	movwf	fsr2l,c
  4598  0014A0  502B               	movf	i2cStart@i+1,w,c
  4599  0014A2  2025               	addwfc	i2cStart@input+1,w,c
  4600  0014A4  6EDA               	movwf	fsr2h,c
  4601  0014A6  50DF               	movf	indf2,w,c
  4602  0014A8  6EC9               	movwf	4041,c	;volatile
  4603                           
  4604                           ;i2clib.c: 42: i2cIdle();
  4605  0014AA  EC05  F00B         	call	_i2cIdle	;wreg free
  4606  0014AE  4A2A               	infsnz	i2cStart@i,f,c
  4607  0014B0  2A2B               	incf	i2cStart@i+1,f,c
  4608  0014B2  D000               	goto	l2952
  4609  0014B4                     l2952:
  4610  0014B4  5026               	movf	i2cStart@len,w,c
  4611  0014B6  6E27               	movwf	??_i2cStart& (0+255),c
  4612  0014B8  6A28               	clrf	(??_i2cStart+1)& (0+255),c
  4613  0014BA  5027               	movf	??_i2cStart,w,c
  4614  0014BC  5C2A               	subwf	i2cStart@i,w,c
  4615  0014BE  502B               	movf	i2cStart@i+1,w,c
  4616  0014C0  0A80               	xorlw	128
  4617  0014C2  6E29               	movwf	(??_i2cStart+2)& (0+255),c
  4618  0014C4  5028               	movf	??_i2cStart+1,w,c
  4619  0014C6  0A80               	xorlw	128
  4620  0014C8  5829               	subwfb	(??_i2cStart+2)& (0+255),w,c
  4621  0014CA  A0D8               	btfss	status,0,c
  4622  0014CC  D7E6               	goto	l2946
  4623  0014CE  0012               	return		;funcret
  4624  0014D0                     __end_of_i2cStart:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           indf1	equ	0xFE7
  4635                           fsr1h	equ	0xFE2
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _i2cInit *****************
  4644 ;; Defined at:
  4645 ;;		line 22 in file "i2clib.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;		None               void
  4652 ;; Registers used:
  4653 ;;		wreg, status,2
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4659 ;;      Params:         0       0       0       0       0       0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0
  4661 ;;      Temps:          0       0       0       0       0       0       0
  4662 ;;      Totals:         0       0       0       0       0       0       0
  4663 ;;Total ram usage:        0 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    3
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_i2cStart
  4670 ;;		_main
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text28
  4675  001640                     __ptext28:
  4676                           	opt stack 0
  4677  001640                     _i2cInit:
  4678                           	opt stack 27
  4679                           
  4680                           ;i2clib.c: 23: SSPCON1bits.SSPEN = 0;
  4681                           
  4682                           ;incstack = 0
  4683  001640  9AC6               	bcf	4038,5,c	;volatile
  4684                           
  4685                           ;i2clib.c: 24: TRISCbits.RC3 = 1;
  4686  001642  8694               	bsf	3988,3,c	;volatile
  4687                           
  4688                           ;i2clib.c: 25: TRISCbits.RC4 = 1;
  4689  001644  8894               	bsf	3988,4,c	;volatile
  4690                           
  4691                           ;i2clib.c: 26: SSPCON1bits.SSPM = 0b1000;
  4692  001646  50C6               	movf	4038,w,c	;volatile
  4693  001648  0BF0               	andlw	-16
  4694  00164A  0908               	iorlw	8
  4695  00164C  6EC6               	movwf	4038,c	;volatile
  4696                           
  4697                           ;i2clib.c: 27: SSPSTATbits.SMP = 1;
  4698  00164E  8EC7               	bsf	4039,7,c	;volatile
  4699                           
  4700                           ;i2clib.c: 28: SSPADD = 9;
  4701  001650  0E09               	movlw	9
  4702  001652  6EC8               	movwf	4040,c	;volatile
  4703                           
  4704                           ;i2clib.c: 29: SSPCON1bits.SSPEN = 1;
  4705  001654  8AC6               	bsf	4038,5,c	;volatile
  4706  001656  0012               	return		;funcret
  4707  001658                     __end_of_i2cInit:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           prodh	equ	0xFF4
  4714                           prodl	equ	0xFF3
  4715                           postinc0	equ	0xFEE
  4716                           wreg	equ	0xFE8
  4717                           indf1	equ	0xFE7
  4718                           fsr1h	equ	0xFE2
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _i2cIdle *****************
  4727 ;; Defined at:
  4728 ;;		line 32 in file "i2clib.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;		None
  4733 ;; Return value:  Size  Location     Type
  4734 ;;		None               void
  4735 ;; Registers used:
  4736 ;;		wreg, status,2, status,0
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4742 ;;      Params:         0       0       0       0       0       0       0
  4743 ;;      Locals:         0       0       0       0       0       0       0
  4744 ;;      Temps:          1       0       0       0       0       0       0
  4745 ;;      Totals:         1       0       0       0       0       0       0
  4746 ;;Total ram usage:        1 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    3
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_i2cStart
  4753 ;;		_fdcRead
  4754 ;;		_fdcWrite
  4755 ;;		_writePot
  4756 ;;		_readPot
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text29
  4761  00160A                     __ptext29:
  4762                           	opt stack 0
  4763  00160A                     _i2cIdle:
  4764                           	opt stack 25
  4765                           
  4766                           ;i2clib.c: 33: while(SSPSTATbits.RW|(0x1F&SSPCON2));
  4767                           
  4768                           ;incstack = 0
  4769  00160A  D000               	goto	l2872
  4770  00160C                     l2872:
  4771  00160C  A4C7               	btfss	4039,2,c	;volatile
  4772  00160E  D003               	goto	u2270
  4773  001610  6A23               	clrf	??_i2cIdle& (0+255),c
  4774  001612  2A23               	incf	??_i2cIdle& (0+255),f,c
  4775  001614  D001               	goto	u2278
  4776  001616                     u2270:
  4777  001616  6A23               	clrf	??_i2cIdle& (0+255),c
  4778  001618                     u2278:
  4779  001618  50C5               	movf	4037,w,c	;volatile
  4780  00161A  0B1F               	andlw	31
  4781  00161C  1023               	iorwf	??_i2cIdle,w,c
  4782  00161E  0900               	iorlw	0
  4783  001620  A4D8               	btfss	status,2,c
  4784  001622  D7F4               	goto	l2872
  4785  001624  0012               	return		;funcret
  4786  001626                     __end_of_i2cIdle:
  4787                           	opt stack 0
  4788                           tblptru	equ	0xFF8
  4789                           tblptrh	equ	0xFF7
  4790                           tblptrl	equ	0xFF6
  4791                           tablat	equ	0xFF5
  4792                           prodh	equ	0xFF4
  4793                           prodl	equ	0xFF3
  4794                           postinc0	equ	0xFEE
  4795                           wreg	equ	0xFE8
  4796                           indf1	equ	0xFE7
  4797                           fsr1h	equ	0xFE2
  4798                           fsr1l	equ	0xFE1
  4799                           indf2	equ	0xFDF
  4800                           postinc2	equ	0xFDE
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function _configureOscillator *****************
  4806 ;; Defined at:
  4807 ;;		line 24 in file "system.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;		None
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;		None               void
  4814 ;; Registers used:
  4815 ;;		wreg, status,2
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4821 ;;      Params:         0       0       0       0       0       0       0
  4822 ;;      Locals:         0       0       0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0
  4824 ;;      Totals:         0       0       0       0       0       0       0
  4825 ;;Total ram usage:        0 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    3
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_main
  4832 ;; This function uses a non-reentrant model
  4833 ;;
  4834                           
  4835                           	psect	text30
  4836  001626                     __ptext30:
  4837                           	opt stack 0
  4838  001626                     _configureOscillator:
  4839                           	opt stack 27
  4840                           
  4841                           ;system.c: 26: OSCCONbits.IRCF = 0b110;
  4842                           
  4843                           ;incstack = 0
  4844  001626  50D3               	movf	4051,w,c	;volatile
  4845  001628  0B8F               	andlw	-113
  4846  00162A  0960               	iorlw	96
  4847  00162C  6ED3               	movwf	4051,c	;volatile
  4848                           
  4849                           ;system.c: 27: OSCCONbits.SCS = 0;
  4850  00162E  0EFC               	movlw	-4
  4851  001630  16D3               	andwf	4051,f,c	;volatile
  4852                           
  4853                           ;system.c: 28: OSCTUNEbits.PLLEN = 0;
  4854  001632  9C9B               	bcf	3995,6,c	;volatile
  4855                           
  4856                           ;system.c: 29: OSCTUNEbits.TUN = 0b0000;
  4857  001634  909B               	bcf	3995,0,c	;volatile
  4858  001636  929B               	bcf	3995,1,c	;volatile
  4859  001638  949B               	bcf	3995,2,c	;volatile
  4860  00163A  969B               	bcf	3995,3,c	;volatile
  4861  00163C  989B               	bcf	3995,4,c	;volatile
  4862  00163E  0012               	return		;funcret
  4863  001640                     __end_of_configureOscillator:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           indf1	equ	0xFE7
  4874                           fsr1h	equ	0xFE2
  4875                           fsr1l	equ	0xFE1
  4876                           indf2	equ	0xFDF
  4877                           postinc2	equ	0xFDE
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _configureInterrupts *****************
  4883 ;; Defined at:
  4884 ;;		line 33 in file "system.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		None
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4898 ;;      Params:         0       0       0       0       0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    3
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text31
  4913  0015B0                     __ptext31:
  4914                           	opt stack 0
  4915  0015B0                     _configureInterrupts:
  4916                           	opt stack 27
  4917                           
  4918                           ;system.c: 34: RCONbits.IPEN = 1;
  4919                           
  4920                           ;incstack = 0
  4921  0015B0  8ED0               	bsf	4048,7,c	;volatile
  4922                           
  4923                           ;system.c: 37: INTCONbits.GIE = 1;
  4924  0015B2  8EF2               	bsf	intcon,7,c	;volatile
  4925                           
  4926                           ;system.c: 38: INTCONbits.PEIE = 1;
  4927  0015B4  8CF2               	bsf	intcon,6,c	;volatile
  4928                           
  4929                           ;system.c: 39: PIE1bits.SSPIE = 1;
  4930  0015B6  869D               	bsf	3997,3,c	;volatile
  4931                           
  4932                           ;system.c: 40: PIE1bits.RCIE = 1;
  4933  0015B8  8A9D               	bsf	3997,5,c	;volatile
  4934                           
  4935                           ;system.c: 41: PIE1bits.ADIE = 1;
  4936  0015BA  8C9D               	bsf	3997,6,c	;volatile
  4937                           
  4938                           ;system.c: 42: PIE2bits.TMR3IE = 1;
  4939  0015BC  82A0               	bsf	4000,1,c	;volatile
  4940                           
  4941                           ;system.c: 43: PIE2bits.BCLIE = 1;
  4942  0015BE  86A0               	bsf	4000,3,c	;volatile
  4943                           
  4944                           ;system.c: 44: INTCON2bits.INTEDG2 = 0;
  4945  0015C0  98F1               	bcf	intcon2,4,c	;volatile
  4946                           
  4947                           ;system.c: 45: INTCON3bits.INT2IE = 1;
  4948  0015C2  88F0               	bsf	intcon3,4,c	;volatile
  4949                           
  4950                           ;system.c: 46: INTCON3bits.INT2IP = 1;
  4951  0015C4  8EF0               	bsf	intcon3,7,c	;volatile
  4952                           
  4953                           ;system.c: 48: IPR1bits.SSPIP = 0;
  4954  0015C6  969F               	bcf	3999,3,c	;volatile
  4955                           
  4956                           ;system.c: 49: IPR1bits.RCIP = 0;
  4957  0015C8  9A9F               	bcf	3999,5,c	;volatile
  4958                           
  4959                           ;system.c: 50: IPR1bits.ADIP = 0;
  4960  0015CA  9C9F               	bcf	3999,6,c	;volatile
  4961                           
  4962                           ;system.c: 51: IPR2bits.TMR3IP = 1;
  4963  0015CC  82A2               	bsf	4002,1,c	;volatile
  4964  0015CE  0012               	return		;funcret
  4965  0015D0                     __end_of_configureInterrupts:
  4966                           	opt stack 0
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           intcon	equ	0xFF2
  4974                           intcon2	equ	0xFF1
  4975                           intcon3	equ	0xFF0
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           fsr1h	equ	0xFE2
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987 ;; *************** function _lowISR *****************
  4988 ;; Defined at:
  4989 ;;		line 36 in file "interrupts.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;		None               void
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5003 ;;      Params:         0       0       0       0       0       0       0
  5004 ;;      Locals:         0       0       0       0       0       0       0
  5005 ;;      Temps:         19       0       0       0       0       0       0
  5006 ;;      Totals:        19       0       0       0       0       0       0
  5007 ;;Total ram usage:       19 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    2
  5010 ;; This function calls:
  5011 ;;		i1_writeChar
  5012 ;; This function is called by:
  5013 ;;		Interrupt level 1
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	intcodelo
  5018  000018                     __pintcodelo:
  5019                           	opt stack 0
  5020  000018                     _lowISR:
  5021                           	opt stack 22
  5022                           
  5023                           ;incstack = 0
  5024  000018  CFD8 F004          	movff	status,??_lowISR+2
  5025  00001C  CFE8 F005          	movff	wreg,??_lowISR+3
  5026  000020  CFE0 F006          	movff	bsr,??_lowISR+4
  5027  000024  CFFA F007          	movff	pclath,??_lowISR+5
  5028  000028  CFFB F008          	movff	pclatu,??_lowISR+6
  5029  00002C  CFE9 F009          	movff	fsr0l,??_lowISR+7
  5030  000030  CFEA F00A          	movff	fsr0h,??_lowISR+8
  5031  000034  CFE1 F00B          	movff	fsr1l,??_lowISR+9
  5032  000038  CFE2 F00C          	movff	fsr1h,??_lowISR+10
  5033  00003C  CFD9 F00D          	movff	fsr2l,??_lowISR+11
  5034  000040  CFDA F00E          	movff	fsr2h,??_lowISR+12
  5035  000044  CFF3 F00F          	movff	prodl,??_lowISR+13
  5036  000048  CFF4 F010          	movff	prodh,??_lowISR+14
  5037  00004C  CFF6 F011          	movff	tblptrl,??_lowISR+15
  5038  000050  CFF7 F012          	movff	tblptrh,??_lowISR+16
  5039  000054  CFF8 F013          	movff	tblptru,??_lowISR+17
  5040  000058  CFF5 F014          	movff	tablat,??_lowISR+18
  5041                           
  5042                           ;interrupts.c: 37: if(PIR1bits.ADIF){
  5043  00005C  AC9E               	btfss	3998,6,c	;volatile
  5044  00005E  D004               	goto	i1l2554
  5045                           
  5046                           ;interrupts.c: 38: adcflag = 1;
  5047  000060  0E01               	movlw	1
  5048  000062  6E55               	movwf	_adcflag,c	;volatile
  5049                           
  5050                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
  5051  000064  9C9E               	bcf	3998,6,c	;volatile
  5052  000066  D000               	goto	i1l2554
  5053  000068                     i1l2554:
  5054                           
  5055                           ;interrupts.c: 40: }
  5056                           ;interrupts.c: 42: if(PIR1bits.SSPIF){
  5057  000068  A69E               	btfss	3998,3,c	;volatile
  5058  00006A  D00C               	goto	i1l119
  5059                           
  5060                           ;interrupts.c: 43: if(!SSPCON2bits.ACKSTAT){
  5061  00006C  BCC5               	btfsc	4037,6,c	;volatile
  5062  00006E  D003               	goto	i1l2560
  5063                           
  5064                           ;interrupts.c: 45: ackflag = 1;
  5065  000070  0E01               	movlw	1
  5066  000072  6E54               	movwf	_ackflag,c	;volatile
  5067  000074  D000               	goto	i1l2560
  5068  000076                     i1l2560:
  5069                           
  5070                           ;interrupts.c: 46: }
  5071                           ;interrupts.c: 47: if(SSPSTATbits.S){
  5072  000076  50C7               	movf	4039,w,c	;volatile
  5073                           
  5074                           ;interrupts.c: 49: }
  5075                           ;interrupts.c: 50: if(SSPSTATbits.BF){
  5076  000078  A0C7               	btfss	4039,0,c	;volatile
  5077  00007A  D003               	goto	i1l123
  5078                           
  5079                           ;interrupts.c: 51: bflag = 1;
  5080  00007C  0E01               	movlw	1
  5081  00007E  6E57               	movwf	_bflag,c	;volatile
  5082                           
  5083                           ;interrupts.c: 56: }
  5084  000080  D000               	goto	i1l123
  5085  000082                     i1l123:
  5086                           
  5087                           ;interrupts.c: 59: }
  5088                           ;interrupts.c: 60: PIR1bits.SSPIF = 0;
  5089  000082  969E               	bcf	3998,3,c	;volatile
  5090  000084                     i1l119:
  5091                           
  5092                           ;interrupts.c: 61: }
  5093                           ;interrupts.c: 62: if(PIR2bits.BCLIF){
  5094  000084  A6A1               	btfss	4001,3,c	;volatile
  5095  000086  D005               	goto	i1l2568
  5096                           
  5097                           ;interrupts.c: 63: writeChar('b');
  5098  000088  0E62               	movlw	98
  5099  00008A  EC3E  F00B         	call	i1_writeChar
  5100                           
  5101                           ;interrupts.c: 64: PIR2bits.BCLIF = 0;
  5102  00008E  96A1               	bcf	4001,3,c	;volatile
  5103                           
  5104                           ;interrupts.c: 65: }
  5105  000090  D037               	goto	i1l130
  5106  000092                     i1l2568:
  5107                           
  5108                           ;interrupts.c: 67: else if(PIR1bits.RCIF & !(RCSTAbits.FERR|RCSTAbits.OERR)){
  5109  000092  AA9E               	btfss	3998,5,c	;volatile
  5110  000094  D003               	goto	i1u184_20
  5111  000096  6A02               	clrf	??_lowISR& (0+255),c
  5112  000098  2A02               	incf	??_lowISR& (0+255),f,c
  5113  00009A  D001               	goto	i1u184_28
  5114  00009C                     i1u184_20:
  5115  00009C  6A02               	clrf	??_lowISR& (0+255),c
  5116  00009E                     i1u184_28:
  5117  00009E  0E00               	movlw	0
  5118  0000A0  B4AB               	btfsc	4011,2,c	;volatile
  5119  0000A2  0E01               	movlw	1
  5120  0000A4  B2AB               	btfsc	4011,1,c	;volatile
  5121  0000A6  0E01               	movlw	1
  5122  0000A8  A0E8               	btfss	wreg,0,c
  5123  0000AA  D003               	goto	i1u185_20
  5124  0000AC  6A03               	clrf	(??_lowISR+1)& (0+255),c
  5125  0000AE  2A03               	incf	(??_lowISR+1)& (0+255),f,c
  5126  0000B0  D001               	goto	i1u185_28
  5127  0000B2                     i1u185_20:
  5128  0000B2  6A03               	clrf	(??_lowISR+1)& (0+255),c
  5129  0000B4                     i1u185_28:
  5130  0000B4  5003               	movf	??_lowISR+1,w,c
  5131  0000B6  A4D8               	btfss	status,2,c
  5132  0000B8  D002               	goto	i1u186_20
  5133  0000BA  0E01               	movlw	1
  5134  0000BC  D001               	goto	i1u187_20
  5135  0000BE                     i1u186_20:
  5136  0000BE  0E00               	movlw	0
  5137  0000C0                     i1u187_20:
  5138  0000C0  1402               	andwf	??_lowISR,w,c
  5139  0000C2  0900               	iorlw	0
  5140  0000C4  B4D8               	btfsc	status,2,c
  5141  0000C6  D006               	goto	i1l2574
  5142                           
  5143                           ;interrupts.c: 68: data = RCREG;
  5144  0000C8  CFAE F059          	movff	4014,_data	;volatile
  5145                           
  5146                           ;interrupts.c: 69: en_read = 1;
  5147  0000CC  0E01               	movlw	1
  5148  0000CE  0100               	movlb	0	; () banked
  5149  0000D0  6FBE               	movwf	_en_read& (0+255),b	;volatile
  5150                           
  5151                           ;interrupts.c: 70: }
  5152  0000D2  D016               	goto	i1l130
  5153  0000D4                     i1l2574:
  5154                           
  5155                           ;interrupts.c: 71: else if(RCSTAbits.FERR|RCSTAbits.OERR){
  5156  0000D4  0E00               	movlw	0
  5157  0000D6  B4AB               	btfsc	4011,2,c	;volatile
  5158  0000D8  0E01               	movlw	1
  5159  0000DA  B2AB               	btfsc	4011,1,c	;volatile
  5160  0000DC  0E01               	movlw	1
  5161  0000DE  A0E8               	btfss	wreg,0,c
  5162  0000E0  D003               	goto	i1u189_20
  5163  0000E2  6A02               	clrf	??_lowISR& (0+255),c
  5164  0000E4  2A02               	incf	??_lowISR& (0+255),f,c
  5165  0000E6  D001               	goto	i1u189_28
  5166  0000E8                     i1u189_20:
  5167  0000E8  6A02               	clrf	??_lowISR& (0+255),c
  5168  0000EA                     i1u189_28:
  5169  0000EA  5002               	movf	??_lowISR,w,c
  5170  0000EC  B4D8               	btfsc	status,2,c
  5171  0000EE  D005               	goto	i1l128
  5172                           
  5173                           ;interrupts.c: 72: data = RCREG;
  5174  0000F0  CFAE F059          	movff	4014,_data	;volatile
  5175                           
  5176                           ;interrupts.c: 73: RCSTAbits.CREN = 0;
  5177  0000F4  98AB               	bcf	4011,4,c	;volatile
  5178                           
  5179                           ;interrupts.c: 74: RCSTAbits.CREN = 1;
  5180  0000F6  88AB               	bsf	4011,4,c	;volatile
  5181                           
  5182                           ;interrupts.c: 75: }
  5183  0000F8  D003               	goto	i1l130
  5184  0000FA                     i1l128:
  5185                           
  5186                           ;interrupts.c: 76: else{
  5187                           ;interrupts.c: 77: garb = RCREG;
  5188  0000FA  CFAE F05B          	movff	4014,_garb	;volatile
  5189  0000FE  D000               	goto	i1l130
  5190  000100                     i1l130:
  5191  000100  C014  FFF5         	movff	??_lowISR+18,tablat
  5192  000104  C013  FFF8         	movff	??_lowISR+17,tblptru
  5193  000108  C012  FFF7         	movff	??_lowISR+16,tblptrh
  5194  00010C  C011  FFF6         	movff	??_lowISR+15,tblptrl
  5195  000110  C010  FFF4         	movff	??_lowISR+14,prodh
  5196  000114  C00F  FFF3         	movff	??_lowISR+13,prodl
  5197  000118  C00E  FFDA         	movff	??_lowISR+12,fsr2h
  5198  00011C  C00D  FFD9         	movff	??_lowISR+11,fsr2l
  5199  000120  C00C  FFE2         	movff	??_lowISR+10,fsr1h
  5200  000124  C00B  FFE1         	movff	??_lowISR+9,fsr1l
  5201  000128  C00A  FFEA         	movff	??_lowISR+8,fsr0h
  5202  00012C  C009  FFE9         	movff	??_lowISR+7,fsr0l
  5203  000130  C008  FFFB         	movff	??_lowISR+6,pclatu
  5204  000134  C007  FFFA         	movff	??_lowISR+5,pclath
  5205  000138  C006  FFE0         	movff	??_lowISR+4,bsr
  5206  00013C  C005  FFE8         	movff	??_lowISR+3,wreg
  5207  000140  C004  FFD8         	movff	??_lowISR+2,status
  5208  000144  0010               	retfie	
  5209  000146                     __end_of_lowISR:
  5210                           	opt stack 0
  5211                           pclatu	equ	0xFFB
  5212                           pclath	equ	0xFFA
  5213                           tblptru	equ	0xFF8
  5214                           tblptrh	equ	0xFF7
  5215                           tblptrl	equ	0xFF6
  5216                           tablat	equ	0xFF5
  5217                           prodh	equ	0xFF4
  5218                           prodl	equ	0xFF3
  5219                           intcon	equ	0xFF2
  5220                           intcon2	equ	0xFF1
  5221                           intcon3	equ	0xFF0
  5222                           postinc0	equ	0xFEE
  5223                           fsr0h	equ	0xFEA
  5224                           fsr0l	equ	0xFE9
  5225                           wreg	equ	0xFE8
  5226                           indf1	equ	0xFE7
  5227                           fsr1h	equ	0xFE2
  5228                           fsr1l	equ	0xFE1
  5229                           bsr	equ	0xFE0
  5230                           indf2	equ	0xFDF
  5231                           postinc2	equ	0xFDE
  5232                           fsr2h	equ	0xFDA
  5233                           fsr2l	equ	0xFD9
  5234                           status	equ	0xFD8
  5235                           
  5236 ;; *************** function i1_writeChar *****************
  5237 ;; Defined at:
  5238 ;;		line 41 in file "uart.c"
  5239 ;; Parameters:    Size  Location     Type
  5240 ;;  c               1    wreg     unsigned char 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  c               1    0[COMRAM] unsigned char 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;		None               void
  5245 ;; Registers used:
  5246 ;;		wreg
  5247 ;; Tracked objects:
  5248 ;;		On entry : 0/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5252 ;;      Params:         0       0       0       0       0       0       0
  5253 ;;      Locals:         1       0       0       0       0       0       0
  5254 ;;      Temps:          0       0       0       0       0       0       0
  5255 ;;      Totals:         1       0       0       0       0       0       0
  5256 ;;Total ram usage:        1 bytes
  5257 ;; Hardware stack levels used:    1
  5258 ;; Hardware stack levels required when called:    1
  5259 ;; This function calls:
  5260 ;;		Nothing
  5261 ;; This function is called by:
  5262 ;;		_lowISR
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	text33
  5267  00167C                     __ptext33:
  5268                           	opt stack 0
  5269  00167C                     i1_writeChar:
  5270                           	opt stack 22
  5271                           
  5272                           ;incstack = 0
  5273                           ;i1writeChar@c stored from wreg
  5274  00167C  6E01               	movwf	i1writeChar@c,c
  5275                           
  5276                           ;uart.c: 42: while(!TRMT);
  5277  00167E  D000               	goto	i1l269
  5278  001680                     i1l269:
  5279  001680  A2AC               	btfss	4012,1,c	;volatile
  5280  001682  D7FE               	goto	i1l269
  5281                           
  5282                           ;uart.c: 43: TXREG = c;
  5283  001684  C001  FFAD         	movff	i1writeChar@c,4013	;volatile
  5284  001688  0012               	return		;funcret
  5285  00168A                     __end_ofi1_writeChar:
  5286                           	opt stack 0
  5287                           pclatu	equ	0xFFB
  5288                           pclath	equ	0xFFA
  5289                           tblptru	equ	0xFF8
  5290                           tblptrh	equ	0xFF7
  5291                           tblptrl	equ	0xFF6
  5292                           tablat	equ	0xFF5
  5293                           prodh	equ	0xFF4
  5294                           prodl	equ	0xFF3
  5295                           intcon	equ	0xFF2
  5296                           intcon2	equ	0xFF1
  5297                           intcon3	equ	0xFF0
  5298                           postinc0	equ	0xFEE
  5299                           fsr0h	equ	0xFEA
  5300                           fsr0l	equ	0xFE9
  5301                           wreg	equ	0xFE8
  5302                           indf1	equ	0xFE7
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           bsr	equ	0xFE0
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           fsr2h	equ	0xFDA
  5309                           fsr2l	equ	0xFD9
  5310                           status	equ	0xFD8
  5311                           
  5312 ;; *************** function _i2cISR *****************
  5313 ;; Defined at:
  5314 ;;		line 24 in file "interrupts.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5328 ;;      Params:         0       0       0       0       0       0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0
  5330 ;;      Temps:         14       0       0       0       0       0       0
  5331 ;;      Totals:        14       0       0       0       0       0       0
  5332 ;;Total ram usage:       14 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		Interrupt level 2
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           	psect	intcode
  5342  000008                     __pintcode:
  5343                           	opt stack 0
  5344  000008                     _i2cISR:
  5345                           	opt stack 22
  5346                           
  5347                           ;incstack = 0
  5348  000008  CFFA F015          	movff	pclath,??_i2cISR
  5349  00000C  CFFB F016          	movff	pclatu,??_i2cISR+1
  5350  000010  CFE9 F017          	movff	fsr0l,??_i2cISR+2
  5351  000014  EDDF  F008         	call	int_func,f	;refresh shadow registers
  5352                           pclatu	equ	0xFFB
  5353                           pclath	equ	0xFFA
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           intcon2	equ	0xFF1
  5362                           intcon3	equ	0xFF0
  5363                           postinc0	equ	0xFEE
  5364                           fsr0h	equ	0xFEA
  5365                           fsr0l	equ	0xFE9
  5366                           wreg	equ	0xFE8
  5367                           indf1	equ	0xFE7
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           bsr	equ	0xFE0
  5371                           indf2	equ	0xFDF
  5372                           postinc2	equ	0xFDE
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377                           	psect	intcode_body
  5378  0011BE                     __pintcode_body:
  5379                           	opt stack 22
  5380  0011BE                     int_func:
  5381                           	opt stack 22
  5382  0011BE  0006               	pop		; remove dummy address from shadow register refresh
  5383  0011C0  CFEA F018          	movff	fsr0h,??_i2cISR+3
  5384  0011C4  CFE1 F019          	movff	fsr1l,??_i2cISR+4
  5385  0011C8  CFE2 F01A          	movff	fsr1h,??_i2cISR+5
  5386  0011CC  CFD9 F01B          	movff	fsr2l,??_i2cISR+6
  5387  0011D0  CFDA F01C          	movff	fsr2h,??_i2cISR+7
  5388  0011D4  CFF3 F01D          	movff	prodl,??_i2cISR+8
  5389  0011D8  CFF4 F01E          	movff	prodh,??_i2cISR+9
  5390  0011DC  CFF6 F01F          	movff	tblptrl,??_i2cISR+10
  5391  0011E0  CFF7 F020          	movff	tblptrh,??_i2cISR+11
  5392  0011E4  CFF8 F021          	movff	tblptru,??_i2cISR+12
  5393  0011E8  CFF5 F022          	movff	tablat,??_i2cISR+13
  5394                           
  5395                           ;interrupts.c: 25: if (PIR2bits.TMR3IF){
  5396  0011EC  A2A1               	btfss	4001,1,c	;volatile
  5397  0011EE  D008               	goto	i2l2542
  5398                           
  5399                           ;interrupts.c: 26: count++;
  5400  0011F0  4A52               	infsnz	_count,f,c	;volatile
  5401  0011F2  2A53               	incf	_count+1,f,c	;volatile
  5402                           
  5403                           ;interrupts.c: 27: PIR2bits.TMR3IF = 0;
  5404  0011F4  92A1               	bcf	4001,1,c	;volatile
  5405                           
  5406                           ;interrupts.c: 28: TMR3 = 0x3CAF;
  5407  0011F6  0E3C               	movlw	60
  5408  0011F8  6EB3               	movwf	4019,c	;volatile
  5409  0011FA  0EAF               	movlw	175
  5410  0011FC  6EB2               	movwf	4018,c	;volatile
  5411  0011FE  D000               	goto	i2l2542
  5412  001200                     i2l2542:
  5413                           
  5414                           ;interrupts.c: 29: }
  5415                           ;interrupts.c: 30: if (INTCON3bits.INT2IF){
  5416  001200  A2F0               	btfss	intcon3,1,c	;volatile
  5417  001202  D005               	goto	i2l115
  5418                           
  5419                           ;interrupts.c: 31: IRQ = 1;
  5420  001204  0E01               	movlw	1
  5421  001206  0100               	movlb	0	; () banked
  5422  001208  6FBD               	movwf	_IRQ& (0+255),b	;volatile
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;interrupts.c: 32: INTCON3bits.INT2IF = 0;
  5426  00120A  92F0               	bcf	intcon3,1,c	;volatile
  5427  00120C  D000               	goto	i2l115
  5428  00120E                     i2l115:
  5429  00120E  C022  FFF5         	movff	??_i2cISR+13,tablat
  5430  001212  C021  FFF8         	movff	??_i2cISR+12,tblptru
  5431  001216  C020  FFF7         	movff	??_i2cISR+11,tblptrh
  5432  00121A  C01F  FFF6         	movff	??_i2cISR+10,tblptrl
  5433  00121E  C01E  FFF4         	movff	??_i2cISR+9,prodh
  5434  001222  C01D  FFF3         	movff	??_i2cISR+8,prodl
  5435  001226  C01C  FFDA         	movff	??_i2cISR+7,fsr2h
  5436  00122A  C01B  FFD9         	movff	??_i2cISR+6,fsr2l
  5437  00122E  C01A  FFE2         	movff	??_i2cISR+5,fsr1h
  5438  001232  C019  FFE1         	movff	??_i2cISR+4,fsr1l
  5439  001236  C018  FFEA         	movff	??_i2cISR+3,fsr0h
  5440  00123A  C017  FFE9         	movff	??_i2cISR+2,fsr0l
  5441  00123E  C016  FFFB         	movff	??_i2cISR+1,pclatu
  5442  001242  C015  FFFA         	movff	??_i2cISR,pclath
  5443  001246  0011               	retfie		f
  5444  001248                     __end_of_i2cISR:
  5445                           	opt stack 0
  5446                           pclatu	equ	0xFFB
  5447                           pclath	equ	0xFFA
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           prodh	equ	0xFF4
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           intcon3	equ	0xFF0
  5457                           postinc0	equ	0xFEE
  5458                           fsr0h	equ	0xFEA
  5459                           fsr0l	equ	0xFE9
  5460                           wreg	equ	0xFE8
  5461                           indf1	equ	0xFE7
  5462                           fsr1h	equ	0xFE2
  5463                           fsr1l	equ	0xFE1
  5464                           bsr	equ	0xFE0
  5465                           indf2	equ	0xFDF
  5466                           postinc2	equ	0xFDE
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           pclatu	equ	0xFFB
  5471                           pclath	equ	0xFFA
  5472                           tblptru	equ	0xFF8
  5473                           tblptrh	equ	0xFF7
  5474                           tblptrl	equ	0xFF6
  5475                           tablat	equ	0xFF5
  5476                           prodh	equ	0xFF4
  5477                           prodl	equ	0xFF3
  5478                           intcon	equ	0xFF2
  5479                           intcon2	equ	0xFF1
  5480                           intcon3	equ	0xFF0
  5481                           postinc0	equ	0xFEE
  5482                           fsr0h	equ	0xFEA
  5483                           fsr0l	equ	0xFE9
  5484                           wreg	equ	0xFE8
  5485                           indf1	equ	0xFE7
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           bsr	equ	0xFE0
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495                           	psect	rparam
  5496  0000                     pclatu	equ	0xFFB
  5497                           pclath	equ	0xFFA
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           intcon	equ	0xFF2
  5505                           intcon2	equ	0xFF1
  5506                           intcon3	equ	0xFF0
  5507                           postinc0	equ	0xFEE
  5508                           fsr0h	equ	0xFEA
  5509                           fsr0l	equ	0xFE9
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           fsr1h	equ	0xFE2
  5513                           fsr1l	equ	0xFE1
  5514                           bsr	equ	0xFE0
  5515                           indf2	equ	0xFDF
  5516                           postinc2	equ	0xFDE
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     79      93
    BANK0           128     61      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 20
		 -> writeVal@buffer(BANK0[20]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    fdcMeas@lsb	PTR unsigned char  size(2) Largest target is 1
		 -> main@lsb(BANK0[1]), 

    fdcMeas@msb2	PTR unsigned char  size(2) Largest target is 1
		 -> main@msb2(BANK0[1]), 

    fdcMeas@msb1	PTR unsigned char  size(2) Largest target is 1
		 -> main@msb1(BANK0[1]), 

    fdcMeas@buf	PTR unsigned char  size(2) Largest target is 2
		 -> fdcRead@val(COMRAM[2]), 

    sp__nrfReadADDR	PTR unsigned char  size(2) Largest target is 5
		 -> nrfReadADDR@val(BANK0[5]), 

    nrfShowSettings@val	PTR unsigned char  size(2) Largest target is 5
		 -> nrfReadADDR@val(BANK0[5]), nrfRead@val(BANK0[2]), 

    nrfReceiveMode@len	PTR unsigned char  size(2) Largest target is 2
		 -> nrfRead@val(BANK0[2]), 

    sp__nrfReceive	PTR unsigned char  size(2) Largest target is 32
		 -> nrfReceive@val(COMRAM[32]), 

    nrfTransmit@data	PTR unsigned char  size(2) Largest target is 3
		 -> main@packet(BANK0[3]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 20
		 -> writeVal@buffer(BANK0[20]), 

    writeStr@str	PTR unsigned char  size(2) Largest target is 20
		 -> writeVal@buffer(BANK0[20]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sp__nrfRead	PTR unsigned char  size(2) Largest target is 2
		 -> nrfRead@val(BANK0[2]), 

    sp__fdcRead	PTR unsigned char  size(2) Largest target is 2
		 -> fdcRead@val(COMRAM[2]), 

    main@capstat	PTR unsigned char  size(2) Largest target is 2
		 -> fdcRead@val(COMRAM[2]), nrfRead@val(BANK0[2]), 

    i2cStart@input	PTR unsigned char  size(2) Largest target is 4
		 -> fdcWrite@input(COMRAM[4]), fdcRead@header(COMRAM[2]), 

    sp__adcRead	PTR unsigned char  size(2) Largest target is 2
		 -> adcRead@val(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _nrfReadADDR->_delay
    _nrfReceiveMode->_delay
    _writeVal->_ultoa
    _writeStr->_writeChar
    _ultoa->___lldiv
    _nrfRead->_delay
    _spiInit->_delay
    _delay->___ftge
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___ftge->___ftmul
    _fdcMeas->_fdcRead
    _fdcRead->_i2cStart
    _fdcInit->_fdcWrite
    _fdcWrite->_i2cStart
    _i2cStart->_i2cIdle

Critical Paths under _i2cISR in COMRAM

    None.

Critical Paths under _lowISR in COMRAM

    _lowISR->i1_writeChar

Critical Paths under _main in BANK0

    _main->_nrfReceiveMode
    _nrfTransmit->_writeVal
    _nrfShowSettings->_writeVal
    _nrfReceiveMode->_writeVal

Critical Paths under _i2cISR in BANK0

    None.

Critical Paths under _lowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _i2cISR in BANK1

    None.

Critical Paths under _lowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _i2cISR in BANK2

    None.

Critical Paths under _lowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _i2cISR in BANK3

    None.

Critical Paths under _lowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _i2cISR in BANK4

    None.

Critical Paths under _lowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _i2cISR in BANK5

    None.

Critical Paths under _lowISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0  111965
                                             46 BANK0     15    15      0
                _configureInterrupts
                _configureOscillator
                            _fdcInit
                            _fdcMeas
                            _fdcRead
                            _i2cInit
                            _nrfRead
                     _nrfReceiveMode
                    _nrfShowSettings
                        _nrfTransmit
                           _nrfWrite
                           _readChar
                        _timer3_init
                           _uartInit
                          _writeChar
                           _writeStr
                           _writeVal
 ---------------------------------------------------------------------------------
 (1) _uartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer3_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readChar                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nrfTransmit                                          9     6      3   10767
                                             20 BANK0      9     6      3
                           _nrfWrite
                          _writeChar
                           _writeVal
 ---------------------------------------------------------------------------------
 (1) _nrfShowSettings                                      6     6      0   30364
                                             20 BANK0      6     6      0
                            _nrfRead
                        _nrfReadADDR
                          _writeChar
                           _writeVal
 ---------------------------------------------------------------------------------
 (2) _nrfReadADDR                                          9     7      2   13368
                                              0 BANK0      9     7      2
                              _delay
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _nrfReceiveMode                                      26    26      0   37209
                                             20 BANK0     26    26      0
                              _delay
                            _nrfRead
                           _nrfWrite
                            _spiInit
                          _writeChar
                           _writeVal
 ---------------------------------------------------------------------------------
 (1) _writeVal                                            24    20      4    3124
                                             60 COMRAM     4     0      4
                                              0 BANK0     20    20      0
                              _ultoa
                           _writeStr
 ---------------------------------------------------------------------------------
 (2) _writeStr                                             5     3      2     392
                                             35 COMRAM     5     3      2
                          _writeChar
 ---------------------------------------------------------------------------------
 (3) _writeChar                                            1     1      0      31
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ultoa                                               13     5      8    1774
                                             47 COMRAM    13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     386
                                             34 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     549
                                             34 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _nrfWrite                                             3     2      1    7263
                                              0 BANK0      3     2      1
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _nrfRead                                              6     4      2   13389
                                              0 BANK0      6     4      2
                              _delay
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              0     0      0    6582
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                               10     7      3    6582
                                             69 COMRAM    10     7      3
                             ___ftge
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    2452
                                             42 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3100
                                             45 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2344
                                             34 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     352
                                             60 COMRAM     9     3      6
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _fdcMeas                                             14     8      6    4901
                                             52 COMRAM    14     8      6
                            ___awdiv
                            _fdcRead
                           _fdcWrite
 ---------------------------------------------------------------------------------
 (1) _fdcRead                                              9     7      2    1055
                                             43 COMRAM     9     7      2
                            _i2cIdle
                           _i2cStart
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             34 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _fdcInit                                              0     0      0    2527
                           _fdcWrite
 ---------------------------------------------------------------------------------
 (2) _fdcWrite                                             7     5      2    2527
                                             43 COMRAM     7     5      2
                            _i2cIdle
                           _i2cStart
 ---------------------------------------------------------------------------------
 (2) _i2cStart                                             8     5      3     746
                                             35 COMRAM     8     5      3
                            _i2cIdle
                            _i2cInit
 ---------------------------------------------------------------------------------
 (1) _i2cInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cIdle                                              1     1      0       0
                                             34 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _configureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configureInterrupts                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _lowISR                                              19    19      0      22
                                              1 COMRAM    19    19      0
                        i1_writeChar
 ---------------------------------------------------------------------------------
 (8) i1_writeChar                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _i2cISR                                              14    14      0       0
                                             20 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configureInterrupts
   _configureOscillator
   _fdcInit
     _fdcWrite
       _i2cIdle
       _i2cStart
         _i2cIdle
         _i2cInit
   _fdcMeas
     ___awdiv
     _fdcRead
       _i2cIdle
       _i2cStart
         _i2cIdle
         _i2cInit
     _fdcWrite
       _i2cIdle
       _i2cStart
         _i2cIdle
         _i2cInit
   _fdcRead
     _i2cIdle
     _i2cStart
       _i2cIdle
       _i2cInit
   _i2cInit
   _nrfRead
     _delay
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _spiInit
       _delay
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
   _nrfReceiveMode
     _delay
       ___ftge
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
     _nrfRead
       _delay
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       _spiInit
         _delay
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
     _nrfWrite
       _spiInit
         _delay
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
     _spiInit
       _delay
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _writeChar
     _writeVal
       _ultoa
         ___lldiv
         ___llmod
       _writeStr
         _writeChar
   _nrfShowSettings
     _nrfRead
       _delay
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       _spiInit
         _delay
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
     _nrfReadADDR
       _delay
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
       _spiInit
         _delay
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
     _writeChar
     _writeVal
       _ultoa
         ___lldiv
         ___llmod
       _writeStr
         _writeChar
   _nrfTransmit
     _nrfWrite
       _spiInit
         _delay
           ___ftge
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
     _writeChar
     _writeVal
       _ultoa
         ___lldiv
         ___llmod
       _writeStr
         _writeChar
   _nrfWrite
     _spiInit
       _delay
         ___ftge
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
   _readChar
   _timer3_init
   _uartInit
   _writeChar
   _writeStr
     _writeChar
   _writeVal
     _ultoa
       ___lldiv
       ___llmod
     _writeStr
       _writeChar

 _lowISR (ROOT)
   i1_writeChar

 _i2cISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3D      3F       5       49.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     4F      5D       1       73.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9C      15        0.0%
DATA                 0      0      9C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed May 18 21:47:22 2016

                 _SSPSTATbits 000FC7                  ___awdiv@sign 0028               _nrfShowSettings 0852  
                          bsr 000FE0                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_LVP$ON 000000                           l235 1096                           l236 102A  
                         l332 1484                           l423 10D6                           l327 1432  
                         l424 1120                           l328 1474                           l425 1130  
                         l284 166C                           l269 1672                           l391 098A  
                         l634 1008                           l394 13CA                           l395 140C  
                         l830 0F72                           l399 141C                           l760 0DF8  
                         l906 13A4                           l836 0B7C                           l749 0E20  
                         l958 0A62                           l896 11AC                  __CFG_CPB$OFF 000000  
                         _IRQ 00BD                  __CFG_CPD$OFF 000000               ?_nrfReceiveMode 0001  
                         prod 000FF3                           wreg 000FE8           __end_ofi1_writeChar 168A  
                 main@capstat 00BB                  __CFG_WDT$OFF 000000                          l1000 15AE  
                        l3004 14F8                          l3102 1404                          l3130 0F8A  
                        l3142 0FB2                          l3206 0BC8                          l3144 0FBC  
                        l3136 0F9C                          l3048 111A                          l3224 0C6C  
                        l3240 0CBA                          l3232 0C94                          l3162 0FFE  
                        l3154 0FE2                          l3146 0FC4                          l3322 0E3A  
                        l3076 146C                          l3068 1448                          l3244 0CD0  
                        l3260 0D3A                          l3308 0974                          l3332 0E9E  
                        l3412 0682                          l3158 0FEE                          l3094 13E0  
                        l3270 0876                          l3326 0E54                          l3430 0702  
                        l3406 066C                          l3248 0CE6                          l3192 165A  
                        l3338 0EB0                          l3426 06E6                          l2812 0ACC  
                        l3284 08D2                          l3276 08A0                          l3460 07D2  
                        l2830 0B12                          l2806 0AA4                          l2910 116A  
                        l3454 07BC                          l3446 0782                          l2840 0B40  
                        l2808 0ABE                          l3296 0914                          l3288 08DC  
                        l3472 082C                          l3456 07C2                          l2834 0B28  
                        l2826 0B00                          l2906 1154                          l2930 136E  
                        l3298 091C                          l2852 0F10                          l2780 0DC0  
                        l2772 0D7C                          l2844 0B56                          l2836 0B2E  
                        l2908 1162                          l2862 0F6E                          l2790 0E00  
                        l2782 0DE0                          l2774 0D88                          l2918 119C  
                        l2934 1394                          l2926 1358                          l2872 160C  
                        l2952 14B4                          l2856 0F42                          l2784 0DEC  
                        l2776 0DA8                          l2768 0D6C                          l2928 1366  
                        l2960 130A                          l2946 149A                          l2796 0E12  
                        l2964 099E                          l2956 12CE                          l2974 09F8  
                        l2998 14E4                          STR_1 0606                          STR_2 0601  
                        u2201 0AB4                          u2400 133E                          u2181 0A96  
                        u2270 1616                          u2407 1334                          u2700 0874  
                        u2278 1618                          u2390 1302                          u2624 0BB0  
                        u2625 0BAC                          u2634 0BDE                          u2635 0BDA  
                        u2397 12F8                          _TMR3 000FB2                          _TRMT 007D61  
                 i2cStart@len 0026                          _data 0059                          _garb 005B  
                        _main 060C                  ___ftpack@arg 0023                  ___ftpack@exp 0026  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr0l 000FE9  
                        fsr2h 000FDA                          indf1 000FE7                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          pclat 000FFA  
                        prodh 000FF4                          prodl 000FF3                          start 0146  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 003B  
             __end_of_i2cIdle 1626                  ___param_bank 000010                  ___ftmul@sign 003C  
             __end_of_i2cInit 1658                         ?_main 0001               __end_of___awdiv 100A  
                       _BRG16 007DC3               __end_of___lldiv 11BE               __end_of___ftmul 0B7E  
             ___awdiv@divisor 0025               __end_of___llmod 13B6                         _T3CON 000FB1  
                       i1l130 0100                         i1l123 0082                         i1l119 0084  
                       i1l128 00FA                         i2l115 120E                         i1l269 1680  
             ___awdiv@counter 0027                         _RCREG 000FAE               __end_of_fdcMeas 0C74  
             __end_of_fdcInit 12C8               __end_of_fdcRead 1132                         _SPBRG 000FAF  
                       _TXREG 000FAD                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                         _bflag 0057  
              __CFG_EBTRB$OFF 000000                         _delay 100A                         _count 0052  
               ___ftpack@sign 0027               __end_of_nrfRead 1486                         _ultoa 098C  
             __end_of_spiInit 158A                         tablat 000FF5                  ?_nrfReadADDR 0080  
                       status 000FD8       __end_of_nrfShowSettings 098C               __initialization 15EE  
                __end_of_main 0852              __end_of_i2cStart 14D0   __end_of_configureInterrupts 15D0  
                ?_nrfTransmit 0094                        ??_main 00AE                   i1_writeChar 167C  
               __activetblptr 000002                nrfReadADDR@reg 0087                nrfReadADDR@val 0082  
                      ?_delay 0046              ___llmod@dividend 0023                        _ADRESH 000FC4  
                      _ADRESL 000FC3              ___awdiv@dividend 0023              __end_of___ftpack 0E22  
                      ?_ultoa 0030                        i1l2560 0076                        i1l2554 0068  
                      i1l2574 00D4                        i1l2568 0092                        i2l2542 1200  
 __end_of_configureOscillator 1640              __end_of___lwtoft 15B0                 main@packetlen 00B6  
                      _SPBRGH 000FB0                        _SSPADD 000FC8                        _SSPBUF 000FC9  
                   ??_i2cIdle 0023              __end_of_fdcWrite 1562                     ??_i2cInit 0023  
                      _i2cISR 0008                __CFG_XINST$OFF 000000                        ___ftge 0EDE  
                   ??___awdiv 0027                __CFG_STVREN$ON 000000                     ??___lldiv 002B  
                   ??___ftmul 0034                 i2cStart@input 0024                     ??___llmod 002B  
                ?_timer3_init 0001              __end_of_readChar 166E              nrfShowSettings@i 0098  
            nrfShowSettings@k 0097                     ??_fdcMeas 003B                     ??_fdcInit 0033  
                   ??_fdcRead 002E                        _lowISR 0018                        clear_0 15FA  
            ___awdiv@quotient 0029              __end_of_nrfWrite 1506         ___ftmul@f3_as_product 0038  
            __end_of_uartInit 15EE                     ??_nrfRead 0050                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_spiInit 0050                        ultoa@c 003C                        ultoa@v 0038  
            __end_of_writeVal 1538              __end_of_writeStr 1346                    __accesstop 0080  
     __end_of__initialization 1600               __CFG_PBADEN$OFF 000000                    ___ftge@ff1 003D  
                  ___ftge@ff2 0040                 ___rparam_used 000001                 fdcWrite@input 002F  
            ?_nrfShowSettings 0001                    ___ftmul@f1 002E                    ___ftmul@f2 0031  
              __pcstackCOMRAM 0001                 __end_of_delay 109E              ??_nrfReceiveMode 0094  
               __end_of_ultoa 0A86                    ___lwtoft@c 002B               __CFG_OSC$INTIO7 000000  
                     ??_delay 0049                       ??_ultoa 0038                    __pbssBANK0 00BD  
                   ?_i2cStart 0024                       ?_i2cISR 0001          __size_of_nrfReadADDR 0068  
             nrfTransmit@data 0094                       ?___ftge 003D                       ?_lowISR 0001  
                 nrfWrite@reg 0082                   nrfWrite@tmp 0081                     ?___ftpack 0023  
                   ?___lwtoft 002B          __size_of_nrfTransmit 00BC                     ?_fdcWrite 002C  
                  fdcMeas@buf 0041                    fdcMeas@lsb 0039                    fdcRead@ack 0032  
                  fdcRead@reg 002F                    fdcRead@val 005C                       _SSPCON2 000FC5  
                  ??_i2cStart 0027                     ?_readChar 0001                       _i2cIdle 160A  
                     _i2cInit 1640            __size_of_writeChar 000E                     ?_nrfWrite 0080  
             __size_of_i2cISR 1240                       __Hparam 0000                       __Lparam 0000  
                   ?_uartInit 0001               __size_of___ftge 0096                       ___awdiv 0F74  
                     ___lldiv 1132                       ___ftmul 0A86                       ___llmod 1346  
                     _adcflag 0055                  __psmallconst 0600                       _b_error 0056  
                     _ackflag 0054                       _fdcMeas 0B7E                       _fdcInit 1248  
                     _fdcRead 109E                       _bfcount 0050                       __pcinit 15EE  
             __size_of_lowISR 012E                    ??___ftpack 0028                       __ramtop 0600  
                     __ptext0 060C                       __ptext1 15D0                       __ptext2 168A  
                     __ptext3 1658                       __ptext4 0E22                       __ptext5 0852  
                     __ptext6 13B6                       __ptext7 0C74                       __ptext8 1506  
                     __ptext9 12C8                       _en_read 00BE                     ?_writeVal 003D  
        __size_of_timer3_init 0006                     ?_writeStr 0024                  ?i1_writeChar 0001  
                     _con_sen 0058                    ??___lwtoft 002E                       delay@t1 004C  
                     delay@t2 004E                    ??_fdcWrite 002E                     _T3CONbits 000FB1  
                     _nrfRead 141E                       _spiInit 1562                       main@cmd 00BA  
                     main@lsb 00B7                __pintcode_body 11BE          end_of_initialization 1600  
                  ??_readChar 0023                 __Lmediumconst 0000                       int_func 11BE  
                  ??_nrfWrite 0050               ___lldiv@divisor 0027               ___lldiv@counter 002F  
                  ??_uartInit 0023                     _RCSTAbits 000FAB                       postinc0 000FEE  
                     postinc2 000FDE                     _PORTAbits 000F80                     _PORTBbits 000F81  
                  ??_writeVal 0041                    ??_writeStr 0026             __end_of_writeChar 167C  
                   _TRISAbits 000F92                     _TRISBbits 000F93                     _TRISCbits 000F94  
__size_of_configureInterrupts 0020                     i2cStart@i 002A                     _TXSTAbits 000FAC  
                  main@packet 00B3  __size_of_configureOscillator 001A          nrfReceiveMode@status 00A9  
              __end_of_i2cISR 1248                   ___ftmul@exp 0037                  nrfReadADDR@i 0088  
              __end_of___ftge 0F74                __end_of_lowISR 0146           start_initialization 15EE  
             ___llmod@divisor 0027             __size_of_i2cStart 004A               ___llmod@counter 002B  
                    ??_i2cISR 0015                      ??___ftge 0043              __CFG_LPT1OSC$OFF 000000  
                    ??_lowISR 0002      __size_of_nrfShowSettings 013A             __size_of___ftpack 00C6  
                 __pbssCOMRAM 0050          __size_ofi1_writeChar 000E             __size_of___lwtoft 0026  
               __pcstackBANK0 0080                  i1writeChar@c 0001             __size_of_fdcWrite 002A  
                  nrfRead@reg 0082                    nrfRead@val 0083                 ??_nrfReadADDR 0050  
                    ?_i2cIdle 0001                      ?_i2cInit 0001             __size_of_readChar 0016  
              nrfTransmit@len 0096                nrfTransmit@tmp 009A                  nrfTransmit@i 009B  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008             __size_of_nrfWrite 0036  
             nrfReceiveMode@i 00AD                      ?___awdiv 0023                      ?___lldiv 0023  
                    ?___ftmul 002E                      ?___llmod 0023             __size_of_uartInit 001E  
                    ?_fdcMeas 0035                      ?_fdcInit 0001                      ?_fdcRead 002C  
               ??_nrfTransmit 0097                   __pintcodelo 0018             nrfReceiveMode@len 00AB  
                 __smallconst 0600             nrfReceiveMode@val 0095                  nrfWrite@data 0080  
                    ?_nrfRead 0080             __size_of_writeVal 0032             __size_of_writeStr 007E  
                    ?_spiInit 0001       __size_of_nrfReceiveMode 00E8                __size_of_delay 0094  
              __size_of_ultoa 00FA                     delay@done 004B                      _LATBbits 000F8A  
                    _IPR1bits 000F9F                      _IPR2bits 000FA2                      _PIE1bits 000F9D  
                    _PIE2bits 000FA0                      i1u184_20 009C                      i1u185_20 00B2  
                    i1u184_28 009E                      i1u186_20 00BE                      i1u185_28 00B4  
                 fdcMeas@addr 003F                      i1u187_20 00C0                      i1u189_20 00E8  
                    i1u189_28 00EA                   fdcMeas@done 003D                   fdcMeas@msb1 0035  
                 fdcMeas@msb2 0037                      _PIR1bits 000F9E                      _PIR2bits 000FA1  
         _configureInterrupts 15B0           __end_of_nrfReadADDR 141E                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000                 ??_timer3_init 0023                   writeVal@val 003D  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
                 writeStr@str 0024          ?_configureInterrupts 0001           __end_of_nrfTransmit 0EDE  
         _configureOscillator 1626             ??_nrfShowSettings 0094                     _writeChar 166E  
                 _INTCON2bits 000FF1                   _INTCON3bits 000FF0                      _i2cStart 1486  
            __size_of_i2cIdle 001C              __size_of_i2cInit 0018                      __Hrparam 0000  
        ?_configureOscillator 0001                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
            __size_of___awdiv 0096              __size_of___lldiv 008C              __size_of___ftmul 00F8  
            __size_of___llmod 0070                   fdcWrite@lsb 002D                   fdcWrite@reg 002E  
                 fdcWrite@msb 002C                      ___ftpack 0D5C              __size_of_fdcMeas 00F6  
            __size_of_fdcInit 0080              __size_of_fdcRead 0094                      ___lwtoft 158A  
         __end_of_timer3_init 1690                      _fdcWrite 1538         ??_configureInterrupts 0023  
                    _data_rdy 005A              __size_of_nrfRead 0068                    ?_writeChar 0001  
                    __ptext10 166E                      __ptext11 098C                      __ptext20 0D5C  
                    __ptext12 1346                      __ptext21 0EDE                      __ptext13 1132  
                    __ptext30 1626                      __ptext22 0B7E                      __ptext14 14D0  
                    __ptext31 15B0                      __ptext23 109E                      __ptext15 141E  
                    __ptext24 0F74                      __ptext16 1562                      __ptext33 167C  
                    __ptext25 1248                      __ptext17 100A                      __ptext26 1538  
                    __ptext18 158A                      __ptext27 1486                      __ptext19 0A86  
                    __ptext28 1640                      __ptext29 160A              __size_of_spiInit 0028  
                    fdcRead@i 0034            nrfShowSettings@val 0095                fdcMeas@chx_reg 0040  
                    _readChar 1658                   _nrfReadADDR 13B6                 __size_of_main 0246  
                    delay@sec 0046                      _nrfWrite 14D0         ??_configureOscillator 0023  
                  writeChar@c 0023                      _uartInit 15D0                      main@addr 00AF  
                    main@msb1 00B8                      main@msb2 00B9                   _nrfTransmit 0E22  
                    _writeVal 1506                      _writeStr 12C8                   _OSCTUNEbits 000F9B  
                  _INTCONbits 000FF2                _nrfReceiveMode 0C74                     ultoa@base 0036  
                    nrfRead@i 0085                      intlevel1 0000                      intlevel2 0000  
            ___lldiv@dividend 0023                 fdcMeas@offset 003E                    _OSCCONbits 000FD3  
                   writeStr@i 0028                   _timer3_init 168A                 ??i1_writeChar 0001  
                    ultoa@buf 0030                      ultoa@val 0032        __end_of_nrfReceiveMode 0D5C  
              writeVal@buffer 0080              ___lldiv@quotient 002B                   _SSPCON1bits 000FC6  
                 _SSPCON2bits 000FC5                   ??_writeChar 0023                 fdcRead@header 0030  
